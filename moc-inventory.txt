// const InventoryItem: React.FC<InventoryItemProps> = ({ data, edit }) => {
//   const isDarkMode = useDarkMode();
//   const { preview, inputFileRef, handleImageChange } = useImageUploader({
//     placeholder: data?.image,
//   });

//   const input_styles: CSSProperties = {
//     backgroundColor: isDarkMode ? "#020617" : "white",
//   };

//   const selectImage = () => {
//     if (inputFileRef.current) {
//       inputFileRef.current.click();
//     }
//   };

//   return (
//     <div
//       className="w-full p-[18px] pb-0 flex-1 bg-white dark:bg-darkText-primary rounded-lg"
//       style={{
//         boxShadow:
//           "0px 1px 2px 0px rgba(21, 30, 43, 0.08), 0px 2px 4px 0px rgba(13, 23, 33, 0.08)",
//       }}
//     >
//       <div className="pb-[18px]">
//         <div className="flex flex-wrap-reverse items-center gap-5 2xl:gap-[66px]">
//           <div className="custom-flex-col gap-6 flex-1 py-2 min-w-[240px]">
//             <div className="custom-flex-col gap-2 flex-1">
//               {edit ? (
//                 <Input
//                   id="inventory-name"
//                   label="Inventory name"
//                   className="flex-1"
//                   style={input_styles}
//                 />
//               ) : (
//                 <InventoryField>{data?.name}</InventoryField>
//               )}
//             </div>
//             <div className="flex gap-4">
//               {edit ? (
//                 <>
//                   <Input
//                     id="inventory-quantity"
//                     placeholder="Quantity / Unit"
//                     type="number"
//                     className="flex-1"
//                     style={input_styles}
//                   />
//                   <Select
//                     id="inventory-condition"
//                     placeholder="Condition"
//                     options={inventory_conditions}
//                     className="flex-1"
//                     isSearchable={false}
//                   />
//                 </>
//               ) : (
//                 <>
//                   <InventoryField>{data?.quantity}</InventoryField>
//                   <InventoryField>{data?.condition}</InventoryField>
//                 </>
//               )}
//             </div>
//           </div>
//           <div className="relative h-full min-h-[165px] aspect-square rounded-2xl overflow-hidden">
//             <Image
//               src={preview || ""}
//               alt="property"
//               fill
//               sizes="200px"
//               className="object-cover"
//             />
//             {edit && (
//               <div
//                 className="absolute inset-0 flex items-center justify-center"
//                 style={{ backgroundColor: "rgba(0, 0, 0, 0.2)" }}
//               >
//                 <input
//                   type="file"
//                   id="picture"
//                   name="picture"
//                   accept="image/*"
//                   ref={inputFileRef}
//                   className="hidden pointer-events-none"
//                   onChange={handleImageChange}
//                 />
//                 <div className="custom-flex-col gap-6">
//                   <div className="flex flex-col items-center gap-2 custom-primary-color">
//                     <ImageIcon />
//                     <p className="text-brand-9 text-sm font-semibold">
//                       Set picture
//                     </p>
//                   </div>
//                   <Button
//                     onClick={selectImage}
//                     size="base_medium"
//                     className="py-1 px-6"
//                   >
//                     select
//                   </Button>
//                 </div>
//               </div>
//             )}
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default InventoryItem;




  // const handleSearch = async (query: string) => {
  //   if (!query && !searchQuery) return;
  //   setSearchQuery(query);
  // };


  // useEffect(() => {
  //   const fetchThreads = async () => {

  //     setIsLoading(true);
  //     setError(null);
  //     try {
  //       const data = await getThreads();
  //       console.log('data', data);
  //       setThreads(data.data);
  //       console.log('Threads data:', data);
  //     } catch (err) {
  //       setError(err instanceof Error ? err.message : 'Failed to fetch threads');
  //       console.error('Error fetching threads:', err);
  //     } finally {
  //       setIsLoading(false);
  //     }
  //   };

  //   fetchThreads();
  // }, []);

  












// "use client";

// import React, { CSSProperties, useState } from "react";

// // Imports
// import Input from "@/components/Form/Input/input";
// import Button from "@/components/Form/Button/button";
// import Select from "@/components/Form/Select/select";
// import BackButton from "@/components/BackButton/back-button";
// import InventoryItem from "@/components/Management/Inventory/inventory-item";
// import useDarkMode from "@/hooks/useCheckDarkMode";
// import { AuthForm } from "@/components/Auth/auth-components";
// import { createInventory } from "../../data";
// import { toast } from "sonner";

// const CreateInventory = () => {
//   const isDarkMode = useDarkMode();
//   const input_styles: CSSProperties = {
//     padding: "12px 14px",
//     backgroundColor: isDarkMode ? "#020617" : "white",
//   };

//   const [inventoryItems, setInventoryItems] = useState<number>(2);

//   const handleAddInventory = async (formData: FormData) => {
//     console.log("formData", formData)
//     const inventoryData = [];
    
//     // Get all form entries and filter inventory items
//     const formEntries = Array.from(formData.entries());
//     const itemEntries = formEntries.filter(([key]) => 
//       key.startsWith('item-name') || 
//       key.startsWith('quantity') || 
//       key.startsWith('condition')
//     );
    
//     console.log("Filtered entries:", itemEntries); // Debug log for filtered entries
    
//     // Group elements into inventory items
//     for (let i = 0; i < itemEntries.length; i += 3) {
//       const itemData = {
//         name: itemEntries[i][1],
//         quantity: itemEntries[i + 1][1],
//         condition: itemEntries[i + 2][1],
//       };
//       inventoryData.push(itemData);
//     }

//     console.log("inventoryData", inventoryData)
    
//     // try {
//     //   const success = await createInventory({
//     //     title: formData.get('inventory-title'),
//     //     videoLink: formData.get('video-link'),
//     //     branchName: formData.get('branch-name'),
//     //     items: inventoryData
//     //   });

//     //   if (success) {
//     //     toast.success("Inventory created successfully");
//     //   }
//     // } catch (error) {
//     //   console.error("Error creating inventory:", error);
//     //   toast.error("Failed to create inventory");
//     // }
//   };

//   const handleAddMoreInventory = () => {
//     setInventoryItems(prev => prev + 1);
//   };

//   return (
//     <div className="custom-flex-col gap-10 pb-[100px]">
//       <form onSubmit={handleAddInventory}>
//         <div className="custom-flex-col gap-4">
//           <BackButton>Create Inventory</BackButton>
//           <div className="flex flex-col md:flex-row gap-8">
//             <Input
//             id="inventory-title"
//             placeholder="Add Title"
//             className="flex-1 dark:bg-darkText-primary"
//             style={input_styles}
//           />
//           <Input
//             id="video-link"
//             placeholder="Video Link"
//             className="flex-1"
//             style={input_styles}
//           />
//           <Select
//             id="branch-name"
//             placeholder="Branch Name"
//             options={["branch 1", "branch 2", "branch 3"]}
//             isSearchable={false}
//             className="bg-white dark:bg-darkText-primary flex-1"
//           />
//           </div>
//       </div>
//       <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-4">
//         {[...Array(inventoryItems)].map((_, index) => (
//           <InventoryItem key={index} edit />
//         ))}
//       </div>
//       <div className="fixed bottom-0 right-0 w-full bg-white dark:bg-darkText-primary py-5 px-[60px] flex gap-6 justify-end">
//         <Button
//           size="sm_medium"
//           variant="blank"
//           className="py-2 px-7 text-brand-9 bg-brand-1"
//           onClick={() => setInventoryItems(2)}
//         >
//           Clear all
//         </Button>
//         <div className="flex gap-6">
//           <Button
//             size="sm_medium"
//             variant="blank"
//             className="py-2 px-7 text-brand-9 bg-brand-1"
//             onClick={handleAddMoreInventory}
//           >
//             Add more to inventory
//           </Button>
//           <Button type="submit" size="sm_medium" className="py-2 px-7">
//             save
//           </Button>
//           </div>
//         </div>
//       </form>
//     </div>
//   );
// };

// export default CreateInventory;












  const sendComment = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const message = formData.get('message');
    const reply = formData.get('reply');
    
    // Find the closest parent element with data-comment-id
    const commentElement = (e.target as HTMLElement).closest('[data-comment-id]');
    const commentId = commentElement?.getAttribute('data-comment-id');

    try {
      setCommenting(true);
      
      if (reply && commentId) {
        console.log('reply', commentId);
        // await sendMyArticleReply(slug, commentId, reply as string);
        toast.success("Reply sent successfully");
      } else if (message) {
        // await sendMyArticleComment(slug, message as string);
        // toast.success("Comment sent successfully");
      }

      // Reset form and fetch updated comments
      (e.target as HTMLFormElement).reset();
      setShowInput(false);
      
    } catch (error) {
      console.error("Error sending comment/reply:", error);
      toast.error("Failed to send comment");
    } finally {
      setCommenting(false);
    }
  };















  // const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  //   let files = Array.from(e.target.files || []);
  //   files = files.slice(0, MAX_IMAGES - images.length);
  //   const validImages: string[] = [];
  //   const oversizeImages: string[] = [];
  //   for (const file of files) {
  //     if (!file.type.startsWith("image/")) {
  //       alert("Upload only image files.");
  //       return;
  //     }
  //     if (file.size > MAX_FILE_SIZE_MB * 1024 * 1024) {
  //       oversizeImages.push(file.name);
  //       continue;
  //     }
  //     try {
  //       const reader = new FileReader();
  //       reader.onloadend = () => {
  //         validImages.push(reader.result as string);
  //         if (validImages.length + oversizeImages.length === files.length) {
  //           setImages((prevImages) => [...prevImages, ...validImages]);
  //         }
  //       };
  //       reader.readAsDataURL(file);
  //     } catch (error) {
  //       console.error("Error processing image:", error);
  //       alert("There was an error processing your image. Please try again.");
  //     }
  //   }

  //   if (oversizeImages.length > 0) {
  //     alert(
  //       `Some images were rejected due to exceeding the maximum size: ${MAX_FILE_SIZE_MB} MB`
  //     );
  //   }
    
  //   // e.target.value = "";
  // };











// const ThreadComments = ({ slug, commentsCount }: { slug: string, commentsCount: number }) => {
//   const [showInput, setShowInput] = useState(true);
//   const [commenting, setCommenting] = useState(false);
//   const [comments, setComments] = useState<CommentProps[]>([]);

//   const { data, error, loading } = useFetch<CommentsResponse>(`/agent_community/${slug}/comments`);

//   const handleLike = (commentId: string | number) => {
//     console.log('Like comment:', commentId);
//   };

//   const handleDislike = (commentId: string | number) => {
//     console.log('Dislike comment:', commentId);
//   };

//   useEffect(() => {
//     if (data?.data) {
//       const commentsData = data.data.map((comment) => ({
//         ...comment,
//         replies: comment.replies || [],
//       }));
//       setComments(commentsData);
//     }
//   }, [data]);
  
//   // console.log('Comments data:', { data, comments });


//   const sendComment = async (e: React.FormEvent<HTMLFormElement>) => {
//     e.preventDefault();
//     // setShowInput(false);
//     const formData = new FormData(e.target as HTMLFormElement);
//     const message = formData.get('message');
//     const reply = formData.get('reply');
    
//     try {
//       setCommenting(true);
      
//       if (reply) {
//         const replyInput = (e.target as HTMLFormElement).querySelector('input[name="reply"]');
//         const commentId = Number(replyInput?.id);
        
//         if (commentId) {
//           // Optimistically update UI
//           const newReply: CommentProps = {
//             id: Date.now(),
//             name: "You",
//             text: reply as string,
//             likes: 0,
//             dislikes: 0,
//             handleSubmit: () => {},
//             commenting: false,
//             replies: []
//           };

//           setComments(prevComments => 
//             prevComments.map(comment => 
//               comment.id === commentId
//                 ? { ...comment, replies: [...(comment.replies || []), newReply] }
//                 : comment
//             )
//           );

//           // Send to server
//           await sendMyArticleReply(slug, commentId.toString(), reply as string);
//         }
//       } else if (message) {
//         // Optimistically update UI
//         const newComment: CommentProps = {
//           id: Date.now(),
//           name: "You",
//           text: message as string,
//           likes: 0,
//           dislikes: 0,
//           replies: [],
//           handleSubmit: () => {},
//           commenting: false
//         };

//         setComments(prev => [...prev, newComment]);

//         // Send to server
//         await sendMyArticleComment(slug, message as string);
//       }

//       // Fetch latest comments in background
//       const response = await fetch(`/agent_community/${slug}/comments`);
//       const newData = await response.json();
//       setComments(newData.data);

//       (e.target as HTMLFormElement).reset();
//       setShowInput(false);
//       toast.success(reply ? "Reply sent successfully" : "Comment sent successfully");
      
//     } catch (error) {
//       console.error("Error sending comment/reply:", error);
//       // Revert optimistic update by re-fetching
//       const response = await fetch(`/agent_community/${slug}/comments`);
//       const newData = await response.json();
//       setComments(newData.data);
//       toast.error("Failed to send comment");
//     } finally {
//       setCommenting(false);
//     }
//   };


//   return (    
//     <div>
//       {commentsCount === 0 && showInput ? (
//         <NewComment 
//         onSubmit={(e) => {
//           sendComment(e);
//           // setShowInput(true);
//         }} 
//           commenting={commenting} 
//         />
//       ) : (
//         <form onSubmit={sendComment}>
//           <div className="mt-4">
//             {comments.map((comment) => (
//               <div key={comment.id} data-comment-id={comment.id}>
//                 <Comment
//                   {...comment} 
//                   handleLike={handleLike} 
//                   handleDislike={handleDislike} 
//                   commenting={commenting}
//                   handleSubmit={sendComment}
//                   commentsCount={commentsCount}
//                 />
//               </div>
//             ))}
//           </div>
//         </form>
//       )}
//     </div>
//   );
// };











// import { useEffect, useState } from "react";
// import Image from "next/image";
// import Input from "@/components/Form/Input/input";
// import { DeleteIconOrange, PlusIcon } from "@/public/icons/icons";
// const Image1 = "/empty/SampleLandlord.jpeg";
// const Image2 = "/empty/SampleLandlord.jpeg";
// const Image3 = "/empty/SampleLandlord.jpeg";

// const AddPhotoAndVideo = ({ editing, data }: { editing?: boolean, data?: any }) => {
//   const MAX_FILE_SIZE_MB = 2;
//   const MAX_IMAGES = 4;
  
//   // Add new state for File objects
//   const [imageFiles, setImageFiles] = useState<File[]>([]);
//   // Keep preview state for displaying images
//   const [imagePreviews, setImagePreviews] = useState<string[]>(
//     editing && data?.media ? data.media : []
//   );

//   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     let files = Array.from(e.target.files || []);
//     files = files.slice(0, MAX_IMAGES - imagePreviews.length);
    
//     const validFiles: File[] = [];
//     const oversizeImages: string[] = [];

//     files.forEach(file => {
//       if (!file.type.startsWith("image/")) {
//         alert("Upload only image files.");
//         return;
//       }
      
//       if (file.size > MAX_FILE_SIZE_MB * 1024 * 1024) {
//         oversizeImages.push(file.name);
//         return;
//       }

//       validFiles.push(file);
//     });

//     // Create preview URLs for valid files
//     validFiles.forEach(file => {
//       const reader = new FileReader();
//       reader.onloadend = () => {
//         setImagePreviews(prev => [...prev, reader.result as string]);
//       };
//       reader.readAsDataURL(file);
//     });

//     // Store the actual File objects
//     setImageFiles(prev => [...prev, ...validFiles]);

//     if (oversizeImages.length > 0) {
//       alert(
//         `Some images were rejected due to exceeding the maximum size: ${MAX_FILE_SIZE_MB} MB`
//       );
//     }
    
//     // Add hidden input for FormData
//     const input = document.createElement('input');
//     input.type = 'file';
//     input.style.display = 'none';
//     input.name = 'pictures';
//     validFiles.forEach(file => {
//       const dataTransfer = new DataTransfer();
//       dataTransfer.items.add(file);
//       input.files = dataTransfer.files;
//     });
//     document.body.appendChild(input);
    
//     e.target.value = "";
//   };

//   const [videoLink, setVideoLink] = useState(
//     editing && data?.video_link ? data.video_link : ''
//   );

//   // console.log('videoLink', data.video_link);
//   // console.log('images', images);

//   return (
//     <div className="lg:flex-1 space-y-4">
//       <div className="grid gap-4 md:grid-cols-2">
//         {imagePreviews.length > 0 &&
//           imagePreviews.map((src, index) => (
//             <div
//               key={index}
//               className="relative overflow-hidden rounded-lg w-full h-[110px]"
//             >
//               <Image
//                 src={src}
//                 alt={`Uploaded ${index}`}
//                 fill
//                 className="object-cover"
//               />
//               <button
//                 type="button"
//                 aria-label="Remove Image"
//                 onClick={() => {
//                   setImagePreviews(prev => prev.filter((_, i) => i !== index));
//                   setImageFiles(prev => prev.filter((_, i) => i !== index));
//                 }}
//                 className="absolute top-1 right-1 z-[2]"
//               >
//                 <DeleteIconOrange size={20} />
//               </button>
//             </div>
//           ))}
//         {imagePreviews.length < MAX_IMAGES && (
//           <label
//             htmlFor="picture"
//             className="px-4 w-full h-[110px] rounded-lg border-2 border-dashed border-[#626262] bg-white dark:bg-darkText-primary flex flex-col items-center justify-center cursor-pointer text-[#626262] dark:text-darkText-1"
//           >
//             <PlusIcon />
//             <span className="text-black dark:text-darkText-1 text-base font-normal mt-2 text-center">
//               Add Photo
//             </span>
//             <input
//               id="picture"
//               name="pictures"
//               type="file"
//               accept="image/*"
//               multiple
//               onChange={handleFileChange}
//               className="hidden"
//             />
//           </label>
//         )}
//       </div>
//       <Input
//         id="video_link"
//         label="Video Link"
//         type="url"
//         placeholder="https://www.youtube.com/video"
//         inputClassName="bg-white"
//         value={videoLink}
//         onChange={(data) => setVideoLink(data)}
//       />
//     </div>
//   );
// };

// export default AddPhotoAndVideo;


















const ThreadComments = ({
  slug,
  comments,
  setComments,
}: {
  slug: string;
  comments: CommentProps[];
  setComments: React.Dispatch<React.SetStateAction<CommentProps[]>>;
}) => {
  const [commenting, setCommenting] = useState(false);

  const fetchComments = async () => {
    try {
      const response = await fetch(`/agent_community/${slug}/comments`);
      const data = await response.json();
      setComments(data.data);
    } catch (error) {
      console.error("Error fetching comments:", error);
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const message = formData.get("message") as string;
    const reply = formData.get("reply") as string;
    const parentId = formData.get("parentId") as string;

    if (!message && !reply) return;

    try {
      setCommenting(true);
      
      // Optimistic update
      const newComment = {
        id: Date.now(), // Temporary ID
        text: reply || message,
        name: "You", // Or get from user context
        likes: 0,
        dislikes: 0,
        replies: []
      };

      if (reply && parentId) {
        // Optimistically update replies
        setComments(prevComments => 
          prevComments.map(comment => {
            if (comment.id.toString() === parentId) {
              return {
                ...comment,
                replies: [...(comment.replies || []), newComment]
              };
            }
            return comment;
          })
        );
        
        await sendMyArticleReply(slug, parentId, reply);
      } else if (message) {
        // Optimistically add new comment
        setComments(prev => [...prev, newComment]);
        await sendMyArticleComment(slug, message);
      }
      
      toast.success(reply ? "Reply added successfully" : "Comment added successfully");
      
      // Background refetch to sync with server
      fetchComments();
      
    } catch (error) {
      toast.error("Failed to add comment/reply");
      console.error(error);
      // Revert optimistic update on error
      fetchComments();
    } finally {
      setCommenting(false);
    }
  };







   const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
  
    const formData = new FormData(e.target as HTMLFormElement);
    const message = formData.get("message") as string;
    const reply = formData.get("reply") as string;
    const parentId = formData.get("parentId") as string;
  
    if (!message && !reply) return;
  
    try {
      setCommenting(true);
  
      // Optimistic Update: New comment/reply
      const newComment: CommentData = {
        id: Date.now(),
        text: reply || message,
        name: "You", // Authenticated user's name
        likes: 0,
        dislikes: 0,
        replies: [],
        likeCount: 0,
        dislikeCount: 0,
        commentsCount: 0
      };
  
      if (reply && parentId) {
        // Add reply to the specific parent comment
        setComments((prevComments) =>
          prevComments.map((comment) =>
            comment.id.toString() === parentId
              ? {
                  ...comment,
                  replies: [...(comment.replies || []), newComment],
                }
              : comment
          )
        );
  
        // Send reply to the server
        await sendMyArticleReply(slug, parentId, reply);
      } else if (message) {
        // Add new top-level comment
        setComments((prev) => [...prev, newComment]);
  
        // Send comment to the server
        await sendMyArticleComment(slug, message);
      }
  
      toast.success(reply ? "Reply added successfully" : "Comment added successfully");
  
      // Fetch updated comments from the server for synchronization
      fetchComments();
    } catch (error) {
      toast.error("Failed to add comment/reply");
      console.error("Error adding comment/reply:", error);
  
      // Revert optimistic updates by re-fetching comments
      fetchComments();
    } finally {
      setCommenting(false);
    }
  };







  const inventoryFiltersWithDropdown = [
    {
      label: "Account Officer",
      value: [
        { label: "Account Officer 1", value: "account_officer1" },
        { label: "Account Officer 2", value: "account_officer2" },
        { label: "Account Officer 3", value: "account_officer3" },
      ],
    },
    {
      label: "Branch",
      value: [
        { label: "Branch 1", value: "branch1" },
        { label: "Branch 2", value: "branch2" },
        { label: "Branch 3", value: "branch3" },
      ],
    },
  ]


        {selectedView === "grid" ? (
        <AutoResizingGrid gap={28} minWidth={330}>
          {inventory.map((item, idx) => (
            <InventoryCard key={idx} data={item} />
          ))}
        </AutoResizingGrid>
      ) : (
        <div className="custom-flex-col gap-[18px]">
          {inventory.map((item, idx) => (
            <InventoryList key={idx} data={item} />
          ))}
        </div>
      )}
    </div>





















    ================================================



    // "use client";
// import { useEffect, useMemo, useState } from "react";
// import { useRouter, useParams } from "next/navigation";
// import Picture from "@/components/Picture/picture";
// import BadgeIcon from "@/components/BadgeIcon/badge-icon";
// import { secondaryFont } from "@/utils/fonts";
// import Button from "@/components/Form/Button/button";
// import UserTag from "@/components/Tags/user-tag";
// import {
//   LandlordTenantInfoBox as InfoBox,
//   LandlordTenantInfo as ContactInfo,
//   MobileNotesModal,
// } from "@/components/Management/landlord-tenant-info-components";
// import PreviousRecord from "@/components/tasks/vehicles-record/previous-record";
// import DefaultLandlordAvatar from "@/public/empty/landlord-avatar.png";
// import { SectionSeparator } from "@/components/Section/section-components";
// import { VehicleRecordData } from "@/app/(nav)/tasks/vehicles-record/data";
// import Pagination from "@/components/Pagination/pagination";
// import { Modal, ModalTrigger, ModalContent } from "@/components/Modal/modal";
// import CheckInOutForm from "@/components/tasks/visitors-requests/check-in-out-form";
// import {
//   EditVehicleDetailsFormModal,
//   EditPersonalDetailsFormModal,
// } from "@/components/tasks/vehicles-record/edit-vehicle-details";
// import BackButton from "@/components/BackButton/back-button";
// import FixedFooter from "@/components/FixedFooter/fixed-footer";
// import useFetch from "@/hooks/useFetch";
// import useRefetchOnEvent from "@/hooks/useRefetchOnEvent";
// import { transformSingleVehicleRecordApiResponse } from "./data";

// const Detail: React.FC<{
//   label: string;
//   value: string;
// }> = ({ label, value }) => {
//   return (
//     <div className="flex flex-col sm:flex-row gap-x-4 gap-y-1">
//       <p className="text-[#747474] dark:text-darkText-2 w-[135px]">{label}</p>
//       <p className="text-black dark:text-white capitalize">{value}</p>
//     </div>
//   );
// };

// const RecordPage = () => {
//   const router = useRouter();
//   const { recordId } = useParams();

//    const initialState = {
//     userData: null,
//     vehicleDetails: null,
//     webContactInfo: null,
//     };
//   const [states, setStates] = useState(initialState);

//   // const config = useMemo(
//     //   () => ({
//     //     params: {
//     //       page: current_page,
//     //       search: searchQuery,
//     //       sort_order: sortOrder,
//     //     },
//     //   }),
//     //   [current_page, searchQuery, sortOrder]
//     // );

//     const {
//       data: apiData,
//       loading,
//       silentLoading,
//       isNetworkError,
//       error,
//     refetch,
//   } = useFetch(`vehicle-record/${recordId}`);
//   useRefetchOnEvent("refetchVehicleRecord", () => refetch({ silent: true }));

//     useEffect(() => {
//       if (apiData) {
//         setStates((x) => ({
//           ...x,
//           userData: transformSingleVehicleRecordApiResponse(apiData),
//         }));
//         console.log("Updated state", states);
//         console.log("apiData", apiData);
//       }
//   }, [apiData]);

//   console.log("recordId- ", recordId);
//   // const [userData, setUserData] = useState<UserData | null>({
//   //   user_tag: Math.random() > 0.5 ? "web" : "mobile",
//   //   pictureSrc: "/empty/landlord-avatar.png",
//   //   full_name: "Abimbola Adedeji",
//   //   state: "Oyo",
//   //   local_government: "Ibadan North Central",
//   //   city: "Ibadan",
//   //   address: "U4 Joke Plaza Bodija Ibadan",
//   //   phone_number: "2348132086958",
//   //   avatar: "/empty/avatar-1.svg",
//   //   id: "22132876554444",
//   //   notes: {
//   //     last_updated: "22/12/2022",
//   //     write_up:
//   //       "Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quos. Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quos. building, is a residential property that living read more. They want to work with their budget in booking an appointment. They wants to ease themselves the stress having to que, and also reduce the time spent searching for something new.for something new. A multi-family home, also know as a duplex, triplex, or multi-unit building, is a residential property that living read more. They want to work with their budget in booking an appointment. ime spent searching",
//   //   },
//   // });
//   if (!userData) return null;
//   const {
//     user_tag,
//     notes,
//     full_name,
//     state,
//     address,
//     avatar,
//     local_government,
//     city,
//     phone_number,
//   } = userData;
//   return (
//     <div className="space-y-5 pb-[100px]">
//       <BackButton>Vehicle Record</BackButton>
//       <div className="grid lg:grid-cols-2 gap-y-5 gap-x-8">
//         <InfoBox
//           style={{ padding: "24px 40px" }}
//           className="relative space-y-5"
//         >
//           <div className="flex flex-col xl:flex-row gap-5">
//             <Picture
//               src={DefaultLandlordAvatar}
//               alt="profile picture"
//               size={120}
//               rounded
//             />
//             <div className="custom-flex-col gap-4">
//               <div className="custom-flex-col">
//                 <div className="flex items-center">
//                   <p className="text-black dark:text-white text-lg lg:text-xl font-bold capitalize">
//                     Abimbola Ayodeji
//                   </p>
//                   <BadgeIcon color="blue" />
//                 </div>
//                 <p
//                   className={`${secondaryFont.className} text-sm dark:text-darkText-2 font-normal`}
//                 >
//                   ayo@gmail.com
//                 </p>
//               </div>
//               <div className="custom-flex-col gap-2">
//                 <UserTag type={user_tag} />
//                 {user_tag === "mobile" && (
//                   <p className="text-neutral-800 dark:text-darkText-2 text-base font-medium">
//                     ID: 22132876554444
//                   </p>
//                 )}
//               </div>
//             </div>
//           </div>
//           <div className="w-fit mx-auto flex flex-wrap gap-4">
//             {user_tag === "mobile" ? (
//               <>
//                 <Button size="base_medium" className="py-2 px-8">
//                   message
//                 </Button>
//               </>
//             ) : (
//               <>
//                 <Modal>
//                   <ModalTrigger asChild>
//                     <Button size="base_medium" className="py-2 px-8">
//                       Edit
//                     </Button>
//                   </ModalTrigger>
//                   <ModalContent>
//                     <EditPersonalDetailsFormModal
//                       data={{
//                         full_name,
//                         state,
//                         address,
//                         avatar,
//                         local_government,
//                         city,
//                         phone_number,
//                       }}
//                     />
//                   </ModalContent>
//                 </Modal>
//                 <Button size="base_medium" className="py-2 px-8">
//                   Update with ID
//                 </Button>
//               </>
//             )}
//             <Modal>
//               <ModalTrigger asChild>
//                 <Button
//                   variant="sky_blue"
//                   size="base_medium"
//                   className="py-2 px-8"
//                 >
//                   Note
//                 </Button>
//               </ModalTrigger>
//               <ModalContent>
//                 <MobileNotesModal notes={notes} />
//               </ModalContent>
//             </Modal>
//           </div>
//         </InfoBox>

//         {user_tag === "mobile" && (
//           <ContactInfo
//             info={{
//               Gender: "Male",
//               Religion: "Christianity",
//               Phone: "08132086958",
//             }}
//           />
//         )}
//         <ContactInfo
//           heading="Contact Address"
//           info={{
//             Address: "U4 Joke Plaza Bodija Ibadan",
//             city: "Ibadan",
//             State: "Oyo State",
//             "L.G": "Ibadan North Central",
//           }}
//         />
//         {user_tag === "mobile" && (
//           <ContactInfo
//             heading="Next of Kin"
//             containerClassName="flex flex-col justify-center"
//             info={{
//               Name: "Abimbola Adedeji",
//               email: "abimbola@gmail.com",
//               "Phone Number": "08132086958",
//               relationship: "Father",
//             }}
//           />
//         )}
//       </div>
//       {/* <VehicleDetails /> */}
//       <InfoBox className="text-black dark:text-white text-lg lg:text-xl font-bold">
//         <h3>Vehicle Details</h3>
//         <SectionSeparator className="my-4" />
//         <div className="flex flex-wrap gap-4 lg:gap-16 text-sm lg:text-base font-normal capitalize">
//           <div className="grid gap-y-4 gap-x-8 grid-cols-2 lg:grid-cols-3">
//             <Detail label="Brand Name" value="Toyota" />
//             <Detail label="Plate Number" value="OS102DR" />
//             <Detail label="Category" value="Guest" />
//             <Detail label="Model" value="Corolla" />
//             <Detail label="State" value="Lagos" />
//             <Detail label="Color" value="Black" />
//             <Detail label="Manufacture Year" value="2002" />
//           </div>
//           <Modal>
//             <ModalTrigger asChild>
//               <Button size="base_medium" className="py-2 px-8 ml-auto self-end">
//                 Edit
//               </Button>
//             </ModalTrigger>
//             <ModalContent>
//               <EditVehicleDetailsFormModal
//                 data={{
//                   brand_name: "Volvo",
//                   plate_number: "OS102DR",
//                   state: "Lagos",
//                   model: "Corolla",
//                   vehicle_type: "Cars",
//                   color: "Black",
//                   manufacturer_year: "2022 - 2026",
//                   visitor_category: "Guest",
//                 }}
//               />
//             </ModalContent>
//           </Modal>
//         </div>
//       </InfoBox>

//       {/* Previous Records */}
//       <div className="space-y-4">
//         <h2 className="text-brand-9 font-bold text-lg lg:text-xl">
//           Previous Records
//         </h2>
//         <SectionSeparator />
//         <div className="space-y-4">
//           {VehicleRecordData.map((record) => (
//             <PreviousRecord key={record.id} {...record} />
//           ))}
//         </div>
//       </div>
//       <Pagination totalPages={10} currentPage={1} onPageChange={() => {}} />
//       <FixedFooter className="flex items-center justify-end">
//         <Modal>
//           <ModalTrigger asChild>
//             <Button size="sm_normal" className="py-2 px-8">
//               Create New Record
//             </Button>
//           </ModalTrigger>
//           <ModalContent>
//             <CheckInOutForm
//               useCase="vehicle"
//               type="check-in"
//               pictureSrc={userData.pictureSrc}
//               userName={userData.full_name}
//               id={userData.id}
//               category="Guest"
//               registrationDate="12/01/2024 (08:09pm)"
//             />
//           </ModalContent>
//         </Modal>
//       </FixedFooter>
//     </div>
//   );
// };

// export default RecordPage;










// RecordPage.tsx













"use client";

import Image from "next/image";
import React, { CSSProperties, useState, useRef, useEffect } from "react";

// Types
import type { InventoryItemProps } from "./types";

// Imports
import { inventory_conditions } from "./data";
import Input from "@/components/Form/Input/input";
import Picture from "@/components/Picture/picture";
import Button from "@/components/Form/Button/button";
import Select from "@/components/Form/Select/select";
import { InventoryField } from "./inventory-components";
import { useImageUploader } from "@/hooks/useImageUploader";
import { ImageIcon } from "@/public/icons/icons";
import useDarkMode from "@/hooks/useCheckDarkMode";
import { CounterButton } from "@/components/Settings/SettingsEnrollment/settings-enrollment-components";
import { toast } from "sonner";
import PopUpImageModal from "@/components/PopupSlider/PopupSlider";

const InventoryItem: React.FC<InventoryItemProps & { index: number }> = ({ data, edit, index }) => {
  const isDarkMode = useDarkMode();
  const [count, setCount] = useState<number>(1);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);

  useEffect(() => {
    console.log("data inventory item item - ", data);
  }, [data]);

  const handleIncrement = () => {
    setCount((prevCount) => (prevCount + 1));
  };

  const handleDecrement = () => {
    setCount((prevCount) => (prevCount > 1 ? prevCount - 1 : prevCount));
  };
  
   const input_styles: CSSProperties = {
     backgroundColor: isDarkMode ? "#020617" : "white",
   };
  
   const selectImage = () => {
     if (fileInputRef.current) {
       fileInputRef.current.click();
     }
   };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Validate file type
      if (!file.type.match(/^image\/(jpeg|jpg|png)$/)) {
        toast.error('Please select a valid image file (JPG, JPEG, or PNG)');
        e.target.value = ''; // Clear the input
        setSelectedFile(null);
        return;
      }
      
      // Validate file size
      if (file.size === 0) {
        toast.error('The selected file is empty');
        e.target.value = ''; // Clear the input
        setSelectedFile(null);
        return;
      }

      setSelectedFile(file);
      console.log('File selected:', file);
    }
  };

  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };

  const handleImageClick = () => {
    if (!edit) {
      setIsModalOpen(true);
    }
  };

  return (
    <>
      <div
        className="w-full p-[18px] pb-0 flex-1 bg-white dark:bg-darkText-primary rounded-lg"
        style={{
          boxShadow:
            "0px 1px 2px 0px rgba(21, 30, 43, 0.08), 0px 2px 4px 0px rgba(13, 23, 33, 0.08)",
        }}
      >
        <div className="pb-[18px]">
          <div className="flex flex-wrap-reverse items-center gap-5 2xl:gap-[66px]">
            <div className="custom-flex-col gap-6 flex-1 py-2 min-w-[240px]">
              <div className="custom-flex-col gap-2 flex-1">
                {edit ? (
                  <Input
                    id={`item-name-${index}`}
                    name={`item-name-${index}`}
                    label="Inventory name"
                    className="flex-1"
                    style={input_styles}
                    defaultValue={data?.name || data?.description || ""}
                  />
                ) : (
                  <InventoryField>{data?.name || data?.description || "---"}</InventoryField>
                )}
              </div>
              <div className="flex gap-4">
                {edit ? (
                  <>
                  <div className="flex justify-between max-w-[150px] px-2 items-center gap-2 border-2 border-text-disabled dark:border-[#3C3D37] rounded-md">
                    <input
                      type="number"
                      id={`quantity-${index}`}
                      name={`quantity-${index}`}
                      value={data?.quantity || data?.unit || count}
                      onChange={(e) => setCount(Number(e.target.value))}
                      className="w-2/3 px-2 py-2 border-transparent focus:outline-none"
                    />
                    <div className="btn flex flex-col items-end justify-end">
                      <CounterButton
                        onClick={handleIncrement}
                        icon="/icons/plus.svg"
                        alt="plus"
                      />
                      <CounterButton
                        onClick={handleDecrement}
                        icon="/icons/minus.svg"
                        alt="minus"
                      />
                    </div>
                    </div>
                    <Select
                      id={`condition-${index}`}
                      name={`condition-${index}`}
                      placeholder="Condition"
                      options={inventory_conditions}
                      className="flex-1"
                      isSearchable={false}
                      defaultValue={data?.condition}
                    />
                  </>
                ) : (
                  <>
                    <InventoryField>{data?.unit || data?.quantity || "---"}</InventoryField>
                    <InventoryField>{data?.condition || "---"}</InventoryField>
                  </>
                )}
              </div>
            </div>
            <div className="relative h-full min-h-[165px] aspect-square rounded-2xl overflow-hidden">
              <Image
                src={selectedFile ? URL.createObjectURL(selectedFile) : data?.image ? data?.image : ""}
                alt="property"
                fill
                sizes="200px"
                className="object-cover"
                onClick={handleImageClick}
              />
               {edit && (
                 <div
                   className="absolute inset-0 flex items-center justify-center"
                   style={{ backgroundColor: "rgba(0, 0, 0, 0.2)" }}
                 >
                   <input
                     ref={fileInputRef}
                     type="file"
                     name={`image-${index}`}
                     accept="image/*"
                     onChange={handleFileChange}
                     className="hidden"
                     aria-label="Upload image"
                   />
                   <div className="custom-flex-col gap-6">
                     <div className="flex flex-col items-center gap-2 custom-primary-color">
                       <ImageIcon />
                       <p className="text-brand-9 text-sm font-semibold">
                         Set picture
                       </p>
                     </div>
                     <Button
                       onClick={handleUploadClick}
                       size="base_medium"
                       className="py-1 px-6"
                     >
                       select
                     </Button>
                   </div>
                 </div>
               )}
            </div>
          </div>
        </div>
      </div>
      {isModalOpen && (
        <PopUpImageModal 
          imageSrc={selectedFile ? URL.createObjectURL(selectedFile) : data?.image} 
          onClose={() => setIsModalOpen(false)} 
        />
      )}
    </>
  );
};

export default InventoryItem;












================INVENTORY ITEM================
"use client";

import Image from "next/image";
import React, { CSSProperties, useState, useRef, useEffect } from "react";

// Types
import type { InventoryItemProps } from "./types";

// Imports
import { inventory_conditions } from "./data";
import Input from "@/components/Form/Input/input";
import Picture from "@/components/Picture/picture";
import Button from "@/components/Form/Button/button";
import Select from "@/components/Form/Select/select";
import { InventoryField } from "./inventory-components";
import { useImageUploader } from "@/hooks/useImageUploader";
import { ImageIcon } from "@/public/icons/icons";
import useDarkMode from "@/hooks/useCheckDarkMode";
import { CounterButton } from "@/components/Settings/SettingsEnrollment/settings-enrollment-components";
import { toast } from "sonner";

const InventoryItem: React.FC<InventoryItemProps & { index: number }> = ({ data, edit, index }) => {
  const isDarkMode = useDarkMode();
  const [count, setCount] = useState<number>(1);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    console.log("data inventory item item - ", data);
  }, [data]);

  const handleIncrement = () => {
    setCount((prevCount) => (prevCount + 1));
  };

  const handleDecrement = () => {
    setCount((prevCount) => (prevCount > 1 ? prevCount - 1 : prevCount));
  };
  
   const input_styles: CSSProperties = {
     backgroundColor: isDarkMode ? "#020617" : "white",
   };
  
   const selectImage = () => {
     if (fileInputRef.current) {
       fileInputRef.current.click();
     }
   };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Validate file type
      if (!file.type.match(/^image\/(jpeg|jpg|png)$/)) {
        toast.error('Please select a valid image file (JPG, JPEG, or PNG)');
        e.target.value = ''; // Clear the input
        setSelectedFile(null);
        return;
      }
      
      // Validate file size
      if (file.size === 0) {
        toast.error('The selected file is empty');
        e.target.value = ''; // Clear the input
        setSelectedFile(null);
        return;
      }

      setSelectedFile(file);
      console.log('File selected:', file);
    }
  };

  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };

  return (
    <div
      className="w-full p-[18px] pb-0 flex-1 bg-white dark:bg-darkText-primary rounded-lg"
      style={{
        boxShadow:
          "0px 1px 2px 0px rgba(21, 30, 43, 0.08), 0px 2px 4px 0px rgba(13, 23, 33, 0.08)",
      }}
    >
      <div className="pb-[18px]">
        <div className="flex flex-wrap-reverse items-center gap-5 2xl:gap-[66px]">
          <div className="custom-flex-col gap-6 flex-1 py-2 min-w-[240px]">
            <div className="custom-flex-col gap-2 flex-1">
              {edit ? (
                <Input
                  id={`item-name-${index}`}
                  name={`item-name-${index}`}
                  label="Inventory name"
                  className="flex-1"
                  style={input_styles}
                  defaultValue={data?.name || data?.description || ""}
                />
              ) : (
                <InventoryField>{data?.name || data?.description || "---"}</InventoryField>
              )}
            </div>
            <div className="flex gap-4">
              {edit ? (
                <>
                <div className="flex justify-between max-w-[150px] px-2 items-center gap-2 border-2 border-text-disabled dark:border-[#3C3D37] rounded-md">
                  <input
                    type="number"
                    id={`quantity-${index}`}
                    name={`quantity-${index}`}
                    value={data?.quantity || data?.unit || count}
                    onChange={(e) => setCount(Number(e.target.value))}
                    className="w-2/3 px-2 py-2 border-transparent focus:outline-none"
                  />
                  <div className="btn flex flex-col items-end justify-end">
                    <CounterButton
                      onClick={handleIncrement}
                      icon="/icons/plus.svg"
                      alt="plus"
                    />
                    <CounterButton
                      onClick={handleDecrement}
                      icon="/icons/minus.svg"
                      alt="minus"
                    />
                  </div>
                  </div>
                  <Select
                    id={`condition-${index}`}
                    name={`condition-${index}`}
                    placeholder="Condition"
                    options={inventory_conditions}
                    className="flex-1"
                    isSearchable={false}
                    defaultValue={data?.condition}
                  />
                </>
              ) : (
                <>
                  <InventoryField>{data?.unit || data?.quantity || "---"}</InventoryField>
                  <InventoryField>{data?.condition || "---"}</InventoryField>
                </>
              )}
            </div>
          </div>
          <div className="relative h-full min-h-[165px] aspect-square rounded-2xl overflow-hidden">
            <Image
              src={selectedFile ? URL.createObjectURL(selectedFile) : data?.image ? data?.image : ""}
              alt="property"
              fill
              sizes="200px"
              className="object-cover"
            />
             {edit && (
               <div
                 className="absolute inset-0 flex items-end justify-center"
                 style={{ backgroundColor: "rgba(0, 0, 0, 0.2)" }}
               >
                 <input
                   ref={fileInputRef}
                   type="file"
                   name={`image-${index}`}
                   accept="image/*"
                   onChange={handleFileChange}
                   className="hidden"
                   aria-label="Upload image"
                 />
                 <div className="custom-flex-col gap-6">
                   {/* <div className="flex flex-col items-center gap-2 custom-primary-color">
                     <ImageIcon />
                     <p className="text-brand-9 text-sm font-semibold">
                       Add picture
                     </p>
                   </div> */}
                   <Button
                     onClick={handleUploadClick}
                     size="base_medium"
                     className="py-1 px-6 mb-2"
                   >
                     Add Pictures
                   </Button>
                 </div>
               </div>
             )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default InventoryItem;






========== vehicles record page =========
"use client";
import { useEffect, useMemo, useState } from "react";
import ManagementStatistcsCard from "@/components/Management/ManagementStatistcsCard";
import Button from "@/components/Form/Button/button";
import CustomTable from "@/components/Table/table";
import type { DataItem } from "@/components/Table/types";
import Pagination from "@/components/Pagination/pagination";
import { Modal, ModalContent, ModalTrigger } from "@/components/Modal/modal";
import VehicleRecordModal from "@/components/tasks/vehicles-record/vehicle-record-modal";
import CreateRecordModal from "@/components/tasks/vehicles-record/create-record-modal";
import type { VehicleRecord } from "@/components/tasks/vehicles-record/types";
import {
  transformVehicleRecordApiResponse,
  VehicleData,
  VehicleRecordApiResponse,
  vehicleRecordFIltersOptionsWithDropdown,
  veicleRecordTablefields,
} from "./data";
import FilterBar from "@/components/FIlterBar/FilterBar";
import useFetch from "@/hooks/useFetch";
import useRefetchOnEvent from "@/hooks/useRefetchOnEvent";
import CustomLoader from "@/components/Loader/CustomLoader";
import NetworkError from "@/components/Error/NetworkError";
import EmptyList from "@/components/EmptyList/Empty-List";
import { ExclamationMark } from "@/public/icons/icons";
import AutoResizingGrid from "@/components/AutoResizingGrid/AutoResizingGrid";
import TableLoading from "@/components/Loader/TableLoading";
import CardsLoading from "@/components/Loader/CardsLoading";

const VehiclesRecordPage = () => {
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedRecord, setSelectedRecord] = useState<VehicleRecord | null>(null);

  const initialState = {
    check_ins: 0,
    check_ins_pending: 0,
    check_ins_this_month: 0,
    check_outs: 0,
    check_outs_pending: 0,
    check_outs_this_month: 0,
    total_records: 0,
    vehicle_records: {
      data: [] as VehicleData[],
      current_page: 1,
      total: 0,
    },
  };

  const [state, setState] = useState(initialState);
  const {
    check_ins,
    check_outs,
    check_ins_pending,
    check_outs_pending,
    check_ins_this_month,
    check_outs_this_month,
    total_records,
    vehicle_records: { data, current_page, total },
  } = state;

  const [searchQuery, setSearchQuery] = useState("");
  const [sortOrder, setSortOrder] = useState<"asc" | "desc">("asc");
  
  
  const handleSort = (order: "asc" | "desc") => {
    setSortOrder(order);
  };

  const handlePageChange = (page: number) => {
    setSearchQuery("");
    setState((prevState) => ({
      ...prevState,
      current_page: page,
    }));
  };

  const handleSearch = async (query: string) => {
    setSearchQuery(query);
  };

  const config = useMemo(
    () => ({
      params: {
        page: current_page,
        search: searchQuery,
        sort_order: sortOrder,
      },
    }),
    [current_page, searchQuery, sortOrder]
  );

  const {
    data: apiData,
    loading,
    silentLoading,
    isNetworkError,
    error,
    refetch,
  } = useFetch<VehicleRecordApiResponse>("vehicle-record", config);
  useRefetchOnEvent("refetchVehicleRecord", () => refetch({ silent: true }));

  useEffect(() => {
    if (apiData) {
      setState((x) => ({
        ...x,
        ...transformVehicleRecordApiResponse(apiData)
      }));
      console.log("Updated state", state);
    }
  }, [apiData]);

  const handleActionClick = (record: DataItem) => {
    const vehicleRecord = record as VehicleRecord;
    console.log("vehicle record passed -", vehicleRecord)
    const updatedRecord = {
      ...data,
      latest_check_in: vehicleRecord.latest_check_in,
      pictureSrc: vehicleRecord.pictureSrc,
      status: vehicleRecord.status,
      name: vehicleRecord.name,
      id: vehicleRecord.id,
      category: vehicleRecord.category,
      registrationDate: vehicleRecord.registrationDate,
      checkOut: vehicleRecord.latest_check_in,
      plate_number: vehicleRecord.plate_number,
      last_update: vehicleRecord.last_update,
    };
    setSelectedRecord(updatedRecord);
    console.log("updatedRecord", updatedRecord)
    setModalOpen(true);
  };

    if (loading)
      return (
        <CustomLoader
          layout="page"
          pageTitle="Vehicle Records"
          statsCardCount={3}
        />
      );

    if (isNetworkError) return <NetworkError />;

    if (error)
      return <p className="text-base text-red-500 font-medium">{error}</p>;


  return (
    <div className="space-y-9">
      <div className="page-header-container">
        <div className="hidden md:flex gap-5 flex-wrap">
          <ManagementStatistcsCard
            title="Check In"
            newData={check_ins_this_month}
            total={check_ins}
            colorScheme={1}
          />
          <ManagementStatistcsCard
            title="Check Out"
            newData={check_outs_this_month}
            total={check_outs}
            colorScheme={2}
          />
          <ManagementStatistcsCard
            title="Pending"
            newData={check_ins_pending}
            total={check_ins_pending}
            colorScheme={3}
          />
        </div>
        <Modal>
          <ModalTrigger asChild>
            <Button type="button" className="page-header-button">
              + Create New Record
            </Button>
          </ModalTrigger>
          <ModalContent>
            <CreateRecordModal data={data} />
          </ModalContent>
        </Modal>
      </div>
      <FilterBar
        azFilter
        onStateSelect={() => {}}
        pageTitle="Vehicle Record"
        aboutPageModalData={{
          title: "Vehicle Record",
          description:
            "This page contains a list of Vehicle Record on the platform.",
        }}
        searchInputPlaceholder="Search for Vehicle Record"
        handleFilterApply={() => {}}
        isDateTrue
        filterOptions={[]}
        filterWithOptionsWithDropdown={vehicleRecordFIltersOptionsWithDropdown}
        hasGridListToggle={false}
        handleSearch={handleSearch}
        onSort={handleSort}
      />
      <section className="capitalize">
        {data.length === 0 && !silentLoading ? (
          searchQuery ? (
            "No Search Found"
          ) : (
            <EmptyList
              buttonText="+ create new"
              modalContent={
                <CreateRecordModal data={data} />
              }
              title="You have not created any vehicle records yet"
              body={
                <p>
                  You can create profiles for all your branches and assign staff
                  and properties to them by clicking on the &quot;Create
                  Branch&quot; button. Branch managers will have the same access
                  to their branch as you do, while you will have access to all
                  staff accounts and branches created. To learn more about this
                  page later, you can click on this icon{" "}
                  <span className="inline-block text-brand-10 align-text-top">
                    <ExclamationMark />
                  </span>{" "}
                  at the top left of the dashboard page.
                </p>
              }
            />
          )
        ) : (
          <>
            <AutoResizingGrid minWidth={284}>
              {silentLoading ? (
                <CardsLoading />
              ) : (
                <>
                  <Modal
                    state={{
                      isOpen: modalOpen,
                      setIsOpen: setModalOpen,
                    }}
                  >
                    <ModalContent>
                      <VehicleRecordModal {...(selectedRecord as VehicleRecord)} />
                    </ModalContent>
                  </Modal>
                </>
              )}
            </AutoResizingGrid>
            {silentLoading ? (
              <TableLoading />
            ) : (
              <CustomTable
                fields={veicleRecordTablefields}
                data={data}
                tableHeadClassName="h-[76px]"
                tableHeadCellSx={{
                  borderBottom: "1px solid rgba(234, 236, 240, 0.20)",
                }}
                handleSelect={handleActionClick}
              />
            )}
            <Modal
              state={{
                isOpen: modalOpen,
                setIsOpen: setModalOpen,
              }}
            >
              <ModalContent>
                <VehicleRecordModal {...(selectedRecord as VehicleRecord)} />
              </ModalContent>
            </Modal>
            <Pagination
              totalPages={total}
              currentPage={current_page}
              onPageChange={handlePageChange}
            />
          </>
        )}
      </section>
    </div>
  );
};

export default VehiclesRecordPage;


================= inventory item ===============

"use client";

import Image from "next/image";
import React, { CSSProperties, useState, useRef, useEffect } from "react";

// Types
import type { InventoryItemProps } from "./types";

// Imports
import { inventory_conditions } from "./data";
import Input from "@/components/Form/Input/input";
import Picture from "@/components/Picture/picture";
import Button from "@/components/Form/Button/button";
import Select from "@/components/Form/Select/select";
import { InventoryField } from "./inventory-components";
import {
  CameraIcon,
  EditPencilIcon,
  ImageIcon,
  PlusIcon,
} from "@/public/icons/icons";
import useDarkMode from "@/hooks/useCheckDarkMode";
import { CounterButton } from "@/components/Settings/SettingsEnrollment/settings-enrollment-components";
import { toast } from "sonner";
import { Modal, ModalContent, ModalTrigger } from "@/components/Modal/modal";
import LandlordTenantModalPreset from "../landlord-tenant-modal-preset";
import { DragDropContext, Droppable, DropResult } from "@hello-pangea/dnd";
import { v4 as uuidv4 } from "uuid";
import { useMultipleImageUpload } from "@/hooks/useMultipleImageUpload";
import { MAX_FILE_SIZE_MB } from "@/data";
import DraggableImage from "../Properties/draggable-image";
import PopupImageModal from "@/components/PopupSlider/PopupSlider";

interface AddPictureModalProps {
  handleSave: () => void;
  handleDragEnd: (result: DropResult) => void;
  sortableImages: any[];
  removeImage: (index: number) => void;
  fileInputRef: React.RefObject<HTMLInputElement>;
  handleFileChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  images: any[];
  index: number;
}

const InventoryItem: React.FC<InventoryItemProps & { index: number }> = ({
  data,
  edit,
  index,
  inventoryFiles,
  setInventoryFiles,
}) => {
  const initialImages = data?.images || [];
  const isDarkMode = useDarkMode();
  const [count, setCount] = useState<number>(1);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [screenModal, setScreenModal] = useState(false);
  const [openModal, setOpenModal] = useState(false);
  // const fileInputRef = useRef<HTMLInputElement>(null);

  const maxNumberOfImages = 6;
  const {
    images,
    imageFiles,
    fileInputRef,
    handleFileChange,
    removeImage,
    handleImageReorder,
    resetImages,
  } = useMultipleImageUpload({
    maxImages: maxNumberOfImages,
    maxFileSizeMB: MAX_FILE_SIZE_MB,
  });

  
  // const images = initialImages.length > 0 ? initialImages : uploadedImages;
  
useEffect(() => {
    if (setInventoryFiles) {
      const updatedFiles = [...(inventoryFiles || [])];
      updatedFiles[index] = imageFiles;
      setInventoryFiles(updatedFiles);
    }
  }, [imageFiles, setInventoryFiles]);
  
  const handleSave = () => {
    console.log(`Images for index ${index}:`, imageFiles);
    setOpenModal(false);
  };

  const handleDragEnd = (result: DropResult) => {
    if (!result.destination) return;
    const { source, destination } = result;
    if (source.index === destination.index) return;
    handleImageReorder(source.index, destination.index);
  };

  const sortableImages = images.map((image, index) => ({
    id: uuidv4(),
    index,
    image,
  }));

  useEffect(() => {
    console.log("data inventory item item - ", data);
  }, [data]);

  const handleIncrement = () => {
    setCount((prevCount) => prevCount + 1);
  };

  const handleDecrement = () => {
    setCount((prevCount) => (prevCount > 1 ? prevCount - 1 : prevCount));
  };

  const input_styles: CSSProperties = {
    backgroundColor: isDarkMode ? "#020617" : "white",
  };

  const selectImage = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div
      className="w-full p-[18px] pb-0 flex-1 bg-white dark:bg-darkText-primary rounded-lg"
      style={{
        boxShadow:
          "0px 1px 2px 0px rgba(21, 30, 43, 0.08), 0px 2px 4px 0px rgba(13, 23, 33, 0.08)",
      }}
    >
      <div className="pb-[18px]">
        <div className="flex flex-wrap-reverse items-center gap-5 2xl:gap-[66px]">
          <div className="custom-flex-col gap-6 flex-1 py-2 min-w-[240px]">
            <div className="custom-flex-col gap-2 flex-1">
              {edit ? (
                <Input
                  id={`item-name-${index}`}
                  name={`item-name-${index}`}
                  label="Inventory name"
                  className="flex-1"
                  style={input_styles}
                  defaultValue={data?.name || data?.description || ""}
                />
              ) : (
                <InventoryField>
                  {data?.name || data?.description || "---"}
                </InventoryField>
              )}
            </div>
            <div className="flex gap-4">
              {edit ? (
                <>
                  <div className="flex justify-between max-w-[150px] px-2 items-center gap-2 border-2 border-text-disabled dark:border-[#3C3D37] rounded-md">
                    <input
                      type="number"
                      id={`quantity-${index}`}
                      name={`quantity-${index}`}
                      value={data?.quantity || data?.unit || count}
                      onChange={(e) => setCount(Number(e.target.value))}
                      className="w-2/3 px-2 py-2 border-transparent focus:outline-none"
                    />
                    <div className="btn flex flex-col items-end justify-end">
                      <CounterButton
                        onClick={handleIncrement}
                        icon="/icons/plus.svg"
                        alt="plus"
                      />
                      <CounterButton
                        onClick={handleDecrement}
                        icon="/icons/minus.svg"
                        alt="minus"
                      />
                    </div>
                  </div>
                  <Select
                    id={`condition-${index}`}
                    name={`condition-${index}`}
                    placeholder="Condition"
                    options={inventory_conditions}
                    className="flex-1"
                    isSearchable={false}
                    defaultValue={data?.condition}
                  />
                </>
              ) : (
                <>
                  <InventoryField>
                    {data?.unit || data?.quantity || "---"}
                  </InventoryField>
                  <InventoryField>{data?.condition || "---"}</InventoryField>
                </>
              )}
            </div>
          </div>
          <div className="relative h-full min-h-[165px] aspect-square rounded-2xl overflow-hidden">
            {/* Image Modal */}
            <PopupImageModal
              isOpen={screenModal}
              onClose={() => setScreenModal(false)}
              images={(edit && initialImages.length > 0 ? initialImages : images).map((image) => ({
                src: image,
              }))}
            />
            <div
              className="w-[220px] h-[220px] rounded-2xl relative overflow-hidden group cursor-pointer flex-shrink-0"
              style={{ backgroundColor: "rgba(0, 0, 0, 0.2)" }}
              role="button"
              onClick={() => setScreenModal(true)}
            >
              {(edit && initialImages.length > 0 ? initialImages : images).length > 0 && <Image
                  src={(edit && initialImages.length > 0 ? initialImages : images)[0] || data?.images[0] || ""}
                  alt={`Inventory Image ${index + 1}`}
                  fill
                  className="object-cover"
                />}
            </div>
            {edit && (
              <div
                className={`absolute inset-0 flex ${
                  images.length === 0
                    ? "items-center justify-center"
                    : "flex-col items-end justify-between mr-4 my-4"
                }`}
                style={{ backgroundColor: "rgba(0, 0, 0, 0.1)" }}
              >
                {edit && images.length > 0 && (
                  <div
                    className="bg-brand-1 rounded py-1 px-1.5 flex items-center gap-1.5 cursor-pointer"
                    onClick={() => setScreenModal(true)}
                  >
                    <CameraIcon />
                    <p className="text-black font-medium text-[10px] cursor-pointer">
                      +{images.length}
                    </p>
                  </div>
                )}
                <Modal
                  state={{ isOpen: openModal, setIsOpen: setOpenModal }}
                >
                  <ModalTrigger>
                    {images.length === 0 ? (
                      <div className="flex flex-col items-center gap-2 custom-primary-color">
                        <ImageIcon />
                        <p className="text-brand-9 text-sm font-semibold">
                          Add picture
                        </p>
                      </div>
                    ) : (
                      <div className="flex gap-2 justify-end items-end">
                        <div className="bg-brand-1 rounded py-1 px-1.5 flex items-center gap-1.5">
                          <EditPencilIcon size={10} />
                          <p className="text-black font-medium text-[10px]">
                            Manage
                          </p>
                        </div>
                      </div>
                    )}
                  </ModalTrigger>
                  <ModalContent>
                    <LandlordTenantModalPreset heading="Add Pictures">
                      <AddPictureModal
                        handleSave={handleSave}
                        handleDragEnd={handleDragEnd}
                        sortableImages={sortableImages}
                        removeImage={removeImage}
                        fileInputRef={fileInputRef}
                        handleFileChange={handleFileChange}
                        images={images}
                        index={index}
                      />
                    </LandlordTenantModalPreset>
                  </ModalContent>
                </Modal>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default InventoryItem;

const AddPictureModal = ({
  handleSave,
  handleDragEnd,
  sortableImages,
  removeImage,
  fileInputRef,
  handleFileChange,
  images,
  index,
  initialImages,
}: AddPictureModalProps) => {
  const maxNumberOfImages = 6;
  console.log("Images - ", initialImages);

  return (
    <div className="">
      <p className="mb-5 text-text-secondary dark:text-darkText-1 text-base font-normal">
        Set Inventory pictures for easy recognition (maximum of{" "}
        {maxNumberOfImages} images). Please drag your preferred image and place
        it in the first position to make it the primary display.
      </p>
      <DragDropContext onDragEnd={handleDragEnd}>
        <Droppable droppableId="property-images" direction="horizontal">
          {(provided, snapshot) => (
            <div
              ref={provided.innerRef}
              {...provided.droppableProps}
              className="flex gap-4 overflow-x-auto custom-round-scrollbar overflow-y-hidden pb-2"
            >
              {sortableImages.map((s) => (
                <DraggableImage
                  key={s.id}
                  id={s.id}
                  image={s.image}
                  index={s.index}
                  removeImage={removeImage}
                />
              ))}
              {provided.placeholder}
              {images.length < 6 && (
                <label
                  htmlFor="inventory_pictures"
                  className="flex-shrink-0 w-[285px] h-[155px] rounded-lg border-2 border-dashed border-[#626262] bg-white dark:bg-darkText-primary flex flex-col items-center justify-center cursor-pointer text-[#626262] dark:text-darkText-2"
                >
                  <PlusIcon />
                  <span className="text-black dark:text-white text-base font-normal mt-2">
                    Add Pictures
                  </span>
                  <input
                    id="inventory_pictures"
                    name={`image-${index}`}
                    type="file"
                    accept="image/*"
                    multiple
                    onChange={handleFileChange}
                    className="hidden"
                    ref={fileInputRef}
                  />
                </label>
              )}
            </div>
          )}
        </Droppable>
      </DragDropContext>
      <div className="flex justify-end mt-4">
        <Button onClick={handleSave}>Submit</Button>
      </div>
    </div>
  );
};



                {
                  /* <input
                  ref={fileInputRef}
                  type="file"
                  name={`image-${index}`}
                  accept="image/*"
                  onChange={handleFileChange}
                  className="hidden"
                  aria-label="Upload image"
                /> */
                }




                ===================== update inventory

                  const handleUpdateInventory = async (
  event: React.FormEvent<HTMLFormElement>
) => {
  event.preventDefault();
  setIsLoading(true);
  try {
    const formData = new FormData(event.currentTarget);
    const payload = {
      title: formData.get("inventory-title") as string,
      video: formData.get("video-link") as string,
      branch_id: formData.get("branch-name") as string,
      items: inventoryItems.map((item: any, index: number) => {
        const retainMedia = inventoryFiles[index]
          ? inventoryFiles[index].filter((file: any) => typeof file === "string")
            ? inventoryFiles[index.filter((file: any) => typeof file === "string")
          : [];
        const images = inventoryFiles[index]
          ? inventoryFiles[index].filter((file: any) => file instanceof File)
          : [];
        return {
          id: item.id || undefined,
          description: item.description,
          unit: item.unit,
          condition: item.condition,
          retain_media: retainMedia,
          images,
        };
      }),
    };

    // Convert payload for multipart/form-data
      // Convert payload for multipart/form-data if needed
      // Example:
    // const formPayload = new FormData();
    // formPayload.append("title", payload.title);
    // formPayload.append("video", payload.video);
    // formPayload.append("branch_id", payload.branch_id);

    // payload.items.forEach((item: any, itemIndex: number) => {
      // payload.items.forEach((item, itemIndex) => {
    //   formPayload.append(`items[${itemIndex}][description]`, item.description);
    //   formPayload.append(`items[${itemIndex}][unit]`, item.unit);
    //   formPayload.append(`items[${itemIndex}][condition]`, item.condition);
    //   // formPayload.append('_method', 'PUT')

    //   item.retain_media.forEach((media: any, mediaIndex: number) => {
      //   item.retain_media.forEach((media, mediaIndex) => {
    //     formPayload.append(
    //       `items[${itemIndex}][retain_media][${mediaIndex}]`,
    //       media
    //     );
    //   });

    //   item.images.forEach((image: any, imageIndex: number) => {
      //   item.images.forEach((image) => {
    //     formPayload.append(
    //       `items[${itemIndex}][images][${imageIndex}]`,
      //       `items[${itemIndex}][images[]`, // Notice the use of [] for multiple files
    //       image
    //     );
    //   });
    // });

    console.log("Payload for API:", payload);

    const success = await updateInventory(payload, inventoryId as string);

      if (success) {
        toast.success("Inventory updated successfully!");
        router.push(`/management/inventory/${inventoryId}`);
      }
  } catch (error) {
    console.error("Error updating inventory:", error);
    handleAxiosError(error);
  } finally {
    setIsLoading(false);
  }
};




+================ HANDLE UPDATE INVENTORY FUNCTION
const handleUpdateInventory = async (
  event: React.FormEvent<HTMLFormElement>
) => {
  event.preventDefault();
  setIsLoading(true);
  console.log("imagefiles= ", inventoryFiles);
  
  try {
    const formData = new FormData(event.currentTarget);
    const totalItems = inventoryItems.length + moreInventory;
    const allItems = [];

    // Process all items (both existing and new)
    for (let i = 0; i < totalItems; i++) {
      const description = formData.get(`item-name-${i}`);
      const unit = formData.get(`quantity-${i}`);
      const condition = formData.get(`condition-${i}`);
      const existingItem = inventoryItems[i];
      const imageFile = inventoryFiles[i] || []; // Get the image from inventoryFiles

      const retainMedia = imageFile.filter((file: any) => typeof file === "string");
      const images = imageFile.filter((file: any) => file instanceof File);

      console.log(`Form data for item ${i}:`, {
        description,
        unit,
        condition,
        imageFile,
      });

      allItems.push({
        id: existingItem?.id || undefined,
        description: description || "",
        unit: unit || "",
        condition: condition || "",
        retain_media: retainMedia,
        images,
      });
    }

    const payload = {
      title: formData.get("inventory-title") as string,
      video: formData.get("video-link") as string,
      branch_id: formData.get("branch-name") as string,
      items: allItems,
    };

    console.log("Payload for API:", payload);

    // const success = await updateInventory(payload, inventoryId as string);

    // if (success) {
    //   toast.success("Inventory updated successfully!");
    //   // router.push(`/management/inventory/${inventoryId}`);
    // }
  } catch (error) {
    console.error("Error updating inventory:", error);
    handleAxiosError(error);
  } finally {
    setIsLoading(false);
  }
};

==========select community
// "use client";
// import clsx from "clsx";
// import { useEffect, useRef, useState, useContext } from "react";
// import { DeleteIconX, ArrowDownIcon, SearchIcon } from "@/public/icons/icons";
// import { FlowProgressContext } from "@/components/FlowProgress/flow-progress";
// import { checkValidatonError } from "@/utils/validation";
// import { useOutsideClick } from "@/hooks/useOutsideClick";
// import { SelectOptionObject, SelectProps } from "../Form/Select/types";
// import Label from "../Form/Label/label";

// const Select: React.FC<SelectProps> = ({
//   id,
//   label,
//   defaultValue,
//   value: propValue,
//   required,
//   className,
//   options,
//   onChange,
//   inputTextClassName,
//   validationErrors = {},
//   placeholder = "Select options",
//   allowCustom = false,
//   isSearchable = true,
//   hiddenInputClassName,
//   inputContainerClassName,
//   dropdownRefClassName,
//   resetKey,
//   requiredNoStar,
//   disabled,
// }) => {
//   const { handleInputChange } = useContext(FlowProgressContext);
//   const inputRef = useRef<HTMLInputElement>(null);
//   const initialState: {
//     isOpen: boolean;
//     searchTerm: string;
//     filteredOptions: (string | SelectOptionObject)[];
//     selectedValue?: string | number;
//   } = {
//     isOpen: false,
//     searchTerm: "",
//     filteredOptions: options as (string | SelectOptionObject)[],
//     selectedValue: defaultValue as (string | undefined),
//   };
//   const [state, setState] = useState(initialState);
//   const { isOpen, searchTerm, filteredOptions, selectedValue } = state;
//   const dropdownRef = useRef<HTMLDivElement>(null);
//   const [showAbove, setShowAbove] = useState(false);

//   // State to store validation error message
//   const [validationError, setValidationError] = useState<string | null>(null);

//   const updateDropdownPosition = () => {
//     if (dropdownRef.current) {
//       const dropdownRect = dropdownRef.current.getBoundingClientRect();
//       const dropdownHeight = 240; // max-h-60 = 15rem = 240px
//       const windowHeight = window.innerHeight;
//       const bottomSpace = windowHeight - dropdownRect.bottom;
//       setShowAbove(bottomSpace < dropdownHeight);
//     }
//   };

//   const handleSelection = (option: string | number) => {
//     setState((x) => ({
//       ...x,
//       selectedValue: option,
//       searchTerm: "",
//       isOpen: false,
//     }));
//     onChange && onChange(`${option}`); // Call the onChange prop if provided
//   };

//   // Type guard to check if the options array is an array of objects
//   const isOptionObjectArray = (
//     options: string[] | SelectOptionObject[]
//   ): options is SelectOptionObject[] => {
//     return Array.isArray(options) && 
//            options.length > 0 && 
//            typeof options[0] === "object";
//   };

//   useOutsideClick(dropdownRef, () => {
//     setState((x) => ({ ...x, isOpen: false, searchTerm: "" }));
//   });

//   useEffect(() => {
//     updateDropdownPosition();
//     if (isOpen) {
//       inputRef.current?.focus();
//     }
//   }, [isOpen]);

//   // Filter options based on the search term
//   useEffect(() => {
//     setState((x) => {
//       // Safety check for empty options
//       if (!options?.length) {
//         return { ...x, filteredOptions: [] };
//       }

//       let filteredOptions: typeof options = [];
      
//       if (isOptionObjectArray(options as SelectOptionObject[])) {
//         filteredOptions = options.filter((o): o is SelectOptionObject => 
//           typeof o === 'object' && 'label' in o && // Type guard to check if o is an object with a label
//           o.label.toLowerCase().includes(searchTerm.toLowerCase())
//         );
//       } else {
//         filteredOptions = options.filter((o) =>
//           String(o).toLowerCase().includes(searchTerm.toLowerCase())
//         );
//       }

//       return { ...x, filteredOptions };
//     });
//   }, [searchTerm, options]);

//   // Initialize
//   useEffect(() => {
//     setState((x) => ({ ...x, selectedValue: propValue || defaultValue }));
//   }, [propValue, resetKey, defaultValue]);

//   useEffect(() => {
//     setValidationError(null);
//     handleInputChange && handleInputChange();
//   }, [selectedValue, handleInputChange]);

//   // Check and set validation error for this input when validationErrors or id changes
//   useEffect(() => {
//     setValidationError(
//       checkValidatonError({ errors: validationErrors, key: id })
//     );
//   }, [validationErrors, id]);

//   return (
//     <div
//       className={clsx(
//         "custom-flex-col gap-2",
//         {
//           "pointer-events-none opacity-50": disabled,
//         },
//         className
//       )}
//     >
//       {/* input for flow progress and holding the selected value for form submission */}
//       <input
//         name={id}
//         id={id}
//         type="hidden"
//         className={hiddenInputClassName}
//         value={selectedValue || ""}
//         required={required || requiredNoStar}
//         disabled={disabled}
//       />
//       {label && (
//         <Label id={id} required={required}>
//           {label}
//         </Label>
//       )}
//       <div className={clsx("relative", dropdownRefClassName)} ref={dropdownRef}>
//         {/* Trigger for the custom dropdown with embedded search field */}
//         <div
//           className={clsx(
//             "flex items-center dark:bg-darkText-primary border border-solid border-[#C1C2C366] hover:border-[#00000099] dark:hover:border-darkText-2 py-[11px] pr-3 rounded-lg custom-primary-outline transition-colors duration-300 ease-in-out",
//             selectedValue
//               ? "bg-neutral-2 dark:bg-darkText-primary"
//               : "cursor-pointer",
//             isSearchable ? "pl-10" : "pl-4",
//             inputContainerClassName
//           )}
//           onClick={() => {
//             if (!selectedValue && !disabled)
//               setState((x) => ({ ...x, isOpen: !x.isOpen }));
//           }}
//         >
//           {/* Conditionally render the search icon */}
//           {isSearchable && (
//             <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
//               <span className="dark:text-white">
//                 <SearchIcon />
//               </span>
//             </div>
//           )}
//           {/* Conditionally render input or selected value based on `isSearchable` */}
//           {selectedValue && !isOpen ? (
//             <span
//               className={clsx(
//                 "flex-1 capitalize text-text-disabled dark:bg-transparent text-xs md:text-sm font-normal",
//                 inputTextClassName
//               )}
//             >
//               {isOptionObjectArray(options as SelectOptionObject[])
//                 ? (options as SelectOptionObject[]).find((o) => o.value === selectedValue)?.label
//                 : selectedValue}
//             </span>
//           ) : isSearchable ? (
//             <input
//               ref={inputRef}
//               type="text"
//               className={clsx(
//                 "w-full flex-1 bg-transparent outline-none text-xs md:text-sm font-normal",
//                 inputTextClassName
//               )}
//               placeholder={placeholder}
//               value={searchTerm}
//               onInput={() => setValidationError(null)}
//               onChange={(e) => {
//                 setState((x) => ({
//                   ...x,
//                   searchTerm: e.target.value,
//                   isOpen: true,
//                 }));
//               }}
//               onClick={(e) => {
//                 setState((x) => ({ ...x, isOpen: true }));

//                 e.stopPropagation(); // Prevent dropdown from toggling
//               }}
//               autoFocus={isOpen} // Autofocus when opened
//             />
//           ) : (
//             <span
//               className={clsx(
//                 "flex-1 text-text-disabled text-xs md:text-sm font-normal",
//                 inputTextClassName
//               )}
//             >
//               {placeholder}
//             </span>
//           )}
//           <div className="ml-auto flex items-center justify-center">
//             {!selectedValue ? (
//               <div
//                 className={clsx(
//                   "transition-transform duration-300",
//                   isOpen && "rotate-180"
//                 )}
//               >
//                 <ArrowDownIcon />
//               </div>
//             ) : (
//               <button
//                 type="button"
//                 aria-label="Clear"
//                 onClick={(e) => {
//                   handleSelection("");
//                   e.stopPropagation();
//                 }}
//               >
//                 <DeleteIconX />
//               </button>
//             )}
//           </div>
//         </div>
//         {/* Options dropdown */}
//         {isOpen && (
//           <div
//             className={clsx(
//               "absolute z-10 w-full bg-white dark:bg-darkText-primary dark:border-darkText-1 border border-solid rounded-[8px] shadow-lg",
//               {
//                 "border-[0] my-0 shadow-[none]":
//                   !searchTerm && filteredOptions.length === 0,
//               },
//               showAbove ? "bottom-full mb-2" : "top-full mt-2"
//             )}
//           >
//             <div className="max-h-60 overflow-y-auto">
//               {filteredOptions.length > 0 ? (
//                 filteredOptions.map((option) => {
//                   const optionLabel =
//                     typeof option === "string" ? option : option.label;
//                   const optionValue =
//                     typeof option === "string" ? option : option.value;

//                   return (
//                     <div
//                       key={optionValue}
//                       className="p-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-darkText-2 capitalize"
//                       onClick={() => handleSelection(optionValue)}
//                     >
//                       {optionLabel}
//                     </div>
//                   );
//                 })
//               ) : searchTerm ? ( // Show "No match" only if there's a search term
//                 <div className="p-2 text-gray-500">
//                   <p>No match</p>
//                   {allowCustom && (
//                     <>
//                       <hr className="mb-[1px]" />
//                       <button
//                         type="button"
//                         onClick={() => handleSelection(searchTerm)}
//                         className="w-full hover:bg-gray-100 text-left"
//                       >
//                         Add {searchTerm}
//                       </button>
//                     </>
//                   )}
//                 </div>
//               ) : null}
//             </div>
//           </div>
//         )}
//       </div>
//       {/* Render validation error message if present */}
//       {validationError && (
//         <p className="text-sm text-red-500 font-medium">{validationError}</p>
//       )}
//     </div>
//   );
// };

// export default Select;










