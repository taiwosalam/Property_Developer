 const handleClickSend = async () => {
    if (activeStep === "send funds") {
      if (!description) {
        toast.warning("Please enter a description");
        return;
      }
      if (!(amount > 0)) {
        toast.warning("Please enter an amount");
        return;
      }
      if (branch && amount > Number(balance.my_balance)) {
        toast.warning("Insufficient balance");
        return;
      }
      setActiveStep("confirm pin");
    } else {
      if (pin.length !== 4) {
        toast.warning("Please enter your PIN");
        return;
      }
      setLoading(true);
      const action = branch
        ? branchFundWallet({ wallet_id, amount, pin, description })
        : transferFunds(wallet_id, amount, description, pin);
      const status = await action;
      if (status) {
        setIsOpen(false);
        if (!isAlreadyBeneficiary && saveAsBeneficiary && my_wallet_id) {
          await addBeneficiary(wallet_id, my_wallet_id, {
            noToast: true,
          });
        }
        window.dispatchEvent(new Event("refetch-wallet"));
      }
      setLoading(false);
    }
  };










 const handleUpdateProfile = async (data: Record<string, string>) => {
    const paylo
    ad = {
      name: data.fullname,
      title: data.personal_title,
      // estate_title: data.real_estate_title,
      // email: data.email,
      // phone_number: data.phone_number,
      // gender: data.gender,
    };
    // cleanPhoneNumber(payload);
    // if (!payload.phone_number) {
    //   payload.phone_number = "";
    // }

    try {
      setReqLoading(true);
      const status = await updateUserProfile(objectToFormData(payload));
      if (status) {
        setNext(true);
        window.dispatchEvent(new Event("fetch-profile"));
      }
    } catch (error) {
      toast.error("Error updating profile");
    } finally {
      setReqLoading(false);
      setNext(false);
    }
  };













    // const handleSubmit = async(data: Record<string, string>) => {
  //   if (isForgetPin) {
  //     setIsForgetPin(false); // Reset `isForgetPin`
  //     setIsOpen(true); 
  //     try{
  //       // const response = await 
  //       console.log("Goin to API", data)
  //     } catch (error) {
  //       console.error(error);
  //     }
  //   } else {
  //     setIsOpen(true); // Open the modal directly
  //     try{
  //       // const response = await 
  //       console.log("Goin to API", data)
  //     } catch (error) {
  //       console.error(error);
  //     }
  //   }
  // };




















  "use client";

import React, { useEffect, useRef, useState } from "react";

// Types
import type { DefaultSettingsModalProps } from "../types";

// Imports
import PinField from "react-pin-field";
import Button from "@/components/Form/Button/button";
import WalletModalPreset from "@/components/Wallet/wallet-modal-preset";
import Input from "@/components/Form/Input/input";
import { AuthForm } from "@/components/Auth/auth-components";
import { useWalletStore } from "@/store/wallet-store";
import { WalletDataResponse } from "@/app/(nav)/wallet/data";
import useFetch from "@/hooks/useFetch";
import { toast } from "sonner";
import { ForgetWalletPinPassword } from "@/app/(nav)/settings/profile/data";

const ForgetWalletModal: React.FC<DefaultSettingsModalProps> = ({
  changeStep,
}) => {
  const pinFieldRef = useRef<HTMLInputElement[] | null>(null);
  const [loading, setLoading] = useState(false)
  const setWalletStore = useWalletStore((s) => s.setWalletStore)
  const { data, error, refetch } =
  useFetch<WalletDataResponse>("/wallets/dashboard");
  
  const walletId = data?.balance.wallet_id;
  setWalletStore("walletId", walletId as string);

  useEffect(() => {
    if (pinFieldRef.current && pinFieldRef.current.length > 0) {
      pinFieldRef.current[0].focus();
    }
  }, []);

  const hanldeForgetPassword = async(data: Record<string, string>)=>{
    try{
      setLoading(true)
      const payload = {
        wallet_id: walletId as string,
        password: data.password
      }
      console.log("payload", payload)
      const res = await ForgetWalletPinPassword(payload);
      if(res){
        toast.success("Wallet pin changed successfully")
        changeStep(3);
      }
    } catch (err){
        toast.error("Failed to forget wallet password")
    } finally{
      setLoading(false)
    }
  }

  return (
    <WalletModalPreset
      title="Forget Wallet PIN"
      style={{ width: 390, borderRadius: 20 }}
    >
    <AuthForm onFormSubmit={hanldeForgetPassword} autoComplete="off">
      <div className="custom-flex-col gap-20">
        <div className="custom-flex-col gap-10">
          <p className="text-text-tertiary text-center text-sm font-medium">
          Please enter your password to proceed with resetting your wallet PIN securely. This ensures your account remains protected and only authorized changes are made.
          </p>
          <div className="flex gap-6 justify-center">
           <Input
            id="password"
            label="Enter Password"
            type="password"
            inputClassName="w-full"
            className="w-full"
           />
          </div>
        </div>
        <Button
          size="sm_medium"
          type="submit"
          className="py-2 px-8"
        >
          {loading ? "Please wait..." : "Proceed"}
        </Button>
      </div>
      </AuthForm>
    </WalletModalPreset>
  );
};

export default ForgetWalletModal;


















                {/* <Select
                  options={landlordOptions}
                  id="land_lord_id"
                  label="Landlord"
                  inputContainerClassName="bg-white"
                  resetKey={resetKey}
                  defaultValue={
                    editMode && propertyDetails?.land_lord_id
                      ? landlordOptions.find(
                          (landlord) => landlord.value === propertyDetails.land_lord_id
                        )
                      : undefined
                  }
                  hiddenInputClassName="property-form-input"
                  placeholder={
                    landlordsLoading
                      ? "Loading landlords..."
                      : landlordsError
                      ? "Error loading landlords"
                      : "Select landlord"
                  }
                  error={landlordsError}
                /> */}