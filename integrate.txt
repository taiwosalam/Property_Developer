// import { empty } from "@/app/config";
// import Image from "next/image";
// import React from "react";

// const DocumentPreview = () => {
//   return (
//     <div className="w-full">
//       <div className="flex flex-col items-center justify-center">
//         <h2 className="text-[64px] font-semibold"> TENANCY AGREEMENT </h2>
//         <h2 className="text-[28px] font-normal uppercase"> between </h2>
//         <p className="text-[40px] uppercase font-semibold">
//           Mr agunbiade david
//         </p>
//         <span className="text-sm capitalize">(landlord/landlady)</span>
//         <p className="text-[20px] text-base uppercase mt-6 mb-8"> and </p>
//         <p className="text-[40px] uppercase font-semibold">
//           Mr agunbiade david
//         </p>
//         <span className="text-sm capitalize">(Tenant)</span>
//       </div>
//       <div className="flex items-start justify-center mt-8">
//         <p className="uppercase text-center tracking-wide font-normal text-[20px]">
//           in respect of a two (2) bedroom bungalow in a compound with a 4 flats
//           of 3 bedroom situate at major salawu area, bodija ibadan
//         </p>
//       </div>

//       <div className="attorney flex justify-between mt-4">
//         <p className="text-[20px] uppercase font-normal">
//           Through his lawful Attorney
//         </p>
//         <p className="text-[20px] font-normal uppercase">
//           Mr. Agunbiade David of No 4, Salawu Area, Bodija, Ibadan
//         </p>
//       </div>

//       {/* ATTORNEY LOGO */}
//       <div className="flex items-start justify-between mt-10">
//         <i>Prepared by:</i>
//         <div className="wrapper">
//           <div className="logo w-[430px] h-[105px] bg-white shadow-md rounded-md">
//             <Image
//               alt="lawyer-logo"
//               src={`/empty/logo-placeholder.svg`}
//               width={100}
//               height={100}
//               className="w-full h-full object-contain"
//             />
//           </div>
//           <div className="flex flex-col items-center mt-4 gap-1">
//             <p className="uppercase font-normal text-[20px]">
//               {" "}
//               T. dayo oyewumi esd,{" "}
//             </p>
//             <p className="uppercase font-normal text-[20px]">
//               {" "}
//               wellspring law firm,{" "}
//             </p>
//             <p className="uppercase font-normal text-[20px]">
//               {" "}
//               a30/31, mokola estate,{" "}
//             </p>
//             <p className="uppercase font-normal text-[20px]">
//               {" "}
//               behind veterinary hospital,{" "}
//             </p>
//             <p className="uppercase font-normal text-[20px]">
//               {" "}
//               mokola, ibadan, oyo state,{" "}
//             </p>
//             <p className="lowercase font-normal text-[20px] underline">
//               {" "}
//               wellspringlawfirm@gmail.com{" "}
//             </p>
//             <p className="uppercase font-normal text-[20px]">
//               {" "}
//               081028347346/09024316261{" "}
//             </p>
//           </div>
//         </div>
//         <div className="seal custom-secondary-bg w-[100px] h-[100px] rounded-full">
//           <Image
//             alt="seal"
//             src={empty}
//             width={100}
//             height={100}
//             className="w-full h-full object-contain rounded-full"
//           />
//         </div>
//       </div>

//       {/* ATTEIST */}
//       <div className="flex flex-col items-start my-6">
//         <p>
//           <strong>THIS TENANCY AGREEMENT</strong> made this 24th day of
//           November, 2025
//         </p>
//         <p className="mt-4">
//           <span className="uppercase">BETWEEN ADEBAYO OLUSOJI OKELARIN </span>
//           <span>
//             of No.12, Kudeti Street, Off Adeniyi Jones Avenue, Ikeja Lagos
//             State. (hereinafter referred to as the “LANDLORD” which expression
//             shall where the context so admits includes his heirs
//             successors-in-title, representatives and assigns) of the one part.
//           </span>
//         </p>
//         <p className="uppercase my-4">AND</p>
//         <p className="">
//           <span>
//             ADEGBOYEGA IBUKUN
//             <span>
//               of No 4, Salawu Area, Bodija, Ibadan (hereinafter referred to as
//               the “TENANT” which expression shall where the context so admits
//               includes his heirs successors-in-title, representatives and
//               assigns) of the other part.
//             </span>
//           </span>
//         </p>
//       </div>

//       {/* <div className="counts">
//         <ol className="list-decimal">
//           <li>
//             <p className="uppercase font-bold">whereas</p>
//             <p>
//               The legal title to the Five (5) Bedroom Duplex Apartment and its
//               appurtenances being at Bodija Estate, New Bodija, Ibadan, Oyo
//               State inures in favor of and belongs to the Landlord.
//             </p>
//             <ol>
//               <li>
//                 The Tenant is desirous of renting the said premises for
//                 Short-let Services, Hospitality and Residential Purposes.
//               </li>
//               <li>
//                 At the request of tenant, the Landlord has agreed to let the
//                 Premises for the above Purposes on the terms herein set-out.
//               </li>
//               <li>
//                 The Premises which is the subject matter of this Agreement is
//                 free from all encumbrances.
//               </li>
//             </ol>
//           </li>
//         </ol>
//       </div> */}

//       <div className="counts">
//         {/* <!-- Main list with counter reset --> */}
//         <ol className="list-none pl-0" style={{ counterReset: "item" }}>
//           {/* <!-- First main item --> */}
//           <li
//             className="relative pl-8 mb-4"
//             style={{ counterIncrement: "item" }}
//           >
//             {/* <!-- First number display using ::before pseudo-element --> */}
//             <div className="absolute left-0 font-bold before:content-[counter(item)'.']"></div>
//             <p className="uppercase font-bold">whereas</p>
//             <p>
//               The legal title to the Five (5) Bedroom Duplex Apartment and its
//               appurtenances being at Bodija Estate, New Bodija, Ibadan, Oyo
//               State inures in favor of and belongs to the Landlord.
//             </p>

//             {/* <!-- Sublist with its own counter --> */}
//             <ol
//               className="list-none pl-4 mt-2"
//               style={{ counterReset: "subitem" }}
//             >
//               {/* <!-- First subitem --> */}
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 The Tenant is desirous of renting the said premises for
//                 Short-let Services, Hospitality and Residential Purposes.
//               </li>
//               {/* <!-- Second subitem --> */}
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 At the request of tenant, the Landlord has agreed to let the
//                 Premises for the above Purposes on the terms herein set-out.
//               </li>
//               {/* <!-- Third subitem --> */}
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 The Premises which is the subject matter of this Agreement is
//                 free from all encumbrances.
//               </li>
//             </ol>
//           </li>

//           {/* <!-- Second main item --> */}
//           <li
//             className="relative pl-8 mb-4"
//             style={{ counterIncrement: "item" }}
//           >
//             <div className="absolute left-0 font-bold before:content-[counter(item)'.']"></div>
//             <p className="uppercase font-bold">
//               NOW THIS AGREEMENT WITNESSES AS FOLLOWS
//             </p>

//             {/* <!-- Sublist for second item --> */}
//             <ol
//               className="list-none pl-4 mt-2"
//               style={{ counterReset: "subitem" }}
//             >
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 The Landlord hereby lets to the Tenant and the Tenant hereby
//                 accepts to let the <b>Five (5) Bedroom Duplex Apartment</b> and
//                 its appurtenances being
//                 <b>at Bodija Estate, New Bodija, Ibadan, Oyo State</b> paying
//                 the sum of <b>N10,000, 000.00 (Ten Million Naira)</b> only as
//                 Rent, the receipt of which the Landlord hereby acknowledges.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 The tenancy hereby created is for a term of 2 (Two) years
//                 certain and definite, commencing from the
//                 <b>
//                   27th day of February, 2025 and shall terminate on the 26th day
//                   of February 2027
//                 </b>
//               </li>
//             </ol>
//           </li>

//           {/* <!-- third main item --> */}
//           <li
//             className="relative pl-8 mb-4"
//             style={{ counterIncrement: "item" }}
//           >
//             <div className="absolute left-0 font-bold before:content-[counter(item)'.']"></div>
//             <p className="uppercase font-bold">
//               THE LANDLORD HEREBY CONVENANTS:
//             </p>

//             {/* <!-- Sublist for second item --> */}
//             <ol
//               className="list-none pl-4 mt-2"
//               style={{ counterReset: "subitem" }}
//             >
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 To keep the Premises structurally sound and suitable for
//                 <b> residential </b> purposes with the exteriors of the Premises
//                 and all fixtures thereto in good and tenantable condition.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 To provide Solar Energy for the tenant if she desires to consume
//                 same at her own expense.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 In the event of the Premises or any part thereof being damaged
//                 or destroyed not by the doing of the tenant but by fire,
//                 tornado, earthquake or act of god, the landlord shall reinstate
//                 same at his expense.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 That the Tenant having paid the rent, the Landlord hereby
//                 covenants to keep observing and performing the several covenants
//                 and stipulations herein on his part, and to grant the Tenant
//                 quiet enjoyment without any interruption by herself, her agents
//                 or persons lawfully claiming through or under her.
//               </li>
//             </ol>
//           </li>

//           {/* <!-- fourth main item --> */}
//           <li
//             className="relative pl-8 mb-4"
//             style={{ counterIncrement: "item" }}
//           >
//             <div className="absolute left-0 font-bold before:content-[counter(item)'.']"></div>
//             <p className="uppercase font-bold">THE TENANT HEREBY COVENANTS:</p>

//             {/* <!-- Sublist for second item --> */}
//             <ol
//               className="list-none pl-4 mt-2"
//               style={{ counterReset: "subitem" }}
//             >
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 To use the Premises for residential purposes only.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 To pay for water, waste, electricity and other bills in the
//                 Premises.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 To bear, pay and discharge all local administration rates
//                 imposed or charged upon the owner of the Premises as may be
//                 applicable to it.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 To neither Change nor alter the existing paintings on the walls
//                 of the entire property by either changing the colours or
//                 fixating wallpapers or any other permanent alterations of the
//                 aesthetics, he may however improve on same while maintaining the
//                 existing colours.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 To neither liter the compound with luggage, spare parts, shaven
//                 or any debris, whatsoever; to not dry clothes on the walls or
//                 rails; and to not tamper or cause any person to tamper with the
//                 wiring system, solar cables or plumbing system.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 To not attach any nails on the walls, pound on any floor other
//                 than the ground floor, smoke or burn any form of materials or
//                 even make fire within the premises.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 To pay a of{" "}
//                 <b>N500,000.00 (Five Hundred Thousand Naira) only </b> Caution
//                 fee, Refundable on the termination of tenancy, subject to the
//                 absence of any damage within the apartment.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 To not accommodate or harbor any visitor with patent Criminal
//                 Records or tendency and all reasonable suspicion must be
//                 promptly reported to the appropriate law enforcement agency.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 To keep the interior of the Premises and fixtures and fittings
//                 therein in good and tenantable condition, reasonable wear and
//                 tear or damage by fire (not willfully or negligently caused or
//                 act of God generally exempted).
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 Not to make or permit to be made any structural alterations or
//                 construction work within the Premises without the written
//                 consent of the Landlord sought for and obtained.
//               </li>
//               <li
//                 className="relative pl-8 mb-2"
//                 style={{ counterIncrement: "subitem" }}
//               >
//                 <div className="absolute left-0 before:content-[counter(item)'.'counter(subitem)]"></div>
//                 Not to use part or the entire Premises for any illegal purposes
//                 or illegal businesses whatsoever; to forbid any loud music,
//                 partying or any form of Nuisance whatsoever within the premises
//               </li>
//             </ol>
//           </li>
//         </ol>
//       </div>
//     </div>
//   );
// };

// export default DocumentPreview;















// "use client";
// import React, { useEffect, useState } from "react";

// // Imports
// import DocumentCheckbox from "@/components/Documents/DocumentCheckbox/document-checkbox";
// import useFetch from "@/hooks/useFetch";
// import { transformDocumenArticleResponse } from "./data";
// import { CheckboxOption, DocumentsAPIResponse } from "./types";
// import DOMPurify from "dompurify";
// import NetworkError from "../Error/NetworkError";
// import CheckBoxLoader from "../Loader/CheckBoxLoader";

// interface DocumentTenancyAgreementsProps {
//   id: number;
//   defaultOptions?: CheckboxOption[];
//   onOptionsChange?: (options: CheckboxOption[]) => void;
// }

// const DocumentTenancyAgreements: React.FC<DocumentTenancyAgreementsProps> = ({
//   id,
//   onOptionsChange,
//   defaultOptions,
// }) => {
//   const { data, loading, error, isNetworkError } =
//     useFetch<DocumentsAPIResponse>(`/property-document/documents/${id}`);
//   const [checkboxOptions, setCheckboxOptions] = useState<CheckboxOption[]>(defaultOptions);
//   const [selectedOptions, setSelectedOptions] = useState<CheckboxOption[]>([]);

//   console.log("def", id)
//   useEffect(() => {
//     if (data) {
//       const options = transformDocumenArticleResponse(data);
//       setCheckboxOptions(options);

//       if (onOptionsChange) {
//         onOptionsChange(options);
//       }
//     }
//   }, [data]);

//   // Whenever the selected options change, call onOptionsChange callback if provided.
//   useEffect(() => {
//     if (onOptionsChange) {
//       onOptionsChange(selectedOptions);
//     }
//   }, [selectedOptions, onOptionsChange]);

//   // Toggle the selected option when a DocumentCheckbox is clicked.
//   const handleOptionToggle = (option: CheckboxOption) => {
//     setSelectedOptions((prev) => {
//       const exists = prev.find((item) => item.value === option.value);
//       if (exists) {
//         return prev.filter((item) => item.value !== option.value);
//       } else {
//         return [...prev, option];
//       }
//     });
//   };

//   // console.log("checkboxOptions", checkboxOptions);

//   if (isNetworkError) return <NetworkError />;
//   if (error) return <div>{error}</div>;

//   return (
//     <div className="grid grid-cols-1 lg:grid-cols-2 gap-10">
//       {loading ? (
//         <CheckBoxLoader />
//       ) : (
//         checkboxOptions.map((option) => (
//           <DocumentCheckbox
//             onClick={() => handleOptionToggle(option)}
//             key={option.value}
//             title={option.title}
//           >
//             <div
//               dangerouslySetInnerHTML={{
//                 __html: DOMPurify.sanitize(option.description),
//               }}
//             />
//           </DocumentCheckbox>
//         ))
//       )}
//     </div>
//   );
// };

// export default DocumentTenancyAgreements;
















 const handleClickSend = async () => {
    if (activeStep === "send funds") {
      if (!description) {
        toast.warning("Please enter a description");
        return;
      }
      if (!(amount > 0)) {
        toast.warning("Please enter an amount");
        return;
      }
      if (branch && amount > Number(balance.my_balance)) {
        toast.warning("Insufficient balance");
        return;
      }
      setActiveStep("confirm pin");
    } else {
      if (pin.length !== 4) {
        toast.warning("Please enter your PIN");
        return;
      }
      setLoading(true);
      const action = branch
        ? branchFundWallet({ wallet_id, amount, pin, description })
        : transferFunds(wallet_id, amount, description, pin);
      const status = await action;
      if (status) {
        setIsOpen(false);
        if (!isAlreadyBeneficiary && saveAsBeneficiary && my_wallet_id) {
          await addBeneficiary(wallet_id, my_wallet_id, {
            noToast: true,
          });
        }
        window.dispatchEvent(new Event("refetch-wallet"));
      }
      setLoading(false);
    }
  };






  // const transformedLandlords = landlords.map((l) => ({
  //   ...l,
  //   full_name: (
  //     <p className="flex items-center whitespace-nowrap">
  //       <span>{l.name}</span>
  //       {l.badge_color && <BadgeIcon color={l.badge_color} />}
  //     </p>
  //   ),
  //   user_tag: <UserTag type={l.user_tag} />,
  //   "manage/chat": (
  //     <div className="flex gap-x-[4%] items-center w-full">
  //       <Button
  //         href={`/management/landlord/${l.id}/manage`}
  //         size="sm_medium"
  //         className="px-8 py-2 mx-auto"
  //       >
  //         Manage
  //       </Button>
  //       {l.user_tag === "mobile" && (
  //         <Button
  //           variant="sky_blue"
  //           size="sm_medium"
  //           className="px-8 py-2 bg-brand-tertiary bg-opacity-50 text-white mx-auto"
  //         // onClick={() => onClickChat(l)}
  //         >
  //           Chat
  //         </Button>
  //       )}
  //     </div>
  //   ),
  // }));




 const handleUpdateProfile = async (data: Record<string, string>) => {
    const paylo
    ad = {
      name: data.fullname,
      title: data.personal_title,
      // estate_title: data.real_estate_title,
      // email: data.email,
      // phone_number: data.phone_number,
      // gender: data.gender,
    };
    // cleanPhoneNumber(payload);
    // if (!payload.phone_number) {
    //   payload.phone_number = "";
    // }

    try {
      setReqLoading(true);
      const status = await updateUserProfile(objectToFormData(payload));
      if (status) {
        setNext(true);
        window.dispatchEvent(new Event("fetch-profile"));
      }
    } catch (error) {
      toast.error("Error updating profile");
    } finally {
      setReqLoading(false);
      setNext(false);
    }
  };















    // const handleSubmit = async(data: Record<string, string>) => {
  //   if (isForgetPin) {
  //     setIsForgetPin(false); // Reset `isForgetPin`
  //     setIsOpen(true); 
  //     try{
  //       // const response = await 
  //       console.log("Goin to API", data)
  //     } catch (error) {
  //       console.error(error);
  //     }
  //   } else {
  //     setIsOpen(true); // Open the modal directly
  //     try{
  //       // const response = await 
  //       console.log("Goin to API", data)
  //     } catch (error) {
  //       console.error(error);
  //     }
  //   }
  // };




















  "use client";

import React, { useEffect, useRef, useState } from "react";

// Types
import type { DefaultSettingsModalProps } from "../types";

// Imports
import PinField from "react-pin-field";
import Button from "@/components/Form/Button/button";
import WalletModalPreset from "@/components/Wallet/wallet-modal-preset";
import Input from "@/components/Form/Input/input";
import { AuthForm } from "@/components/Auth/auth-components";
import { useWalletStore } from "@/store/wallet-store";
import { WalletDataResponse } from "@/app/(nav)/wallet/data";
import useFetch from "@/hooks/useFetch";
import { toast } from "sonner";
import { ForgetWalletPinPassword } from "@/app/(nav)/settings/profile/data";

const ForgetWalletModal: React.FC<DefaultSettingsModalProps> = ({
  changeStep,
}) => {
  const pinFieldRef = useRef<HTMLInputElement[] | null>(null);
  const [loading, setLoading] = useState(false)
  const setWalletStore = useWalletStore((s) => s.setWalletStore)
  const { data, error, refetch } =
  useFetch<WalletDataResponse>("/wallets/dashboard");
  
  const walletId = data?.balance.wallet_id;
  setWalletStore("walletId", walletId as string);

  useEffect(() => {
    if (pinFieldRef.current && pinFieldRef.current.length > 0) {
      pinFieldRef.current[0].focus();
    }
  }, []);

  const hanldeForgetPassword = async(data: Record<string, string>)=>{
    try{
      setLoading(true)
      const payload = {
        wallet_id: walletId as string,
        password: data.password
      }
      console.log("payload", payload)
      const res = await ForgetWalletPinPassword(payload);
      if(res){
        toast.success("Wallet pin changed successfully")
        changeStep(3);
      }
    } catch (err){
        toast.error("Failed to forget wallet password")
    } finally{
      setLoading(false)
    }
  }

  return (
    <WalletModalPreset
      title="Forget Wallet PIN"
      style={{ width: 390, borderRadius: 20 }}
    >
    <AuthForm onFormSubmit={hanldeForgetPassword} autoComplete="off">
      <div className="custom-flex-col gap-20">
        <div className="custom-flex-col gap-10">
          <p className="text-text-tertiary text-center text-sm font-medium">
          Please enter your password to proceed with resetting your wallet PIN securely. This ensures your account remains protected and only authorized changes are made.
          </p>
          <div className="flex gap-6 justify-center">
           <Input
            id="password"
            label="Enter Password"
            type="password"
            inputClassName="w-full"
            className="w-full"
           />
          </div>
        </div>
        <Button
          size="sm_medium"
          type="submit"
          className="py-2 px-8"
        >
          {loading ? "Please wait..." : "Proceed"}
        </Button>
      </div>
      </AuthForm>
    </WalletModalPreset>
  );
};

export default ForgetWalletModal;


















                {/* <Select
                  options={landlordOptions}
                  id="land_lord_id"
                  label="Landlord"
                  inputContainerClassName="bg-white"
                  resetKey={resetKey}
                  defaultValue={
                    editMode && propertyDetails?.land_lord_id
                      ? landlordOptions.find(
                          (landlord) => landlord.value === propertyDetails.land_lord_id
                        )
                      : undefined
                  }
                  hiddenInputClassName="property-form-input"
                  placeholder={
                    landlordsLoading
                      ? "Loading landlords..."
                      : landlordsError
                      ? "Error loading landlords"
                      : "Select landlord"
                  }
                  error={landlordsError}
                /> */}




=================FILTER MODAL ==================
import { useState } from "react";
import { ModalTrigger } from "@/components/Modal/modal";
import { ChevronRight, ChevronLeft } from "lucide-react";
import DateInput from "@/components/Form/DateInput/date-input";
import dayjs, { Dayjs } from "dayjs";
import Button from "@/components/Form/Button/button";
import { FilterModalProps, FilterOptionMenu } from "./types";
import { CancelIcon, CheckboxCheckedIcon } from "@/public/icons/icons";
import { useModal } from "@/components/Modal/modal";
import Checkbox from "@/components/Form/Checkbox/checkbox";

const FilterModal: React.FC<FilterModalProps> = ({
  filterOptions,
  filterOptionsMenu,
  handleFilterApply,
  filterTitle = "Filters by",
  isDateTrue,
  dateLabel = "Date",
  appliedFilters,
}) => {
  const { setIsOpen } = useModal();
  const isRadio =
    typeof filterOptions === "object" &&
    !Array.isArray(filterOptions) &&
    filterOptions.radio;

  const [selectedStartDate, setSelectedStartDate] = useState<string | null>(
    appliedFilters?.startDate || null
  );
  const [selectedEndDate, setSelectedEndDate] = useState<string | null>(
    appliedFilters?.endDate || null
  );

  const handleDateChange = (type: "start" | "end", date?: Dayjs | null) => {
    if (type === "start") {
      setSelectedStartDate(date && date.isValid() ? date.toISOString() : null);
    } else if (type === "end") {
      setSelectedEndDate(date && date.isValid() ? date.toISOString() : null);
    }
  };

  // Apply filters and close modal
  const handleApplyFilter = () => {
    const selectedOptions = [...selectedFilters];
    const selectedMenuOptions = { ...selectedFilterMenus };
    const filtersToApply = {
      options: selectedOptions,
      menuOptions: selectedMenuOptions,
      startDate: selectedStartDate,
      endDate: selectedEndDate,
    };
    handleFilterApply(filtersToApply);
    setIsOpen(false);
  };

  const [searchQuery, setSearchQuery] = useState("");
  const [selectedFilters, setSelectedFilters] = useState<string[]>(() => {
    if (appliedFilters?.options) return appliedFilters.options;
    
    // Find radio group with default checked option
    const defaultRadioValue = filterOptionsMenu?.find(menu => menu.radio)
      ?.value.find(option => option.isChecked)?.value;
    
    if (defaultRadioValue) {
      return [String(defaultRadioValue)];
    }
    
    return [];
  });
  const [selectedFilterMenus, setSelectedFilterMenus] = useState<Record<string, string[]>>(() => {
    if (appliedFilters?.menuOptions) return appliedFilters.menuOptions;
    
    // Initialize radio groups with default values
    const initialMenus: Record<string, string[]> = {};
    filterOptionsMenu?.forEach(menu => {
      if (menu.radio) {
        const defaultValue = menu.value.find(option => option.isChecked)?.value;
        if (defaultValue) {
          initialMenus[menu.label] = [String(defaultValue)];
        }
      }
    });
    
    return initialMenus;
  });
  const [view, setView] = useState<"default" | "date" | "menu">("default");
  const commonCheckboxClasses =
    "flex-row-reverse w-full justify-between bg-[#F5F5F5] dark:bg-[#3C3D37] py-2 px-4 capitalize";
  const commonLabelClasses =
    "text-text-secondary dark:text-darkText-1 font-medium flex items-center justify-between py-2 px-4 bg-[#F5F5F5] dark:bg-[#3C3D37] capitalize cursor-pointer";
  const [activeOptionMenu, setActiveOptionMenu] =
    useState<FilterOptionMenu | null>(null);

  const handleOptionMenuClick = (option: FilterOptionMenu) => {
    setSearchQuery("");
    setActiveOptionMenu(option);
    setView("menu");
  };

  const handleOptionClick = (value: string) => {
    setSelectedFilters((prev) =>
      prev.includes(value) ? prev.filter((x) => x !== value) : [...prev, value]
    );
  };

  const handleOptionMenuItemClick = (
    menuLabel: string,
    value: string,
    isRadio?: boolean
  ) => {
    setSelectedFilterMenus((prev) => {
      const currentSelections = prev[menuLabel] || [];
      if (isRadio) {
        return {
          ...prev,
          [menuLabel]: currentSelections.includes(value) ? [] : [value],
        };
      } else {
        const newSelections = currentSelections.includes(value)
          ? currentSelections.filter((v) => v !== value)
          : [...currentSelections, value];
        return { ...prev, [menuLabel]: newSelections };
      }
    });
  };

  const filteredOptions = activeOptionMenu?.value.filter((option) =>
    option.label.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="w-[400px] max-h-[90vh] overflow-y-auto rounded-[20px] bg-white dark:bg-darkText-primary p-[20px] custom-flex-col">
      <div className="flex items-center justify-between border-b border-solid border-gray-300 ">
        <div className="flex items-center gap-1">
          {view !== "default" && (
            <button
              onClick={() => {
                setView("default");
                setActiveOptionMenu(null);
              }}
            >
              <ChevronLeft />
            </button>
          )}
          <h2 className="text-lg font-bold text-primary-navy dark:text-white">
            {view === "default"
              ? filterTitle
              : view === "date"
                ? dateLabel
                : activeOptionMenu?.label}
          </h2>
        </div>
        {view === "default" && (
          <ModalTrigger close className="p-2">
            <CancelIcon />
          </ModalTrigger>
        )}
      </div>
      <div className="space-y-2 my-4">
        {view === "default" ? (
          <>
            {isDateTrue && (
              <div
                role="button"
                className={commonLabelClasses}
                onClick={() => setView("date")}
              >
                <span>{dateLabel}</span>
                {selectedStartDate || selectedEndDate ? (
                  <CheckboxCheckedIcon />
                ) : (
                  <ChevronRight className="text-[#344054]" />
                )}
              </div>
            )}
            {filterOptionsMenu?.map((option, i) => (
              <div
                key={i}
                role="button"
                className={commonLabelClasses}
                onClick={() => handleOptionMenuClick(option)}
              >
                <span>{option.label}</span>
                {selectedFilterMenus[option.label] &&
                  selectedFilterMenus[option.label].length > 0 ? (
                  <CheckboxCheckedIcon />
                ) : (
                  <ChevronRight className="text-[#344054]" />
                )}
                {option.isChecked && (
                  <Checkbox
                    checked={selectedFilters.includes(String(option.value)) || option.isChecked}
                    onChange={() => handleOptionClick(String(option.value))}
                  />
                )}
              </div>
            ))}
            {!isRadio &&
              Array.isArray(filterOptions) &&
              filterOptions.map((option, i) => (
                <Checkbox
                  key={i}
                  className={commonCheckboxClasses}
                  checked={selectedFilters.includes(option.value)}
                  onChange={() => handleOptionClick(option.value)}
                >
                  {option.label}
                </Checkbox>
              ))}
            {isRadio &&
              Array.isArray(filterOptions?.value) &&
              filterOptions.value.map((option, i) => (
                <Checkbox 
                  key={i}
                  radio={true}
                  className={commonCheckboxClasses}
                  checked={selectedFilters.includes(option.value)}
                  onChange={() => {
                    setSelectedFilters([option.value]);
                  }}
                >
                  {option.label}
                </Checkbox>
              ))}
           </>
        ) : view === "date" ? (
          <>
            <DateInput
              label="From"
              id="date_from"
              value={selectedStartDate ? dayjs(selectedStartDate) : undefined}
              onChange={(date) => handleDateChange("start", date)}
              disableFuture
            />
            <DateInput
              label="To"
              id="date_to"
              value={selectedEndDate ? dayjs(selectedEndDate) : undefined}
              onChange={(date) => handleDateChange("end", date)}
              disableFuture
            />
          </>
        ) : (
          <>
            <input
              type="text"
              className="w-full border p-2"
              placeholder="Search"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
            <div className="max-h-[200px] overflow-y-auto pr-1 custom-round-scrollbar space-y-2 my-2">
              {filteredOptions?.map((option, i) => (
                <Checkbox
                  key={i}
                  radio={activeOptionMenu?.radio}
                  className={commonCheckboxClasses}
                  checked={selectedFilterMenus[
                    activeOptionMenu!.label
                  ]?.includes(option.value)}
                  onChange={() =>
                    handleOptionMenuItemClick(
                      activeOptionMenu!.label,
                      option.value,
                      activeOptionMenu!.radio
                    )
                  }
                >
                  {option.label}
                </Checkbox>
              ))}
            </div>
          </>
        )}
      </div>
      <Button
        className="w-full py-2 rounded-lg mt-4"
        size="base_medium"
        onClick={() => {
          if (view === "default") {
            handleApplyFilter();
          } else {
            setView("default");
          }
        }}
      >
        {view === "default" ? "Apply Filters" : "OK"}
      </Button>
    </div>
  );
};

export default FilterModal;















// Login function
export const login = async (formData: Record<string, any>) => {
  try {
    const { data } = await axios.post<LoginResponse>(
      `${base_url}login`,
      formData
    );
    useAuthStore.getState().reset();
    const token = data.access_token;
    const email = data.data.details?.email || formData.email;
    const emailVerified = data.data.details.email_verification;
    const role = data.data.details.role[0];
    // console.log('res', data);
    const additional_details = data.additional_details;
    const details = {
      branch: {
        branch_id: additional_details.branch?.id || null,
        picture: additional_details.branch?.picture || null,
      },
      company: {
        company_id: additional_details.id || null,
        company_logo: additional_details.company_logo || null,
      },
    };

    // SAVE TO ZUSTAND
    useAuthStore.getState().setAuthState('token', token);
    useAuthStore.getState().setAuthState('email', email);
    useAuthStore.getState().setAuthState('role', role);
    useAuthStore.getState().setAuthState('additional_details', details);

    // SECURE ROLE
    await saveRoleToCookie(role);
    await saveClientRoleToCookie(role);
    if (emailVerified) {
      toast.success(data?.message || 'Login successful!');
      if (role === 'user') {
        return 'redirect to setup';
      } else {
        useWalletStore
          .getState()
          .setWalletStore('walletPinStatus', data.wallet_pin_status);
        useWalletStore.getState().setWalletStore('walletId', data.wallet_id);
        return 'redirect to dashboard';
      }
    }
    if (!emailVerified) {
      useAuthStore.getState().setAuthState('emailVerified', false);
      toast.warning('Please verify your email to continue');
      return 'redirect to verify email';
    }
  } catch (error) {
    handleAxiosError(error, 'Login failed. Please try again.');
  }
};


















============SETTITNGS SIGNATURE

"use client";

import React, { useEffect, useState } from "react";

// Images
import { Check } from "lucide-react";
import DangerIcon from "@/public/icons/danger.svg";
import ImageBlue from "@/public/icons/image-blue.svg";
import SignatureImage from "@/public/accounting/signature.svg";

// Imports
import { industryOptions, titles } from "@/data";
import Input from "@/components/Form/Input/input";
import Picture from "@/components/Picture/picture";
import Select from "@/components/Form/Select/select";
import { useImageUploader } from "@/hooks/useImageUploader";
import SettingsSection from "@/components/Settings/settings-section";

import {
  SettingsSectionTitle,
  SettingsUpdateButton,
} from "@/components/Settings/settings-components";
import { usePersonalInfoStore } from "@/store/personal-info-store";
import { toast } from "sonner";
import { AuthForm } from "@/components/Auth/auth-components";
import { createSignatureProfiles, FormState } from "@/app/(nav)/settings/security/data";
import useFetch from "@/hooks/useFetch";
import useRefetchOnEvent from "@/hooks/useRefetchOnEvent";
import { transformSignature } from "@/app/(nav)/settings/data";

// /company-signatures
interface SignaturePageData {
  name: string;
  professional_title: string;
  signature_image: string;
  title: string;
}[]

const SettingsSignature = () => {
  const [state, setState] = useState<SignaturePageData[]>([]);
  const { preview, inputFileRef, handleImageChange } = useImageUploader();
  const {
    data: apiData,
    loading,
    silentLoading,
    isNetworkError,
    error,
    refetch,
  } = useFetch<any>("/company-signatures");
  useRefetchOnEvent("refetchSignatures", () => refetch({ silent: true }));

  // useEffect(() => {
  //   if (apiData) {
  //     setState(transformSignature(apiData));
  //   }
  // }, [apiData]);

  useEffect(() => {
    // Assuming apiData is defined somewhere in your component
    if (apiData) {
        const transformedData = transformSignature(apiData);
        setState(transformedData);

        // Update inputFields based on new state
        setInputFields(transformedData.length > 0 ? transformedData.map(signature => ({
            id: Date.now(), // Generate unique IDs
            signature: signature.signature_image,
            signatureFile: new File([], ""), // Create File only on the client
        })) : [{
            id: Date.now(),
            signature: 'Default Signature Image', // Replace with actual default if needed
            signatureFile: new File([], ""),
        }]);
    }
}, [apiData]);

  console.log("signature", state)

  // const [inputFields, setInputFields] = useState(() => {
  //   if (typeof window !== "undefined") {
  //     return [
  //       {
  //         id: Date.now(),
  //         signature: SignatureImage,
  //         signatureFile: new File([], ""), // Create File only on the client
  //       },
  //     ];
  //   }
  //   return [];
  // });

  const [inputFields, setInputFields] = useState(() => {
    if (typeof window !== "undefined") {
        // Check if state is empty and use default values if so
        if (state.length > 0) {
            return state.map(signature => ({
                id: Date.now(), // You might want to generate unique IDs differently
                signature: signature.signature_image,
                signatureFile: new File([], ""), // Create File only on the client
                name: signature.name,
                title: signature.title,
                professional_title: signature.professional_title
            }));
        } else {
            return [
                {
                    id: Date.now(),
                    signature: SignatureImage, // Replace with actual default if needed
                    signatureFile: new File([], ""), // Create File only on the client
                },
            ];
        }
    }
    return [];
});


  const [reqLoading, setReqLoading] = useState(false);
  const [next, setNext] = useState(false);
  const changeImage = () => {
    inputFileRef.current?.click();
  };

  const addInputField = () => {
    setInputFields([
      ...inputFields,
      { id: Date.now(), signature: SignatureImage, signatureFile: new File([], "") },
    ]);
  };

  const removeInputField = (id: number) => {
    const updatedFields = inputFields.filter((field) => field.id !== id);
    setInputFields(updatedFields);
    console.log("Input Fields after removing:", updatedFields);
  };

  const changeSignatureImage = (index: number) => {
    document.getElementById(`signature_input_${index}`)?.click();
  };

  const handleSignatureChange =
    (index: number) => (e: React.ChangeEvent<HTMLInputElement>) => {
      if (typeof window === "undefined" || !e.target.files || !e.target.files[0]) {
        return;
      }
      if (e.target.files && e.target.files[0]) {
        const newSignature = URL.createObjectURL(e.target.files[0]);
        const newFile = e.target.files[0];
        setInputFields(
          inputFields.map((inputField) =>
            inputField.id === inputFields[index].id
              ? { ...inputField, signature: newSignature, signatureFile: newFile }
              : inputField
          )
        );
      }
    };

  const hanleCreateSignature = async (data: FormData) => {
    const formData = new FormData();

    inputFields.forEach((field, index) => {
      formData.append(`name[${index}]`, data.get(`fullname_${index}`) as string);
      formData.append(`title[${index}]`, data.get(`personal_title_qualification_${index}`) as string);
      formData.append(`professional_title[${index}]`, data.get(`real_estate_title_${index}`) as string);
      formData.append(`signature[${index}]`, field.signatureFile); // Binary file
    });

    console.log("Payload:", Object.fromEntries(formData));

    try {
      setReqLoading(true);
      const res = await createSignatureProfiles(formData);
      if (res) {
        toast.success("Signature created successfully");
        setNext(true);
        window.dispatchEvent(new Event("fetch-profile"));
      }
    } catch (error) {
      toast.error("Error creating signature");
    } finally {
      setReqLoading(false);
    }
  };

  return (
    <SettingsSection title="Authorized Signature">
      <AuthForm onFormSubmit={hanleCreateSignature} returnType="form-data">
        <div className="custom-flex-col gap-8">
          <div className="custom-flex-col gap-6">
            <SettingsSectionTitle
              title=""
              desc="This signature is affixed to every document requiring authorization. Please sign on a plain white paper and take a photo for uploading. If possible, remove the background picture of the signature before uploading for a cleaner appearance."
            />
            <div className="custom-flex-col gap-[18px]">
              <div className="flex flex-col gap-5">
                {inputFields.map((field, index) => (
                  <React.Fragment key={field.id}>
                    <div className="relative max-w-[100px] rounded-lg overflow-hidden bg-[#F7F7F7] group cursor-pointer">
                      <Picture
                        size={100}
                        fit="contain"
                        src={field.signature}
                        alt="official signature"
                      />
                      <div
                        style={{ backgroundColor: "rgba(0, 0, 0, 0.20)" }}
                        className="absolute inset-0 flex flex-col gap-2 items-center justify-center opacity-0 group-hover:opacity-100 duration-300"
                      >
                        <Picture src={ImageBlue} alt="image icon" size={20} />
                        <p
                          className="text-brand-9 text-xs font-normal"
                          onClick={() => changeSignatureImage(index)}
                        >
                          Change Image
                        </p>
                      </div>
                      <input
                        type="file"
                        id={`signature_input_${index}`}
                        name={`signature_${index}`}
                        accept="image/*"
                        onChange={handleSignatureChange(index)}
                        className="hidden"
                        ref={React.createRef()}
                      />
                    </div>
                    <div className="flex flex-col md:flex-row gap-5 justify-start md:justify-end md:items-end items-start">
                      <div className="flex-1">
                        <Select
                          id={`personal_title_qualification_${index}`}
                          options={titles}
                          defaultValue={state[index]?.title}
                          label="personal title / qualification"
                          inputContainerClassName="w-full bg-neutral-2"
                        />
                      </div>
                      <div className="flex-1">
                        <Input
                          id={`fullname_${index}`}
                          label="full name"
                          placeholder="Write Here"
                          className="w-full"
                          defaultValue={state[index]?.name}
                        />
                      </div>
                      <div className="flex flex-col sm:flex-row gap-3 items-end">
                        <Select
                          id={`real_estate_title_${index}`}
                          options={industryOptions}
                          defaultValue={state[index]?.professional_title}
                          label="real estate title"
                          inputContainerClassName="w-full bg-neutral-2"
                        />
                        {index !== 0 && (
                          <button
                            className="bg-brand-9 min-w-[50px] text-white text-xs font-normal py-2 px-3 rounded-lg max-h-[40px]"
                            onClick={() => removeInputField(field.id)}
                          >
                            Remove
                          </button>
                        )}
                      </div>
                    </div>
                  </React.Fragment>
                ))}
                <div className="flex items-end">
                  <button
                    className="text-xs font-normal py-2 px-3 w-full sm:w-auto text-brand-9 bg-white"
                    onClick={addInputField}
                    type="button"
                  >
                    Add More
                  </button>
                </div>
              </div>
            </div>
          </div>
          <SettingsUpdateButton
            submit
            action={hanleCreateSignature as any}
            loading={reqLoading}
            next={next}
          />
        </div>
      </AuthForm>
    </SettingsSection>
  )
}

export default SettingsSignature























==================

"use client";

import React, { useEffect, useState } from "react";

// Images
import { Check } from "lucide-react";
import DangerIcon from "@/public/icons/danger.svg";
import ImageBlue from "@/public/icons/image-blue.svg";
import SignatureImage from "@/public/accounting/signature.svg";

// Imports
import { industryOptions, titles } from "@/data";
import Input from "@/components/Form/Input/input";
import Picture from "@/components/Picture/picture";
import Select from "@/components/Form/Select/select";
import { useImageUploader } from "@/hooks/useImageUploader";
import SettingsSection from "@/components/Settings/settings-section";

import {
  SettingsSectionTitle,
  SettingsUpdateButton,
} from "@/components/Settings/settings-components";
import { usePersonalInfoStore } from "@/store/personal-info-store";
import { toast } from "sonner";
import { AuthForm } from "@/components/Auth/auth-components";
import { createSignatureProfiles, FormState } from "@/app/(nav)/settings/security/data";
import useFetch from "@/hooks/useFetch";
import useRefetchOnEvent from "@/hooks/useRefetchOnEvent";
import { SignaturePageData, transformSignature } from "@/app/(nav)/settings/data";

const SettingsSignature = () => {
  const [state, setState] = useState<SignaturePageData[]>([]);
  const { preview, inputFileRef, handleImageChange } = useImageUploader();
  const {
    data: apiData,
    loading,
    silentLoading,
    isNetworkError,
    error,
    refetch,
  } = useFetch<any>("/company-signatures");
  useRefetchOnEvent("refetchSignatures", () => refetch({ silent: true }));

  useEffect(() => {
    if (apiData) {
      setState(transformSignature(apiData));
    }
  }, [apiData]);

  console.log("signature", state)

  const [inputFields, setInputFields] = useState(() => {
    if (typeof window !== "undefined") {
      return [
        {
          id: Date.now(),
          signature: SignatureImage,
          signatureFile: new File([], ""), // Create File only on the client
        },
      ];
    }
    return [];
  });

  const [reqLoading, setReqLoading] = useState(false);
  const [next, setNext] = useState(false);
  const changeImage = () => {
    inputFileRef.current?.click();
  };

  const addInputField = () => {
    setInputFields([
      ...inputFields,
      { id: Date.now(), signature: SignatureImage, signatureFile: new File([], "") },
    ]);
  };

  const removeInputField = (id: number) => {
    const updatedFields = inputFields.filter((field) => field.id !== id);
    setInputFields(updatedFields);
    console.log("Input Fields after removing:", updatedFields);
  };

  const changeSignatureImage = (index: number) => {
    document.getElementById(`signature_input_${index}`)?.click();
  };

  const handleSignatureChange =
    (index: number) => (e: React.ChangeEvent<HTMLInputElement>) => {
      if (typeof window === "undefined" || !e.target.files || !e.target.files[0]) {
        return;
      }
      if (e.target.files && e.target.files[0]) {
        const newSignature = URL.createObjectURL(e.target.files[0]);
        const newFile = e.target.files[0];
        setInputFields(
          inputFields.map((inputField) =>
            inputField.id === inputFields[index].id
              ? { ...inputField, signature: newSignature, signatureFile: newFile }
              : inputField
          )
        );
      }
    };

  const hanleCreateSignature = async (data: FormData) => {
    const formData = new FormData();

    inputFields.forEach((field, index) => {
      formData.append(`name[${index}]`, data.get(`fullname_${index}`) as string);
      formData.append(`title[${index}]`, data.get(`personal_title_qualification_${index}`) as string);
      formData.append(`professional_title[${index}]`, data.get(`real_estate_title_${index}`) as string);
      formData.append(`signature[${index}]`, field.signatureFile); // Binary file
    });

    console.log("Payload:", Object.fromEntries(formData));

    try {
      setReqLoading(true);
      const res = await createSignatureProfiles(formData);
      if (res) {
        toast.success("Signature created successfully");
        setNext(true);
        window.dispatchEvent(new Event("fetch-profile"));
      }
    } catch (error) {
      toast.error("Error creating signature");
    } finally {
      setReqLoading(false);
    }
  };

  return (
    <SettingsSection title="Authorized Signature">
      <AuthForm onFormSubmit={hanleCreateSignature} returnType="form-data">
        <div className="custom-flex-col gap-8">
          <div className="custom-flex-col gap-6">
            <SettingsSectionTitle
              title=""
              desc="This signature is affixed to every document requiring authorization. Please sign on a plain white paper and take a photo for uploading. If possible, remove the background picture of the signature before uploading for a cleaner appearance."
            />
            <div className="custom-flex-col gap-[18px]">
              <div className="flex flex-col gap-5">
                {state.length > 0 &&
                  state.map((s, index) => (
                    <React.Fragment key={s.id}>
                      <div className="relative max-w-[100px] rounded-lg overflow-hidden bg-[#F7F7F7] group cursor-pointer">
                        <Picture
                          size={100}
                          fit="contain"
                          src={s.signature_image}
                          alt="official signature"
                        />
                      </div>
                      <div className="flex flex-col md:flex-row gap-5 justify-start md:justify-end md:items-end items-start">
                        <div className="flex-1">
                          <Select
                            id={`personal_title_qualification_${index}`}
                            options={titles}
                            defaultValue={s.title}
                            label="personal title / qualification"
                            inputContainerClassName="w-full bg-neutral-2"
                          />
                        </div>
                        <div className="flex-1">
                          <Input
                            id={`fullname_${index}`}
                            label="full name"
                            placeholder="Write Here"
                            className="w-full"
                            defaultValue={s.name}
                            disabled
                          />
                        </div>
                        <div className="flex flex-col sm:flex-row gap-3 items-end">
                          <Select
                            id={`real_estate_title_${index}`}
                            options={industryOptions}
                            defaultValue={s.professional_title}
                            label="real estate title"
                            disabled
                            inputContainerClassName="w-full bg-neutral-2"
                          />
                          <button
                            type="button"
                            className="bg-brand-9 min-w-[50px] text-white text-xs font-normal py-2 px-3 rounded-lg max-h-[40px]"
                          // onClick={() => removeInputField(field.id)}
                          >
                            delete
                          </button>
                        </div>
                      </div>
                    </React.Fragment>
                  ))}
              </div>
             {state.length <= 5 && <div className="flex flex-col gap-5">
                {inputFields.map((field, index) => (
                  <React.Fragment key={field.id}>
                    <div className="relative max-w-[100px] rounded-lg overflow-hidden bg-[#F7F7F7] group cursor-pointer">
                      <Picture
                        size={100}
                        fit="contain"
                        src={field.signature}
                        alt="official signature"
                      />
                      <div
                        style={{ backgroundColor: "rgba(0, 0, 0, 0.20)" }}
                        className="absolute inset-0 flex flex-col gap-2 items-center justify-center opacity-0 group-hover:opacity-100 duration-300"
                      >
                        <Picture src={ImageBlue} alt="image icon" size={20} />
                        <p
                          className="text-brand-9 text-xs font-normal"
                          onClick={() => changeSignatureImage(index)}
                        >
                          Change Image
                        </p>
                      </div>
                      <input
                        type="file"
                        id={`signature_input_${index}`}
                        name={`signature_${index}`}
                        accept="image/*"
                        onChange={handleSignatureChange(index)}
                        className="hidden"
                        ref={React.createRef()}
                      />
                    </div>
                    <div className="flex flex-col md:flex-row gap-5 justify-start md:justify-end md:items-end items-start">
                      <div className="flex-1">
                        <Select
                          id={`personal_title_qualification_${index}`}
                          options={titles}
                          // defaultValue={state[index]?.title}
                          label="personal title / qualification"
                          inputContainerClassName="w-full bg-neutral-2"
                        />
                      </div>
                      <div className="flex-1">
                        <Input
                          id={`fullname_${index}`}
                          label="full name"
                          placeholder="Write Here"
                          className="w-full"
                        // defaultValue={state[index]?.name}
                        />
                      </div>
                      <div className="flex flex-col sm:flex-row gap-3 items-end">
                        <Select
                          id={`real_estate_title_${index}`}
                          options={industryOptions}
                          // defaultValue={state[index]?.professional_title}
                          label="real estate title"
                          inputContainerClassName="w-full bg-neutral-2"
                        />
                        {index !== 0 && (
                          <button
                            className="bg-brand-9 min-w-[50px] text-white text-xs font-normal py-2 px-3 rounded-lg max-h-[40px]"
                            onClick={() => removeInputField(field.id)}
                          >
                            Remove
                          </button>
                        )}
                      </div>
                    </div>
                  </React.Fragment>
                ))}
               {state.length < 5 && inputFields.length < 5 &&  <div className="flex items-end">
                  <button
                    className="text-xs font-normal py-2 px-3 w-full sm:w-auto text-brand-9 bg-white"
                    onClick={addInputField}
                    type="button"
                  >
                    Add More
                  </button>
                </div>}
              </div>}
            </div>
          </div>
          <SettingsUpdateButton
            submit
            action={hanleCreateSignature as any}
            loading={reqLoading}
            next={next}
          />
        </div>
      </AuthForm>
    </SettingsSection>
  )
}

export default SettingsSignature





/////SIGNATURE LAST =======================
// "use client";

// import React, { useEffect, useState } from "react";

// // Images
// import { Check } from "lucide-react";
// import DangerIcon from "@/public/icons/danger.svg";
// import ImageBlue from "@/public/icons/image-blue.svg";
// import SignatureImage from "@/public/accounting/signature.svg";

// // Imports
// import { industryOptions, titles } from "@/data";
// import Input from "@/components/Form/Input/input";
// import Picture from "@/components/Picture/picture";
// import Select from "@/components/Form/Select/select";
// import { useImageUploader } from "@/hooks/useImageUploader";
// import SettingsSection from "@/components/Settings/settings-section";

// import {
//   SettingsSectionTitle,
//   SettingsUpdateButton,
// } from "@/components/Settings/settings-components";
// import { usePersonalInfoStore } from "@/store/personal-info-store";
// import { toast } from "sonner";
// import { AuthForm } from "@/components/Auth/auth-components";
// import { createSignatureProfiles, FormState } from "@/app/(nav)/settings/security/data";
// import useFetch from "@/hooks/useFetch";
// import useRefetchOnEvent from "@/hooks/useRefetchOnEvent";
// import { SignaturePageData, transformSignature } from "@/app/(nav)/settings/data";
// import { empty } from "@/app/config";


// const SettingsSignature = () => {
//   const [state, setState] = useState<SignaturePageData[]>([]);
//   const { preview, inputFileRef, handleImageChange } = useImageUploader();
//   const {
//     data: apiData,
//     loading,
//     silentLoading,
//     isNetworkError,
//     error,
//     refetch,
//   } = useFetch<any>("/company-signatures");
//   useRefetchOnEvent("refetchSignatures", () => refetch({ silent: true }));

//   useEffect(() => {
//     // Assuming apiData is defined somewhere in your component
//     if (apiData) {
//       const transformedData = transformSignature(apiData);
//       setState(transformedData);

//       // Update inputFields based on new state
//       setInputFields(transformedData.length > 0 ? transformedData.map(signature => ({
//         id: signature.id,
//         signature: signature.signature_image || empty,
//         signatureFile: new File([], ""), // Create File only on the client
//         name: signature.name,
//         title: signature.title,
//         professional_title: signature.professional_title
//       })) : [{
//         id: Date.now(),
//         signature: empty,
//         signatureFile: new File([], ""),
//       }]);
//     }
//   }, [apiData]);


//   const [inputFields, setInputFields] = useState(() => {
//     if (typeof window !== "undefined") {
//       // Check if state is empty and use default values if so
//       if (state.length > 0) {
//         return state.map(signature => ({
//           id: Date.now(),
//           signature: signature.signature_image,
//           signatureFile: new File([], ""), // Create File only on the client
//           name: signature.name,
//           title: signature.title,
//           professional_title: signature.professional_title
//         }));
//       } else {
//         return [
//           {
//             id: Date.now(),
//             signature: empty,
//             signatureFile: new File([], ""),
//           },
//         ];
//       }
//     }
//     return [];
//   });

//   // console.log("INput fields", inputFields)


//   const [reqLoading, setReqLoading] = useState(false);
//   const [next, setNext] = useState(false);
//   const changeImage = () => {
//     inputFileRef.current?.click();
//   };

//   const addInputField = () => {
//     setInputFields([
//       ...inputFields,
//       { id: Date.now(), signature: empty, signatureFile: new File([], "") },
//     ]);
//   };

//   const removeInputField = (id: number) => {
//     const updatedFields = inputFields.filter((field) => field.id !== id);
//     setInputFields(updatedFields);
//     // console.log("Input Fields after removing:", updatedFields);
//   };

//   const changeSignatureImage = (index: number) => {
//     document.getElementById(`signature_input_${index}`)?.click();
//   };

//   const handleSignatureChange =
//     (index: number) => (e: React.ChangeEvent<HTMLInputElement>) => {
//       if (typeof window === "undefined" || !e.target.files || !e.target.files[0]) {
//         return;
//       }
//       if (e.target.files && e.target.files[0]) {
//         const newSignature = URL.createObjectURL(e.target.files[0]);
//         const newFile = e.target.files[0];
//         setInputFields(
//           inputFields.map((inputField) =>
//             inputField.id === inputFields[index].id
//               ? { ...inputField, signature: newSignature, signatureFile: newFile }
//               : inputField
//           )
//         );
//       }
//     };

//   const hanleCreateSignature = async (data: FormData) => {
//     const formData = new FormData();

//     inputFields.forEach((field, index) => {
//       formData.append(`name[${index}]`, data.get(`fullname_${index}`) as string);
//       formData.append(`title[${index}]`, data.get(`personal_title_qualification_${index}`) as string);
//       formData.append(`professional_title[${index}]`, data.get(`real_estate_title_${index}`) as string);
//       // formData.append(`signature[${index}]`, field.signatureFile); // Binary file

//       if (typeof field.signature === 'string') {
//         formData.append(`signature[${index}]`, field.signature); // Append the string directly
//       } else {
//         formData.append(`signature[${index}]`, field.signatureFile); // Append the file
//       }
//     });

//     console.log("Payload:", Object.fromEntries(formData));

//     try {
//       setReqLoading(true);
//       const res = await createSignatureProfiles(formData);
//       if (res) {
//         toast.success("Signature created successfully");
//         setNext(true);
//         window.dispatchEvent(new Event("refetchSignatures"));
//       }
//     } catch (error) {
//       toast.error("Error creating signature");
//     } finally {
//       setReqLoading(false);
//     }
//   };

//   return (
//     <SettingsSection title="Authorized Signature">
//       <AuthForm onFormSubmit={hanleCreateSignature} returnType="form-data">
//         <div className="custom-flex-col gap-8">
//           <div className="custom-flex-col gap-6">
//             <SettingsSectionTitle
//               title=""
//               desc="This signature is affixed to every document requiring authorization. Please sign on a plain white paper and take a photo for uploading. If possible, remove the background picture of the signature before uploading for a cleaner appearance."
//             />
//             <div className="custom-flex-col gap-[18px]">
//               <div className="flex flex-col gap-5">
//                 {inputFields.map((field, index) => (
//                   <React.Fragment key={field.id}>
//                     <div className="relative max-w-[100px] rounded-lg overflow-hidden bg-[#F7F7F7] group cursor-pointer">
//                       <Picture
//                         size={100}
//                         fit="contain"
//                         src={field.signature}
//                         alt="official signature"
//                       />
//                       <div
//                         style={{ backgroundColor: "rgba(0, 0, 0, 0.20)" }}
//                         onClick={() => changeSignatureImage(index)}
//                         className="absolute inset-0 flex flex-col gap-2 items-center justify-center opacity-0 group-hover:opacity-100 duration-300"
//                       >
//                         <Picture src={ImageBlue} alt="image icon" size={20} />
//                         <p
//                           className="text-brand-9 text-xs font-normal"
//                           // onClick={() => changeSignatureImage(index)}
//                         >
//                           Change Image
//                         </p>
//                       </div>
//                       <input
//                         type="file"
//                         id={`signature_input_${index}`}
//                         name={`signature_${index}`}
//                         accept="image/*"
//                         onChange={handleSignatureChange(index)}
//                         className="hidden"
//                         ref={React.createRef()}
//                       />
//                     </div>
//                     <div className="flex flex-col md:flex-row gap-5 justify-start md:justify-end md:items-end items-start">
//                       <div className="flex-1">
//                         <Select
//                           id={`personal_title_qualification_${index}`}
//                           options={titles}
//                           defaultValue={state[index]?.title}
//                           label="personal title / qualification"
//                           inputContainerClassName="w-full bg-neutral-2"
//                         />
//                       </div>
//                       <div className="flex-1">
//                         <Input
//                           id={`fullname_${index}`}
//                           label="full name"
//                           placeholder="Write Here"
//                           className="w-full"
//                           defaultValue={state[index]?.name}
//                         />
//                       </div>
//                       <div className="flex flex-col sm:flex-row gap-3 items-end">
//                         <Select
//                           id={`real_estate_title_${index}`}
//                           options={industryOptions}
//                           defaultValue={state[index]?.professional_title}
//                           label="real estate title"
//                           inputContainerClassName="w-full bg-neutral-2"
//                         />
//                         {index !== 0 && (
//                           <button
//                             className="bg-brand-9 min-w-[50px] text-white text-xs font-normal py-2 px-3 rounded-lg max-h-[40px]"
//                             onClick={() => removeInputField(field.id)}
//                           >
//                             Remove
//                           </button>
//                         )}
//                       </div>
//                     </div>
//                   </React.Fragment>
//                 ))}
//                 <div className="flex items-end">
//                   <button
//                     className="text-xs font-normal py-2 px-3 w-full sm:w-auto text-brand-9 bg-white"
//                     onClick={addInputField}
//                     type="button"
//                   >
//                     Add More
//                   </button>
//                 </div>
//               </div>
//             </div>
//           </div>
//           <SettingsUpdateButton
//             submit
//             action={hanleCreateSignature as any}
//             loading={reqLoading}
//             next={next}
//           />
//         </div>
//       </AuthForm>
//     </SettingsSection>
//   )
// }

// export default SettingsSignature




















///appearance
  const { selectedOptions, setSelectedOption } = useSettingsStore();
  const [reqLoading, setReqLoading] = useState(false);
  const [next, setNext] = useState(false);
  const [selectedTheme, setSelectedTheme] = useState<string | null>(
    appearance.theme
    // appearance.theme || selectedOptions.theme
  );
  const [selectedView, setSelectedView] = useState<string | null>(
    appearance.view
    // appearance.view || selectedOptions.view
  );
  const [selectedNavbar, setSelectedNavbar] = useState<string | null>(
    // appearance.navbar || selectedOptions.navbar
  );
  const [selectedMode, setSelectedMode] = useState<string | null>(
    appearance.mode || selectedOptions.mode
  );
  const [selectedFont, setSelectedFont] = useState<string | null>(
    appearance.font || selectedOptions.font
  );
  const [selectedColor, setSelectedColor] = useState<string | null>(
    primaryColor
  );









  ==============STAFF
         {/* {staff.map(({ id, label }) => (
              <div
                key={id}
                className='relative'
              >
                <Select
                  options={staffOptions}
                  // options={staffOption}
                  id={id}
                  label={label}
                  inputContainerClassName='bg-white'
                />
                <button
                  type='button'
                  aria-label='Remove Staff'
                  onClick={() => removeStaff(id)}
                  className='absolute top-0 right-0 w-[18px] h-[18px]'
                >
                  <DeleteIconX size={20} />
                </button>
              </div>
            ))}
            {staff.length < 3 && (
              <button
                type='button'
                onClick={addStaff}
                className='text-brand-9 text-xs md:text-sm font-normal md:self-end md:justify-self-start'
              >
                {`${staff.length > 0 ? 'Add more staff' : 'Add Staff'}`}
              </button>
            )} */}


















            ==============MessageUserPageTypes// Imports
import { usePersonalInfoStore } from "@/store/personal-info-store";
import Message from "./message";
import { MessagesProps } from "./types";

const Messages: React.FC<MessagesProps> = ({ day, messages }) => {
  const userId = usePersonalInfoStore((state) => state.user_id);
  return (
    <div className="custom-flex-col gap-8">
      <div className="flex justify-center sticky top-0">
        <p className="py-1 px-2 rounded-[4px] bg-neutral-2 dark:bg-darkText-primary text-text-quaternary dark:text-white text-[10px] font-normal capitalize">
          {day}
        </p>
      </div>
      <div className="custom-flex-col gap-4">
        {messages?.map((m) => (
          <>
            <Message
              key={m.time}
              type={m.type}
              time={m.time}
              text={m.text}
            />
          </>
        ))}
        {/* <Message
          type="to user"
          time="8:32am"
          text="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vitae ullamcorper urna. "
        />
        <Message
          type="from user"
          time="8:32am"
          text="Nunc quis sagittis justo, ac fringilla nulla. Quisque eu risus ex. Quisque cursus quis mauris vel efficitur. Donec at bibendum leo, nec consequat mauris. Duis id risus nulla."
        />
        <Message
          type="to user"
          time="8:32am"
          text="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vitae ullamcorper urna. "
        /> */}
      </div>
    </div>
  );
};

export default Messages;
















===========CHAT INTEGARET

"use client";
import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { useChatStore } from "@/store/message";
import { transformMessages } from "../data";
import Picture from "@/components/Picture/picture";
import Messages from "@/components/Message/messages";
import { empty } from "@/app/config";
import { UsersProps } from "../types";
import useGetConversation from "@/hooks/getConversation";

const Chat = () => {
  const router = useRouter();
  const { data, setChatData } = useChatStore();
  const usersData = useChatStore((state) => state?.data?.users);
  const { id } = useParams<{ id: string }>();
  const users = usersData?.users || [];
  const userId = Number(id);
  const store_messages = useChatStore((state) => state?.data?.conversations);
  const [conversations, setConversations] = useState<any[]>([]);

  // Clear local conversation state when conversation id changes.
  useEffect(() => {
    setConversations([]);
  }, [id]);

  // Fetch the conversation messages (this hook uses your fetch-event-source logic)
  useGetConversation(`${id}`);

  // Transform and set sorted conversations whenever the store updates.
  useEffect(() => {
    if (store_messages) {
      const transformedMessages = transformMessages(store_messages);
      // Instead of accumulating new messages, simply override with the full sorted list.
      setConversations(transformedMessages);
    }
  }, [store_messages]);

  // If user not found, redirect to messages page
  const user = users.find((user: UsersProps) => Number(user.id) === userId);
  if (!user) {
    router.replace("/messages");
    return null;
  }

  return (
    <>
      <div className="py-4 px-6 bg-neutral-2 dark:bg-black">
        <div className="flex items-center gap-3">
          <button onClick={() => router.push("/messages")}>
            <Picture src="/icons/chevron-left.svg" alt="back" size={20} />
          </button>
          <button className="flex items-center gap-4 text-left">
            <Picture
              src={user?.imageUrl || empty}
              alt="profile picture"
              containerClassName="custom-secondary-bg rounded-full"
              size={32}
              rounded
              status
            />
            <div className="custom-flex-col">
              <p className="text-text-primary dark:text-white text-base font-medium capitalize">
                {user?.name}
              </p>
              <p className="text-text-disabled dark:text-darkText-2 text-[10px] font-normal">
                Tap here for contact info
              </p>
            </div>
          </button>
        </div>
      </div>
      <div className="py-5 px-6 flex-1 overflow-auto custom-round-scrollbar bg-white dark:bg-black custom-flex-col gap-8">
        {conversations.length > 0 &&
          conversations.map((m) => (
            <Messages key={m.id} day={m.day} messages={m.details} userId={user.id} />
          ))}
      </div>
    </>
  );
};

export default Chat;










-============useChatStore
// "use client";

// import { useParams } from "next/navigation";
// import { useEffect, useRef, useState } from "react";

// // Types
// import type { ConversationsAPIResponse, MessagesLayoutProps, PageMessages } from "./types";

// // Images
// import ClipBlue from "@/public/icons/clip-blue.svg";
// import MicrophoneBlue from "@/public/icons/microphone-blue.svg";
// import SendIcon from "@/public/icons/send-msg.svg"

// // Imports
// import Input from "@/components/Form/Input/input";
// import Picture from "@/components/Picture/picture";
// import useWindowWidth from "@/hooks/useWindowWidth";
// import Button from "@/components/Form/Button/button";
// import MessageCard from "@/components/Message/message-card";
// import { message_card_data } from "@/components/Message/data";
// import FilterButton from "@/components/FilterButton/filter-button";
// import MessagesFilterMenu from "@/components/Message/messages-filter-menu";
// import Messages from "./page";
// import { NoMessage } from "./messages-component";
// import useFetch from "@/hooks/useFetch";
// import { CompanyUsersAPIResponse, convertToFormData, initialData, MessageUserPageTypes, SendMessage, transformCompanyUsersData, transformUsersMessages } from "./data";
// import { useChatStore } from "@/store/message";
// import { AuthForm } from "@/components/Auth/auth-components";
// import clsx from "clsx";
// import { toast } from "sonner";
// import { objectToFormData } from "@/utils/checkFormDataForImageOrAvatar";
// import useGetConversation from "@/hooks/getConversation";
// import { Modal, ModalContent, ModalTrigger } from "@/components/Modal/modal";
// import MessageAttachment from "@/components/Message/message-attachment";
// import useRefetchOnEvent from "@/hooks/useRefetchOnEvent";
// import MessageCardSkeleton from "@/components/Skeleton/message-card-skeleton";
// import WavesurferPlayer from '@wavesurfer/react'


// const MessagesLayout: React.FC<MessagesLayoutProps> = ({ children }) => {
//   const { setChatData } = useChatStore();
//   const { id } = useParams();
//   const { isCustom } = useWindowWidth(900);
//   const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
//   const [message, setMessage] = useState("");
//   const [reqLoading, setReqLoading] = useState(false)
//   const [pageUsersMsg, setPageUsersMsg] = useState<PageMessages[]>(message_card_data)
//   const store_messages = useChatStore((state) => state?.data?.conversations);
//   const [conversations, setConversations] = useState<any[]>([]);
//   const [isRecording, setIsRecording] = useState(false);
//   const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
//   const mediaRecorderRef = useRef<MediaRecorder | null>(null);
//   const audioChunksRef = useRef<Blob[]>([]);

//   const [wavesurfer, setWavesurfer] = useState(null)
//   const [isPlaying, setIsPlaying] = useState(false)

//   const onReady = (ws) => {
//     setWavesurfer(ws)
//     setIsPlaying(false)
//   }

//   const onPlayPause = () => {
//     wavesurfer && wavesurfer.playPause()
//   }

//   useEffect(() => {
//     setMessage(message)
//   }, [message]);

//   const handleMenuClose = () => {
//     setAnchorEl(null);
//   };

//   const handleEmojiSelect = (emoji: string) => {
//     setMessage((prev) => prev + emoji);
//   };

//   const {
//     data: usersData,
//     loading: loadingUsers,
//     error,
//   } = useFetch<CompanyUsersAPIResponse>('/company/users');

//   const {
//     data: usersMessages,
//     loading: usersMsgLoading,
//     error: usersMsgError,
//     refetch,
//   } = useFetch<ConversationsAPIResponse>("/messages");

//   useRefetchOnEvent("refetch-users-msg", () => {
//     refetch({ silent: true });
//   });

//   useEffect(() => {
//     if (usersMessages) {
//       setPageUsersMsg(transformUsersMessages(usersMessages));
//     }
//   }, [usersMessages]);

//   useEffect(() => {
//     if (usersData) {
//       setChatData("users", transformCompanyUsersData(usersData)); // Store users dynamically to store
//     }
//   }, [usersData]);

//   const handleSendMsg = async () => {
//     const payload = {
//       content: message,
//       content_type: "text",
//       receiver_type: "user"
//     }

//     try {
//       setReqLoading(true)
//       const res = await SendMessage(objectToFormData(payload), `${id}`)
//       if (res) {
//         setMessage("")
//         window.dispatchEvent(new Event("refetch-users-msg"))
//       }
//     } catch (err) {
//       toast.error("Failed to send msg")
//     } finally {
//       setReqLoading(false)
//     }
//   }

//   const handleStartRecording = () => {
//     setIsRecording(true);
//     audioChunksRef.current = []; // Clear previous chunks

//     navigator.mediaDevices
//       .getUserMedia({ audio: true })
//       .then((stream) => {
//         mediaRecorderRef.current = new MediaRecorder(stream);
//         mediaRecorderRef.current.ondataavailable = (e) => {
//           audioChunksRef.current.push(e.data);
//         };
//         mediaRecorderRef.current.onstop = () => {
//           const audioBlob = new Blob(audioChunksRef.current, { type: "audio/wav" });
//           setAudioBlob(audioBlob);
//         };
//         mediaRecorderRef.current.start();
//       })
//       .catch((err) => {
//         console.error("Error accessing microphone: ", err);
//       });
//   };

//   const handleStopRecording = () => {
//     setIsRecording(false);
//     if (mediaRecorderRef.current) {
//       mediaRecorderRef.current.stop();
//     }
//   };

//   const handleSendAudio = async () => {
//     if (!audioBlob) return;
//     const formData = convertToFormData(audioBlob);

//     try {
//       setReqLoading(true);
//       const res = await SendMessage(formData, `${id}`);
//       if (res) {
//         setAudioBlob(null); // Reset audio state after sending
//       }
//     } catch (err) {
//       toast.error("Failed to send audio message");
//     } finally {
//       setReqLoading(false);
//     }
//   };

//   return (
//     <>
//       {isCustom && id ? null : (
//         <div className="flex flex-1 p-4 pr-0">
//           <div className="custom-flex-col pr-2 w-full overflow-y-auto custom-round-scrollbar">
//             <div className="flex gap-4 sticky top-0 z-[2] bg-white dark:bg-black pb-2">
//               <div className="flex-1 relative">
//                 <Input
//                   id="search"
//                   className="w-full"
//                   placeholder="Search for messages"
//                   leftIcon={"/icons/search-icon.svg"}
//                   inputClassName="pr-[52px] border-transparent"
//                 />
//                 <div className="absolute top-1/2 right-0 -translate-y-1/2">
//                   <FilterButton
//                     noTitle
//                     className="bg-transparent py-[10px] px-4"
//                     onClick={(e) => setAnchorEl(e.currentTarget)}
//                   />
//                   <MessagesFilterMenu
//                     anchorEl={anchorEl}
//                     open={Boolean(anchorEl)}
//                     onClose={handleMenuClose}
//                     filterOptions={[
//                       { label: "Inbox" },
//                       { label: "Groups" },
//                       { label: "Unread" },
//                     ]}
//                   />
//                 </div>
//               </div>
//               <Button
//                 href="/reviews"
//                 variant="sky_blue"
//                 size="xs_medium"
//                 className="py-2 px-7 dark:bg-darkBrand-primary"
//               >
//                 see reviews
//               </Button>
//             </div>
//             {pageUsersMsg.length === 0 ? (
//               <NoMessage loading={loadingUsers} />
//             ) : (
//               <>
//                 {usersMsgLoading ? (
//                   <div className="custom-flex-col gap-2 relative z-[1] pb-4">
//                     {[...Array(5)].map((_, idx) => (
//                       <MessageCardSkeleton key={idx} />
//                     ))}
//                   </div>
//                 ) : (
//                   <div className="custom-flex-col relative z-[1] pb-4">
//                     {pageUsersMsg.map((message, idx) => (
//                       <MessageCard
//                         key={idx}
//                         {...message}
//                         highlight={message.id === id}
//                       />
//                     ))}
//                   </div>
//                 )}
//               </>
//             )}
//           </div>
//         </div>
//       )}
//       {(!isCustom || id) && (
//         <div className="flex-1">
//           <div className="custom-flex-col h-full">
//             {children}
//             {id && (
//               <AuthForm onFormSubmit={() => { }}>
//                 <div className="py-4 px-6 flex items-center gap-4">
//                   <Modal>
//                     <ModalTrigger asChild>
//                       <button>
//                         <Picture src={ClipBlue} alt="attachment" size={24} />
//                       </button>
//                     </ModalTrigger>
//                     <ModalContent>
//                       <MessageAttachment onEmojiSelect={handleEmojiSelect} />
//                     </ModalContent>
//                   </Modal>
//                   <Input
//                     id="chat"
//                     placeholder="Type your message here"
//                     className="flex-1 text-sm"
//                     value={message}
//                     onChange={setMessage}
//                   />
//                   {message &&
//                     <button
//                       className={clsx({
//                         "animate-spin h-5 w-5 border-b-2 border-blue-500 rounded-full mr-2": reqLoading,
//                       })}
//                       onClick={handleSendMsg}
//                     >
//                       <Picture
//                         src={SendIcon}
//                         alt="text message"
//                         size={24}
//                       />
//                     </button>}
//                   {!message &&
//                     <button>
//                       <Picture
//                         src={MicrophoneBlue}
//                         alt="voice note"
//                         size={24}
//                         onClick={handleStartRecording}
//                       />
//                     </button>}
//                  {audioBlob && 
//                  <>
//                     <WavesurferPlayer
//                       height={100}
//                       waveColor="violet"
//                       url={audioBlob}
//                       onReady={onReady}
//                       onPlay={() => setIsPlaying(true)}
//                       onPause={() => setIsPlaying(false)}
//                     />

//                     <button onClick={onPlayPause}>
//                       {isPlaying ? 'Pause' : 'Play'}
//                     </button>

//                   </>}
//                 </div>
//               </AuthForm>
//             )}
//           </div>
//         </div>
//       )}
//     </>
//   );
// };

// export default MessagesLayout;










=======MESSAGE MessagesLayout
// "use client";

// import { useParams } from "next/navigation";
// import { useEffect, useRef, useState } from "react";

// // Types
// import type { CompanyUsersAPIResponse, ConversationsAPIResponse, MessagesLayoutProps, PageMessages } from "./types";

// // Images
// import ClipBlue from "@/public/icons/clip-blue.svg";
// import MicrophoneBlue from "@/public/icons/microphone-blue.svg";
// import SendIcon from "@/public/icons/send-msg.svg"
// import PlayIcon from "@/public/icons/play-icon.svg"
// import PauseIcon from "@/public/icons/pause-icon.svg"
// import DeleteIcon from "@/public/icons/del.svg"

// // Imports
// import Input from "@/components/Form/Input/input";
// import Picture from "@/components/Picture/picture";
// import useWindowWidth from "@/hooks/useWindowWidth";
// import Button from "@/components/Form/Button/button";
// import MessageCard from "@/components/Message/message-card";
// import { message_card_data } from "@/components/Message/data";
// import FilterButton from "@/components/FilterButton/filter-button";
// import MessagesFilterMenu from "@/components/Message/messages-filter-menu";
// import useFetch from "@/hooks/useFetch";
// import {
//   SendMessage,
//   transformCompanyUsersData,
//   transformUsersMessages
// } from "./data";
// import { useChatStore } from "@/store/message";
// import { AuthForm } from "@/components/Auth/auth-components";
// import clsx from "clsx";
// import { toast } from "sonner";
// import { objectToFormData } from "@/utils/checkFormDataForImageOrAvatar";
// import { Modal, ModalContent, ModalTrigger } from "@/components/Modal/modal";
// import MessageAttachment from "@/components/Message/message-attachment";
// import useRefetchOnEvent from "@/hooks/useRefetchOnEvent";
// import MessageCardSkeleton from "@/components/Skeleton/message-card-skeleton";
// import WavesurferPlayer from '@wavesurfer/react';
// import WaveSurfer from 'wavesurfer.js';
// import RecordPlugin from "wavesurfer.js/dist/plugins/record.esm.js";
// import NoMessage from "./messages-component";
// import { PlusIcon } from "@/public/icons/icons";
// import SelectChatUsersModal from "@/components/Message/user-modal";
// import { CommentTextArea } from "../../management/agent-community/NewComment";

// const MessagesLayout: React.FC<MessagesLayoutProps> = ({ children }) => {
//   const { setChatData } = useChatStore();
//   const { id } = useParams();
//   const { isCustom } = useWindowWidth(900);
//   const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
//   const [message, setMessage] = useState("");
//   const [reqLoading, setReqLoading] = useState(false);
//   const [pageUsersMsg, setPageUsersMsg] = useState<PageMessages[]>(message_card_data);
//   const store_messages = useChatStore((state) => state?.data?.conversations);
//   const [conversations, setConversations] = useState<any[]>([]);
//   const [isRecording, setIsRecording] = useState(false);
//   const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
//   const [audioUrl, setAudioUrl] = useState<string>("");
//   const mediaRecorderRef = useRef<MediaRecorder | null>(null);
//   const audioChunksRef = useRef<Blob[]>([]);
//   const [wavesurfer, setWavesurfer] = useState<WaveSurfer | null>(null);
//   const [isPlaying, setIsPlaying] = useState(false);
//   const users_data = useChatStore((state) => state?.data?.users);

//   // Ref for playback wavesurfer (used with WavesurferPlayer)
//   const [playbackWS, setPlaybackWS] = useState<WaveSurfer | null>(null);
//   // const onReady = (ws: any) => {
//   //   setWavesurfer(ws);
//   //   setIsPlaying(false);
//   // };

//   // const onPlayPause = () => {
//   //   wavesurfer && wavesurfer.playPause();
//   // };

//   const onReady = (ws: any) => {
//     setPlaybackWS(ws);
//     setIsPlaying(false);
//   };
//   const onPlayPause = () => {
//     playbackWS && playbackWS.playPause();
//   };

//   // New ref for the recording waveform container
//   const micContainerRef = useRef<HTMLDivElement>(null);
//   const [recorderWS, setRecorderWS] = useState<WaveSurfer | null>(null);

//   // When audioBlob is set, create a URL string for playback
//   useEffect(() => {
//     if (audioBlob) {
//       const url = URL.createObjectURL(audioBlob);
//       setAudioUrl(url);
//       return () => URL.revokeObjectURL(url);
//     } else {
//       setAudioUrl("");
//     }
//   }, [audioBlob]);


//   // When audioBlob is set, create a URL string for Wavesurfer
//   // useEffect(() => {
//   //   if (audioBlob) {
//   //     const url = URL.createObjectURL(audioBlob);
//   //     setAudioUrl(url);
//   //     // Clean up the URL object when the blob changes or the component unmounts
//   //     return () => URL.revokeObjectURL(url);
//   //   } else {
//   //     setAudioUrl("");
//   //   }
//   // }, [audioBlob]);

//   useEffect(() => {
//     setMessage(message);
//   }, [message]);

//   const handleMenuClose = () => {
//     setAnchorEl(null);
//   };

//   const handleEmojiSelect = (emoji: string) => {
//     setMessage((prev) => prev + emoji);
//   };

//   const handleMessageChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
//     setMessage(event.target.value);
//   };

//   const {
//     data: usersData,
//     loading: loadingUsers,
//     error,
//   } = useFetch<CompanyUsersAPIResponse>('/company/users');

//   const {
//     data: usersMessages,
//     loading: usersMsgLoading,
//     error: usersMsgError,
//     refetch,
//   } = useFetch<ConversationsAPIResponse>("/messages");
//   useRefetchOnEvent("refetch-users-msg", () => {
//     refetch({ silent: true });
//   });

//   useEffect(() => {
//     if (usersMessages) {
//       setPageUsersMsg(transformUsersMessages(usersMessages));
//       setChatData("users_messages", transformUsersMessages(usersMessages))
//     }
//   }, [usersMessages]);

//   // console.log("page", pageUsersMsg)
//   useEffect(() => {
//     if (usersData) {
//       setChatData("users", transformCompanyUsersData(usersData)); // Store users dynamically to store
//     }
//   }, [usersData]);

//   const handleStartRecording = () => {
//     console.log('record start')
//     if (!micContainerRef.current) return;
//     // Create a new WaveSurfer instance for recording with RecordPlugin
//     const ws = WaveSurfer.create({
//       container: micContainerRef.current,
//       waveColor: "rgb(200, 0, 200)",
//       progressColor: "rgb(100, 0, 100)",
//     });
//     const recordPlugin = ws.registerPlugin(
//       RecordPlugin.create({
//         renderRecordedAudio: false,
//         scrollingWaveform: false,
//         continuousWaveform: true,
//         continuousWaveformDuration: 30, // optional
//       })
//     );
//     // When recording ends, update the audio blob state
//     recordPlugin.on("record-end", (blob: Blob) => {
//       setAudioBlob(blob);
//       // Clean up the recorder instance after recording
//       ws.destroy();
//       setRecorderWS(null);
//     });
//     // Start recording via the Record plugin
//     ws.record.startRecording();
//     setRecorderWS(ws);
//     setIsRecording(true);
//   };

//   const handleStopRecording = () => {
//     if (recorderWS) {
//       recorderWS.record.stopRecording();
//       setIsRecording(false);
//     }
//   };


//   // Function to send Text Messsage
//   const handleSendMsg = async () => {
//     const payload = {
//       content: message,
//       content_type: "text",
//       receiver_type: "user"
//     };

//     try {
//       setReqLoading(true);
//       const res = await SendMessage(objectToFormData(payload), `${id}`);
//       if (res) {
//         setMessage("");
//         window.dispatchEvent(new Event("refetch-users-msg"));
//       }
//     } catch (err) {
//       toast.error("Failed to send msg");
//     } finally {
//       setReqLoading(false);
//     }
//   };

//   // const handleStartRecording = () => {
//   //   setIsRecording(true);
//   //   audioChunksRef.current = []; // Clear previous chunks
//   //   navigator.mediaDevices
//   //     .getUserMedia({ audio: true })
//   //     .then((stream) => {
//   //       mediaRecorderRef.current = new MediaRecorder(stream);
//   //       mediaRecorderRef.current.ondataavailable = (e) => {
//   //         audioChunksRef.current.push(e.data);
//   //       };
//   //       mediaRecorderRef.current.onstop = () => {
//   //         const recordedBlob = new Blob(audioChunksRef.current, { type: "audio/wav" });
//   //         setAudioBlob(recordedBlob);
//   //       };
//   //       mediaRecorderRef.current.start();
//   //     })
//   //     .catch((err) => {
//   //       console.error("Error accessing microphone: ", err);
//   //     });
//   // };


//   // const handleStopRecording = () => {
//   //   setIsRecording(false);
//   //   if (mediaRecorderRef.current) {
//   //     mediaRecorderRef.current.stop();
//   //   }
//   // };

//   const handleSendAudio = async () => {
//     if (!audioBlob) return;

//     const audioFile = new File([audioBlob], "voice-note.wav", { type: audioBlob.type });
//     const payload = {
//       content_file: audioFile,
//       content_type: "audio",
//       receiver_type: "user"
//     };

//     console.log("formdata", payload)

//     try {
//       setReqLoading(true);
//       const res = await SendMessage(objectToFormData(payload), `${id}`);
//       if (res) {
//         setAudioBlob(null); // Reset audio state after sending
//         setAudioUrl("");
//         window.dispatchEvent(new Event("refetch-users-msg"));
//       }
//     } catch (err) {
//       toast.error("Failed to send audio message");
//     } finally {
//       setReqLoading(false);
//     }
//   };

//   return (
//     <>
//       {isCustom && id ? null : (
//         <div className="flex flex-1 p-4 pr-0">
//           <div className="custom-flex-col pr-2 w-full overflow-y-auto custom-round-scrollbar relative">
//             <div className="flex gap-4 sticky top-0 z-[2] bg-white dark:bg-black pb-2">
//               <div className="flex-1 relative">
//                 <Input
//                   id="search"
//                   className="w-full"
//                   placeholder="Search for messages"
//                   leftIcon={"/icons/search-icon.svg"}
//                   inputClassName="pr-[52px] border-transparent"
//                 />
//                 <div className="absolute top-1/2 right-0 -translate-y-1/2">
//                   <FilterButton
//                     noTitle
//                     className="bg-transparent py-[10px] px-4"
//                     onClick={(e) => setAnchorEl(e.currentTarget)}
//                   />
//                   <MessagesFilterMenu
//                     anchorEl={anchorEl}
//                     open={Boolean(anchorEl)}
//                     onClose={handleMenuClose}
//                     filterOptions={[
//                       { label: "Inbox" },
//                       { label: "Groups" },
//                       { label: "Unread" },
//                     ]}
//                   />
//                 </div>
//               </div>
//               <Button
//                 href="/reviews"
//                 variant="sky_blue"
//                 size="xs_medium"
//                 className="py-2 px-7 dark:bg-darkBrand-primary"
//               >
//                 see reviews
//               </Button>
//             </div>
//             {pageUsersMsg.length === 0 ? (
//               <NoMessage loading={loadingUsers} />
//             ) : (
//               <>
//                 {usersMsgLoading ? (
//                   <div className="custom-flex-col gap-2 relative z-[1] pb-4">
//                     {[...Array(5)].map((_, idx) => (
//                       <MessageCardSkeleton key={idx} />
//                     ))}
//                   </div>
//                 ) : (
//                   <div className="custom-flex-col relative z-[1] pb-4">
//                     {pageUsersMsg.map((message, idx) => (
//                       <MessageCard
//                         key={idx}
//                         {...message}
//                         highlight={message.id === id}
//                       />
//                     ))}
//                   </div>
//                 )}
//               </>
//             )}
//             {/* STICKY PLUS */}
//             <div className="absolute bottom-5 z-[10]">
//               <Modal>
//                 <ModalTrigger asChild>
//                   <button
//                     onClick={() => { }}
//                     className="bg-brand-9 rounded-full text-white p-4 shadow-lg"
//                   >
//                     <PlusIcon />
//                   </button>
//                 </ModalTrigger>
//                 <ModalContent>
//                   <SelectChatUsersModal
//                     loading={usersMsgLoading}
//                     usersData={users_data?.users}
//                     filters={users_data?.filters}
//                   />
//                 </ModalContent>
//               </Modal>
//             </div>
//           </div>
//         </div>
//       )}
//       {(!isCustom || id) && (
//         <div className="flex-1">
//           <div className="custom-flex-col h-full">
//             {children}
//             {id && (
//               <AuthForm onFormSubmit={() => { }}>
//                 <div className="py-4 px-6 flex items-center gap-4">
//                   {(!isRecording && !audioBlob) &&
//                     <>
//                       <Modal>
//                         <ModalTrigger asChild>
//                           <button type="button">
//                             <Picture src={ClipBlue} alt="attachment" size={24} />
//                           </button>
//                         </ModalTrigger>
//                         <ModalContent>
//                           <MessageAttachment
//                             onEmojiSelect={handleEmojiSelect}
//                             id={id as string}
//                           />
//                         </ModalContent>
//                       </Modal>
//                       <CommentTextArea
//                         name="chat"
//                         id="chat"
//                         placeholder="Type your message here"
//                         className="flex-1 text-sm"
//                         value={message}
//                         onChange={handleMessageChange}
//                       />
//                     </>
//                   }
//                   {message ? (
//                     <button
//                       type="button"
//                       className={clsx({
//                         "animate-spin h-5 w-5 border-b-2 border-blue-500 rounded-full mr-2": reqLoading,
//                       })}
//                       onClick={handleSendMsg}
//                     >
//                       <Picture src={SendIcon} alt="text message" size={24} />
//                     </button>
//                   ) : (
//                     <>
//                       {/* {!audioBlob &&
//                         <button type="button" onClick={handleStartRecording}>
//                           <Picture src={MicrophoneBlue} alt="voice note" size={24} />
//                         </button>}
//                       {isRecording &&
//                         <button type="button" onClick={handleStopRecording} className="flex items-center space-x-2">
//                           <div className="flex space-x-1 items-center">
//                             <div
//                               className="w-1 h-4 bg-red-500 animate-pulse"
//                               style={{ animationDelay: "0ms" }}
//                             ></div>
//                             <div
//                               className="w-1 h-6 bg-red-500 animate-pulse"
//                               style={{ animationDelay: "100ms" }}
//                             ></div>
//                             <div
//                               className="w-1 h-3 bg-red-500 animate-pulse"
//                               style={{ animationDelay: "200ms" }}
//                             ></div>
//                             <div
//                               className="w-1 h-5 bg-red-500 animate-pulse"
//                               style={{ animationDelay: "300ms" }}
//                             ></div>
//                             <div
//                               className="w-1 h-4 bg-red-500 animate-pulse"
//                               style={{ animationDelay: "400ms" }}
//                             ></div>
//                           </div>
//                           <span className="text-sm text-red-500">Stop Recording</span>
//                         </button>
//                       } */}

//                       {!audioBlob && (
//                         <button type="button" onClick={handleStartRecording}>
//                           <Picture src={MicrophoneBlue} alt="voice note" size={24} />
//                         </button>
//                       )}
//                       {isRecording && (
//                         <button
//                           type="button"
//                           onClick={handleStopRecording}
//                           className="flex items-center space-x-2"
//                         >
//                           <span className="text-sm text-red-500">Stop Recording</span>
//                         </button>
//                       )}
//                     </>
//                   )}
//                   {audioBlob && (
//                     <div className="flex w-full items-center justify-end gap-2">
//                       <button type="button" onClick={() => { setAudioBlob(null) }}>
//                         <Picture src={DeleteIcon} alt="delete voice" size={28} />
//                       </button>
//                       <WavesurferPlayer
//                         height={40}
//                         width={400}
//                         waveColor="violet"
//                         url={audioUrl} // Use the URL string instead of the Blob directly
//                         onReady={onReady}
//                         onPlay={() => setIsPlaying(true)}
//                         onPause={() => setIsPlaying(false)}
//                       />
//                       <div className="flex gap-2">
//                         <button type="button" onClick={onPlayPause}>
//                           <Picture src={isPlaying ? PauseIcon : PlayIcon} alt="voice pause-play" size={24} />
//                         </button>
//                         <button type="button" onClick={handleSendAudio} disabled={reqLoading}>
//                           {reqLoading ? (
//                             <div className="w-5 h-5 border-4 border-gray-200 border-t-blue-500 rounded-full animate-spin"></div>
//                           ) : (
//                             <Picture src={SendIcon} alt="voice note" size={24} />
//                           )}
//                         </button>
//                       </div>
//                     </div>
//                   )}
//                   {/* Render the recording waveform container when recording */}
//                   {isRecording && (
//                     <div
//                       ref={micContainerRef}
//                       id="mic"
//                       className="w-full h-[100px] border rounded-md mt-4"
//                     ></div>
//                   )}
//                 </div>
//               </AuthForm>
//             )}
//           </div>
//         </div>
//       )}
//     </>
//   );
// };

// export default MessagesLayout;













========NOTIFICATION CARD
// import clsx from "clsx";
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
// import { ChevronRight } from "lucide-react";
// import React from "react";
// import Image from "next/image";
// import { notificationCardProps } from "./types";
// import messagesIcon from "@/public/icons/message.svg";
// import complaintsIcon from "@/public/icons/complaints.svg";
// import BadgeIcon from "../BadgeIcon/badge-icon";
// import { empty } from "@/app/config";
// import Link from "next/link";
// import Picture from "../Picture/picture";

// const NotificationCard: React.FC<notificationCardProps> = ({
//   sectionHeader,
//   notifications,
//   branchId,
//   className,
//   seeAllLink,
// }) => {
//   // Determine the icon and message text based on the sectionHeader prop
//   const getEmptyState = () => {
//     if (sectionHeader === "Recent Messages") {
//       return {
//         icon: messagesIcon,
//         altText: "Messages Icon",
//         message:
//           "You do not have any recent messages. You can chat with staff, landlord/landlady, tenants, and occupants.",
//       };
//     } else if (sectionHeader === "Complaints") {
//       return {
//         icon: complaintsIcon,
//         altText: "Complaints Icon",
//         message:
//           "You do not have any complaints from tenants or occupants. They can create complaints using the mobile app, and recent complaints will be listed here.",
//       };
//     } else {
//       return {
//         icon: "", // default empty icon if needed
//         altText: "",
//         message: "",
//       };
//     }
//   };

//   const emptyState = getEmptyState();

//   return (
//     <Card
//       className={clsx(
//         "w-full h-[340px] border-none custom-flex-col overflow-hidden",
//         className
//       )}
//       style={{
//         boxShadow:
//           "0px 1px 2px 0px rgba(21, 30, 43, 0.08), 0px 2px 4px 0px rgba(13, 23, 33, 0.08)",
//       }}
//     >
//       <CardHeader className="p-4 pb-[10px] sticky top-0 bg-[inherit] z-[2]">
//         <CardTitle className="flex items-center justify-between text-[16px]">
//           <p className="text-black font-medium dark:text-[#f1f1fd]">
//             {sectionHeader}
//           </p>
//           {seeAllLink && (
//             <Link
//               href={seeAllLink}
//               className={clsx(
//                 "flex items-center font-medium",
//                 notifications.length === 0
//                   ? "text-[#C1C2C3]"
//                   : "text-[#4F5E71] dark:text-[#f1f1fd]"
//               )}
//             >
//               See all
//               <ChevronRight className="w-5 h-5" />
//             </Link>
//           )}
//         </CardTitle>
//       </CardHeader>
//       <CardContent
//         className={clsx(
//           "custom-flex-col gap-4 p-4 pt-0 flex-1 overflow-auto no-scrollbar",
//           {
//             "py-[55px] px-[40px]": notifications.length === 0,
//           }
//         )}
//       >
//         {notifications.map((notification, index) => (
//           <div key={index} className="flex items-center justify-between">
//             <Link
//               href={
//                 sectionHeader === "Staffs"
//                   ? `/management/staff-branch/${branchId}/branch-staff/${notification.staff_ID}`
//                   : sectionHeader === "Recent Messages"
//                   ? `/messages/${notification.id}`
//                   : "#"
//               }
//               className="flex items-center gap-3 w-[70%]"
//             >
//               <div className="custom-secondary-bg rounded-full p-[1px]">
//                 <Picture
//                   src={notification.avatarSrc || empty}
//                   alt="profile picture"
//                   size={36}
//                   rounded
//                 />
//               </div>
//               <div className="w-full gap-1">
//                 {/* <div className=""> */}
//                 <p className="text-sm font-medium text-text-primary dark:text-[#f1f1fd] flex items-center line-clamp-1 text-ellipsis">
//                   {notification.name}
//                   {sectionHeader !== "Staffs" && (
//                     <BadgeIcon color={notification.badgeColor || "red"} />
//                   )}
//                 </p>
//                 {/* <p className="text-[10px] text-text-disabled">
//                   {sectionHeader === "Staffs" ? "Message" : notification.time}
//                 </p> */}
//                 {/* </div> */}
//                 {notification.title && (
//                   <p className="line-clamp-1 text-ellipsis text-xs text-text-secondary capitalize dark:text-text-disabled">
//                     {notification.title === "manager"
//                       ? "Branch Manager"
//                       : notification.title}
//                   </p>
//                 )}
//                 <p className="text-xs text-text-tertiary font-normal capitalize">
//                   {sectionHeader !== "Staffs"
//                     ? notification.message
//                     : notification.position === "manager"
//                       ? "Branch Manager"
//                       : notification.position
//                     }
//                 </p>
//               </div>
//             </Link>
//             {sectionHeader === "Staffs" ? (
//               <Link href={`/messages/${notification.user_id}`}>
//                 <p className="text-[10px] text-text-disabled">
//                   Message
//                 </p>
//               </Link>
//             ) : (
//               <div className="custom-flex-col items-center">
//                 <p className="text-[10px] text-text-disabled">
//                   {notification.time}
//                 </p>
//                 {notification.count && (
//                   <div className="bg-rbrand-9 px-2 py-1 rounded-full flex items-center justify-center">
//                     <p className="text-white text-[10px] font-medium">
//                       {notification.count}
//                     </p>
//                   </div>
//                 )}
//               </div>
//             )}
//           </div>
//         ))}
//         {notifications.length === 0 && (
//           <div className="flex flex-col items-center text-center gap-6">
//             {emptyState.icon && (
//               <Image
//                 alt={emptyState.altText}
//                 src={emptyState.icon}
//                 width={60}
//                 height={60}
//               />
//             )}
//             <p className="font-normal text-xs text-brand-9">
//               {emptyState.message}
//             </p>
//           </div>
//         )}
//       </CardContent>
//     </Card>
//   );
// };

// export default NotificationCard;













// "use client";

// import { useParams } from "next/navigation";
// import { useEffect, useRef, useState } from "react";

// // Types
// import type {
//   CompanyUsersAPIResponse,
//   ConversationsAPIResponse,
//   MessagesLayoutProps,
//   PageMessages,
// } from "./types";

// // Images
// import ClipBlue from "@/public/icons/clip-blue.svg";
// import MicrophoneBlue from "@/public/icons/microphone-blue.svg";
// import SendIcon from "@/public/icons/send-msg.svg";
// import PlayIcon from "@/public/icons/play-icon.svg";
// import PauseIcon from "@/public/icons/pause-icon.svg";
// import DeleteIcon from "@/public/icons/del.svg";

// // Imports
// import Input from "@/components/Form/Input/input";
// import Picture from "@/components/Picture/picture";
// import useWindowWidth from "@/hooks/useWindowWidth";
// import Button from "@/components/Form/Button/button";
// import MessageCard from "@/components/Message/message-card";
// import { message_card_data } from "@/components/Message/data";
// import FilterButton from "@/components/FilterButton/filter-button";
// import MessagesFilterMenu from "@/components/Message/messages-filter-menu";
// import useFetch from "@/hooks/useFetch";
// import {
//   SendMessage,
//   transformCompanyUsersData,
//   transformUsersMessages,
// } from "./data";
// import { useChatStore } from "@/store/message";
// import { AuthForm } from "@/components/Auth/auth-components";
// import clsx from "clsx";
// import { toast } from "sonner";
// import { objectToFormData } from "@/utils/checkFormDataForImageOrAvatar";
// import { Modal, ModalContent, ModalTrigger } from "@/components/Modal/modal";
// import MessageAttachment from "@/components/Message/message-attachment";
// import useRefetchOnEvent from "@/hooks/useRefetchOnEvent";
// import MessageCardSkeleton from "@/components/Skeleton/message-card-skeleton";
// import WavesurferPlayer from "@wavesurfer/react";
// import WaveSurfer from "wavesurfer.js";
// import RecordPlugin from "wavesurfer.js/dist/plugins/record.esm.js";
// import NoMessage from "./messages-component";
// import { PlusIcon } from "@/public/icons/icons";
// import SelectChatUsersModal from "@/components/Message/user-modal";
// import { CommentTextArea } from "../../management/agent-community/NewComment";

// const MessagesLayout: React.FC<MessagesLayoutProps> = ({ children }) => {
//   const { setChatData } = useChatStore();
//   const { id } = useParams();
//   const { isCustom } = useWindowWidth(900);
//   const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
//   const [message, setMessage] = useState("");
//   const [reqLoading, setReqLoading] = useState(false);
//   const [pageUsersMsg, setPageUsersMsg] = useState<PageMessages[]>(message_card_data);
//   const [isRecording, setIsRecording] = useState(false);
//   const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
//   const [audioUrl, setAudioUrl] = useState<string>("");
//   const [isPlaying, setIsPlaying] = useState(false);
//   const users_data = useChatStore((state) => state?.data?.users);

//   // Playback wavesurfer state (for playing the recorded audio)
//   const [playbackWS, setPlaybackWS] = useState<WaveSurfer | null>(null);
//   const onReady = (ws: any) => {
//     setPlaybackWS(ws);
//     setIsPlaying(false);
//   };
//   const onPlayPause = () => {
//     playbackWS && playbackWS.playPause();
//   };

//   // Ref for the recording waveform container (always rendered)
//   const micContainerRef = useRef<HTMLDivElement>(null);
//   // Recorder WaveSurfer instance reference (for recording)
//   const [recorderWS, setRecorderWS] = useState<WaveSurfer | null>(null);
//   // New ref to store the Record plugin instance
//   const recordPluginRef = useRef<any>(null);

//   // When audioBlob is set, create a URL string for playback
//   useEffect(() => {
//     if (audioBlob) {
//       const url = URL.createObjectURL(audioBlob);
//       setAudioUrl(url);
//       return () => URL.revokeObjectURL(url);
//     } else {
//       setAudioUrl("");
//     }
//   }, [audioBlob]);

//   useEffect(() => {
//     setMessage(message);
//   }, [message]);

//   const handleMenuClose = () => {
//     setAnchorEl(null);
//   };

//   const handleEmojiSelect = (emoji: string) => {
//     setMessage((prev) => prev + emoji);
//   };

//   const handleMessageChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
//     setMessage(event.target.value);
//   };

//   const { data: usersData, loading: loadingUsers, error } = useFetch<CompanyUsersAPIResponse>("/company/users");

//   const {
//     data: usersMessages,
//     loading: usersMsgLoading,
//     error: usersMsgError,
//     refetch,
//   } = useFetch<ConversationsAPIResponse>("/messages");
//   useRefetchOnEvent("refetch-users-msg", () => {
//     refetch({ silent: true });
//   });

//   useEffect(() => {
//     if (usersMessages) {
//       const transformed = transformUsersMessages(usersMessages);
//       setPageUsersMsg(transformed);
//       setChatData("users_messages", transformed);
//     }
//   }, [usersMessages]);

//   useEffect(() => {
//     if (usersData) {
//       setChatData("users", transformCompanyUsersData(usersData));
//     }
//   }, [usersData]);

//   // console.log("users data", pageUser)

//   // Function to send a text message
//   const handleSendMsg = async () => {
//     const payload = {
//       content: message,
//       content_type: "text",
//       receiver_type: "user",
//     };
//     try {
//       setReqLoading(true);
//       const res = await SendMessage(objectToFormData(payload), `${id}`);
//       if (res) {
//         setMessage("");
//         window.dispatchEvent(new Event("refetch-users-msg"));
//       }
//     } catch (err) {
//       toast.error("Failed to send msg");
//     } finally {
//       setReqLoading(false);
//     }
//   };

//   // When isRecording becomes true, initialize the recorder
//   useEffect(() => {
//     if (isRecording && micContainerRef.current) {
//       const ws = WaveSurfer.create({
//         container: micContainerRef.current,
//         waveColor: "rgb(100, 0, 100)",
//         progressColor: "rgb(200, 0, 200)",
//         height: 27,
//         fillParent: true, // ensure the canvas fills the container
//         minPxPerSec: 30,
//       });
//       // Register the Record plugin and store it in a ref
//       const recordPlugin = ws.registerPlugin(
//         RecordPlugin.create({
//           renderRecordedAudio: false,
//           scrollingWaveform: false,
//           continuousWaveform: true,
//           continuousWaveformDuration: 30,
//         })
//       );
//       recordPluginRef.current = recordPlugin;
//       // Listen for record-end event to capture the audio blob
//       recordPlugin.on("record-end", (blob: Blob) => {
//         setAudioBlob(blob);
//         ws.destroy();
//         setRecorderWS(null);
//         recordPluginRef.current = null;
//       });
//       // Start recording using the plugin's API
//       recordPlugin.startRecording();
//       setRecorderWS(ws);
//     }
//   }, [isRecording]);

//   const handleStartRecording = () => {
//     // console.log("record start");
//     setIsRecording(true);
//   };

//   const handleStopRecording = () => {
//     if (recordPluginRef.current) {
//       // Use the plugin instance to stop recording
//       recordPluginRef.current.stopRecording();
//     } else {
//       console.warn("Record plugin instance is not available");
//     }
//     setIsRecording(false);
//   };

//   const handleSendAudio = async () => {
//     if (!audioBlob) return;
//     const audioFile = new File([audioBlob], "voice-note.wav", { type: audioBlob.type });
//     const payload = {
//       content_file: audioFile,
//       content_type: "audio",
//       receiver_type: "user",
//     };
//     try {
//       setReqLoading(true);
//       const res = await SendMessage(objectToFormData(payload), `${id}`);
//       if (res) {
//         setAudioBlob(null);
//         setAudioUrl("");
//         window.dispatchEvent(new Event("refetch-users-msg"));
//       }
//     } catch (err) {
//       toast.error("Failed to send audio message");
//     } finally {
//       setReqLoading(false);
//     }
//   };

//   return (
//     <>
//       {isCustom && id ? null : (
//         <div className="flex flex-1 p-4 pr-0">
//           <div className="custom-flex-col pr-2 w-full overflow-y-auto custom-round-scrollbar relative">
//             <div className="flex gap-4 sticky top-0 z-[2] bg-white dark:bg-black pb-2">
//               <div className="flex-1 relative">
//                 <Input
//                   id="search"
//                   className="w-full"
//                   placeholder="Search for messages"
//                   leftIcon={"/icons/search-icon.svg"}
//                   inputClassName="pr-[52px] border-transparent"
//                 />
//                 <div className="absolute top-1/2 right-0 -translate-y-1/2">
//                   <FilterButton
//                     noTitle
//                     className="bg-transparent py-[10px] px-4"
//                     onClick={(e) => setAnchorEl(e.currentTarget)}
//                   />
//                   <MessagesFilterMenu
//                     anchorEl={anchorEl}
//                     open={Boolean(anchorEl)}
//                     onClose={handleMenuClose}
//                     filterOptions={[
//                       { label: "Inbox" },
//                       { label: "Groups" },
//                       { label: "Unread" },
//                     ]}
//                   />
//                 </div>
//               </div>
//               <Button
//                 href="/reviews"
//                 variant="sky_blue"
//                 size="xs_medium"
//                 className="py-2 px-7 dark:bg-darkBrand-primary"
//               >
//                 see reviews
//               </Button>
//             </div>
//             {pageUsersMsg.length === 0 ? (
//               <NoMessage loading={loadingUsers} />
//             ) : (
//               <>
//                 {usersMsgLoading ? (
//                   <div className="custom-flex-col gap-2 relative z-[1] pb-4">
//                     {[...Array(5)].map((_, idx) => (
//                       <MessageCardSkeleton key={idx} />
//                     ))}
//                   </div>
//                 ) : (
//                   <div className="custom-flex-col relative z-[1] pb-4">
//                     {pageUsersMsg.map((message, idx) => (
//                       <MessageCard key={idx} {...message} highlight={message.id === id} />
//                     ))}
//                   </div>
//                 )}
//               </>
//             )}
//             {/* STICKY PLUS */}
//             <div className="absolute bottom-5 z-[10]">
//               <Modal>
//                 <ModalTrigger asChild>
//                   <button
//                     onClick={() => { }}
//                     className="bg-brand-9 rounded-full text-white p-4 shadow-lg"
//                   >
//                     <PlusIcon />
//                   </button>
//                 </ModalTrigger>
//                 <ModalContent>
//                   <SelectChatUsersModal
//                     loading={usersMsgLoading}
//                     usersData={users_data?.users}
//                     filters={users_data?.filters}
//                   />
//                 </ModalContent>
//               </Modal>
//             </div>
//           </div>
//         </div>
//       )}
//       {(!isCustom || id) && (
//         <div className="flex-1">
//           <div className="custom-flex-col w-full h-full">
//             {children}
//             {id && (
//               <AuthForm onFormSubmit={() => { }}>
//                 <div className="py-4 px-6 flex w-full items-center gap-4">
//                   {(!isRecording && !audioBlob) && (
//                     <div className="flex w-full items-center gap-4">
//                       <Modal>
//                         <ModalTrigger asChild>
//                           <button type="button">
//                             <Picture src={ClipBlue} alt="attachment" size={24} />
//                           </button>
//                         </ModalTrigger>
//                         <ModalContent>
//                           <MessageAttachment onEmojiSelect={handleEmojiSelect} id={id as string} />
//                         </ModalContent>
//                       </Modal>
//                       <CommentTextArea
//                         name="chat"
//                         id="chat"
//                         placeholder="Type your message here"
//                         className="w-full text-sm"
//                         value={message}
//                         onChange={handleMessageChange}
//                       />
//                     </div>
//                   )}
//                   {message ? (
//                     <button
//                       type="button"
//                       className={clsx({
//                         "animate-spin h-5 w-5 border-b-2 border-blue-500 rounded-full mr-2": reqLoading,
//                       })}
//                       onClick={handleSendMsg}
//                     >
//                       <Picture src={SendIcon} alt="text message" size={24} />
//                     </button>
//                   ) : (
//                     <>
//                       {(!audioBlob && !isRecording) && (
//                         <button type="button" onClick={handleStartRecording}>
//                           <Picture src={MicrophoneBlue} alt="voice note" size={24} />
//                         </button>
//                       )}
//                       {isRecording && (
//                         <button type="button" onClick={() => { }}>
//                           <Picture src={PauseIcon} alt="voice note" size={24} />
//                         </button>
//                       )}
//                       {isRecording && (
//                         <button
//                           type="button"
//                           onClick={handleStopRecording}
//                           className="flex items-center space-x-2"
//                         >
//                           <span className="text-sm text-red-500">Stop Recording</span>
//                         </button>
//                       )}
//                     </>
//                   )}
//                   {audioBlob && (
//                     <div className="flex w-full items-center justify-end gap-2">
//                       <button type="button" onClick={() => setAudioBlob(null)}>
//                         <Picture src={DeleteIcon} alt="delete voice" size={28} />
//                       </button>
//                       <WavesurferPlayer
//                         height={40}
//                         width={400}
//                         waveColor="rgb(100, 0, 100)"
//                         progressColor="rgb(200, 0, 200)"
//                         url={audioUrl}
//                         onReady={onReady}
//                         onPlay={() => setIsPlaying(true)}
//                         onPause={() => setIsPlaying(false)}
//                       />
//                       <div className="flex gap-2">
//                         <button type="button" onClick={onPlayPause}>
//                           <Picture src={isPlaying ? PauseIcon : PlayIcon} alt="voice pause-play" size={24} />
//                         </button>
//                         <button type="button" onClick={handleSendAudio} disabled={reqLoading}>
//                           {reqLoading ? (
//                             <div className="w-5 h-5 border-4 border-gray-200 border-t-blue-500 rounded-full animate-spin"></div>
//                           ) : (
//                             <Picture src={SendIcon} alt="voice note" size={24} />
//                           )}
//                         </button>
//                       </div>
//                     </div>
//                   )}
//                   {/* Always render the recording container; show/hide via style */}
//                   <div
//                     ref={micContainerRef}
//                     id="mic"
//                     className="max-w-[200px] mt-4 h-full custom-round-scrollbar overflow-x-auto flex items-center justify-center mb-4"
//                     style={{ display: isRecording ? "block" : "none" }}
//                   ></div> 
//                 </div>
//               </AuthForm>
//             )}
//           </div>
//         </div>
//       )}
//     </>
//   ); 
// };

// export default MessagesLayout;


















// type UnitViewResponse = {
//   data: {
//     previous_records: {
//       data: any[];
//       pagination: {
//         current_page: number;
//         total_pages: number;
//       };
//     };
//   };
// };


// type PreviousRentRecordsProps = {
//   isRental: boolean;
//   previous_records?: PreviousRecords;
//   unit_id?: string;
// };

// export const PreviousRentRecords: React.FC<PreviousRentRecordsProps> = ({
//   isRental,
//   previous_records,
//   unit_id,
// }) => {
//   console.log(unit_id)
//   // console.log("data records reach", previous_records)
//   // if (!unit_id) return null;
//   const [records, setRecords] = useState<any[]>(previous_records?.data || []);
//   const { setRecords: setOccupantRecords } =
//     useOccupantStore();


//   // Set up pagination state using provided pagination info if any
//   const [pagination, setPagination] = useState<{
//     current_page: number;
//     total_pages: number;
//     hasMore: boolean;
//   }>({
//     current_page: previous_records?.pagination?.current_page || 1,
//     total_pages: previous_records?.pagination?.total_pages || 1,
//     hasMore:
//       (previous_records?.pagination?.current_page || 1) <
//       (previous_records?.pagination?.total_pages || 1),
//   });

//   const observer = useRef<IntersectionObserver | null>(null);

//   // Memoize the fetch options so they don’t change on every render.
//   const fetchOptions = useMemo(
//     () => ({
//       params: { page: pagination.current_page },
//     }),
//     [pagination.current_page]
//   );

//   // Pass the expected response type to useFetch so that TS knows about previous_records
//   const { data, loading, silentLoading, error, isNetworkError } =
//     useFetch<UnitViewResponse>(`/unit/${unit_id}/view`, fetchOptions);

//   // Helper: debounce function to limit rapid calls.
//   const debounce = (func: Function, delay: number) => {
//     let timer: NodeJS.Timeout;
//     return (...args: any[]) => {
//       clearTimeout(timer);
//       timer = setTimeout(() => func(...args), delay);
//     };
//   };

//   // When there are more pages and not silently loading, increment the current page.
//   const fetchNextPage = useCallback(
//     debounce(() => {
//       if (pagination.hasMore && !silentLoading) {
//         setPagination((prev) => ({
//           ...prev,
//           current_page: prev.current_page + 1,
//         }));
//       }
//     }, 500),
//     [pagination.hasMore, silentLoading]
//   );

//   // Intersection Observer: attach to the last record's ref.
//   const lastRowRef = useCallback(
//     (node: HTMLElement | null) => {
//       if (observer.current) observer.current.disconnect();
//       observer.current = new IntersectionObserver((entries) => {
//         if (entries[0].isIntersecting && pagination.hasMore) {
//           fetchNextPage();
//         }
//       });
//       if (node) observer.current.observe(node);
//     },
//     [fetchNextPage, pagination.hasMore]
//   );

//   // Update records and pagination when new API data arrives.
//   useEffect(() => {
//     if (data && data.data.previous_records) {
//       const newRecords = data.data.previous_records.data || [];
//       setRecords((prevRecords) => {
//         const combined = [...prevRecords, ...newRecords];
//         const unique = combined.filter(
//           (record, index, self) =>
//             index === self.findIndex((r) => r.id === record.id)
//         );
//         return unique;
//       });
//       const newPagination = data.data.previous_records.pagination;
//       if (newPagination) {
//         setPagination((prev) => ({
//           ...prev,
//           current_page: newPagination.current_page,
//           total_pages: newPagination.total_pages,
//           hasMore: newPagination.current_page < newPagination.total_pages,
//         }));
//       }
//     }
//   }, [data]);

//   const tableData = records.map((record, index) => ({
//     ...record,
//     amount_paid: `₦${formatNumber(record.amount_paid) || 0}`,
//     start_date: record.start_date
//       ? dayjs(record.start_date).format("MMM D, YYYY").toLowerCase()
//       : null,
//     due_date: record.due_date
//       ? dayjs(record.due_date).format("MMM D, YYYY").toLowerCase()
//       : null,
//     payment_date: record.payment_date
//       ? dayjs(record.payment_date).format("MMM D, YYYY").toLowerCase()
//       : null,
//     ref: index === records.length - 1 ? lastRowRef : null,
//   }));

//   useEffect(()=> {
//     setOccupantRecords(tableData)
//   },[data])
//   console.log("records last", tableData)

  
//   if (isNetworkError) return <NetworkError />;
//   if (error) return <p className="text-base text-red-500 font-medium">{error}</p>;


//   console.log("redcord", tableData)
//   return (
//     <div className="previous-records-container">
//       {loading ? (
//         <TableLoading length={10} />
//       ) : (
//         <div>
//           <RentSectionTitle>
//             {isRental ? "Previous Rent Records" : "Previous Fee Records"}
//           </RentSectionTitle>
//           <SectionSeparator className="mt-4 mb-6 h-[2px]" />
//           <CustomTable
//             data={tableData}
//             fields={previousRentRecordsTableFields}
//             tableHeadCellSx={{
//               fontSize: "1rem",
//               paddingTop: "18px",
//               paddingBottom: "18px",
//             }}
//             tableBodyCellSx={{
//               fontSize: "1rem",
//               paddingTop: "18px",
//               paddingBottom: "18px",
//             }}
//           />
//         </div>
//       )}
//       {silentLoading && (
//         <div className="flex items-center justify-center py-4">
//           <div className="loader" />
//         </div>
//       )}
//     </div>
//   );
// };
