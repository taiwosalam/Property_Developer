LAYOUT ROUTES
- all / routes are for director role
- all /manager routes are for manager role
- all /accountant route are for account role


FILTER MODAL
- A component for filtering 
- it accept these props

--- filterOptionsMenu > an array object of filter options
export const maintenanceFilterOptionsWithDropdown: FilterOptionMenu[] = [
  {
    label: "Property",
    value: [
      { label: "Property 1", value: "Property1" },
      { label: "Property 2", value: "Property2" },
      { label: "Property 3", value: "Property3" },
    ],
  },
  {
    radio: true,
    label: "Status",
    value: [
      { label: "all", value: "all", isChecked: true }, use isChecked to check any value by default
      { label: "Pending", value: "Pending" },
      { label: "Ongoing", value: "Ongoing" },
      { label: "Completed", value: "Completed" },
    ],
  },
];


---FilterOptions > an object for filter option without menu
check management/vehicles-record filter for reference
    filterOptions={{
          radio: true, --- to change the checkbox to radio option
          value: [
            { label: "All", value: "all" },
            { label: "Rental", value: "rental" },
            { label: "Facility", value: "facility" },
          ],
        }}





               {/* {addedUnits.length > 0 && (
          <FixedFooter>
            <div className="flex justify-end w-full">
              <Modal>
                <ModalTrigger>
                  <Button> Add More Units</Button>
                </ModalTrigger>
                <ModalContent>
                  <UnitFormContext.Consumer>
                    {(context) => (
                      <FooterModal
                        duplicate={context?.duplicate}
                        setDuplicate={context?.setDuplicate}
                        submitLoading={context?.submitLoading}
                      />
                    )}
                  </UnitFormContext.Consumer>
                </ModalContent>
              </Modal>
            </div>
          </FixedFooter>
        )} */}













        // "use client";
// import { useState, useEffect } from "react";
// import PageCircleLoader from "@/components/Loader/PageCircleLoader";
// import PropertyDetails from "@/components/Management/Properties/property-details";
// import PropertySettings from "@/components/Management/Properties/property-settings";
// import { useAddUnitStore } from "@/store/add-unit-store";
// import AddUnitFormCard from "@/components/Management/Properties/add-unit-form-card";
// import UnitForm from "@/components/Management/Properties/unit-form";
// import PageProgressBar from "@/components/PageProgressBar/page-progress-bar";
// import useFetch from "@/hooks/useFetch";
// import BackButton from "@/components/BackButton/back-button";
// import { SinglePropertyResponse } from "../../../[id]/data";
// import NetworkError from "@/components/Error/NetworkError";
// import { transformPropertyData } from "./data";
// // import { useCustomBackNavigation } from "@/hooks/useCustomBackNavigation";
// import { useRouter } from "next/navigation";
// import AddUntFooter from "@/components/Management/Properties/AddUnitFooter";
// import FixedFooter from "@/components/FixedFooter/fixed-footer";
// import Button from "@/components/Form/Button/button";
// import { Modal, ModalContent, ModalTrigger } from "@/components/Modal/modal";
// import FooterModal from "@/components/Management/Properties/footer-modal";
// import { UnitFormContext } from "@/components/Management/Properties/unit-form-context";

// const AddUnit = ({ params }: { params: { propertyId: string } }) => {
//   const { propertyId } = params;
//   const customBackPath = `/management/properties/${propertyId}/edit-property`;
//   const router = useRouter();
//   const [dataNotFound, setDataNotFound] = useState(false);

//   const [hideEmptyForm, setHideEmptyForm] = useState(false);

//   const addedUnits = useAddUnitStore((s) => s.addedUnits);

//   const setAddUnitStore = useAddUnitStore((s) => s.setAddUnitStore);
//   // const resetStore = useAddUnitStore((s) => s.resetStore);
//   // resetStore();
//   const {
//     data: propertyData,
//     loading,
//     isNetworkError,
//     error,
//   } = useFetch<SinglePropertyResponse>(`property/${propertyId}/view`);

//   useEffect(() => {
//     if (propertyData) {
//       const transformedData = transformPropertyData(propertyData);
//       if (!transformedData) {
//         setDataNotFound(true);
//         return;
//       }
//       if (transformedData.propertyType === "facility") {
//         router.push(
//           `/management/properties/create-gated-estate-property/${propertyId}/add-unit`
//         );
//       }
//       setDataNotFound(false);
//       setAddUnitStore("property_id", transformedData.property_id);
//       setAddUnitStore("propertyType", transformedData.propertyType);
//       setAddUnitStore("propertyDetails", transformedData.propertyDetails);
//       setAddUnitStore("propertySettings", transformedData.propertySettings);
//       setAddUnitStore("addedUnits", transformedData.addedUnits);
//     }
//   }, [propertyData, setAddUnitStore, router, propertyId]);

//   // useCustomBackNavigation({ customBackPath });
//   // console.log("addedUnits", addedUnits);

//   if (loading) return <PageCircleLoader />;
//   if (isNetworkError) return <NetworkError />;
//   if (error) return <div className="text-red-500">{error}</div>;
//   if (dataNotFound)
//     return <div className="text-red-500">Property Data not found</div>;

//   return (
//     <div className="pb-[100px]">
//       <BackButton customBackPath={customBackPath}>Add Units</BackButton>
//       <PageProgressBar
//         breakpoints={[25, 50, 75]}
//         percentage={37}
//         className="mb-[52px]"
//       />
//       <div className="space-y-6 lg:space-y-8">
//         <PropertyDetails heading="Property Details" />
//         <PropertySettings heading="Property Settings" />
//         {addedUnits.length > 0 && (
//           <>
//             <h4 className="text-primary-navy text-lg lg:text-xl font-bold">
//               {hideEmptyForm ? "Units Summary" : "Added Units"}
//             </h4>
//             <hr className="!my-4 border-none bg-borders-dark h-[1px]" />
//             {addedUnits.map((unit, index) => (
//               <AddUnitFormCard key={index} index={index} data={unit} />
//             ))}
//           </>
//         )}
//         {!hideEmptyForm && (
//           <UnitForm empty hideEmptyForm={() => setHideEmptyForm(true)} />
//         )}
//       </div>
//     </div>
//   );
// };

// export default AddUnit;















// import { NextRequest, NextResponse } from "next/server";
// import { roleBasedRoutes } from "./data";

// export async function middleware(req: NextRequest) {
//   const emailVerified = req.cookies.get("emailVerified")?.value;
//   const currentPath = req.nextUrl.pathname;
//   const role = req.cookies.get("role")?.value;
//   const company_status = req.cookies.get("company_status")?.value;

//   console.log("server role", role);
//   console.log("server company_status", company_status);

//   // Public routes accessible without authentication
//   const publicRoutes = [
//     "/auth/user/sign-in",
//     "/auth/sign-in",
//     "/auth/sign-up",
//     "/auth/setup",
//     "/auth/forgot-password",
//     "/management/agent-community",
//   ];

//   if (publicRoutes.includes(currentPath)) {
//     return NextResponse.next();
//   }

//   // Allow access to `/auth/user/sign-in`
//   if (currentPath === "/auth/user/sign-in") {
//     return NextResponse.next();
//   }

//   // Allow `/auth/sign-in` for directors; redirect others to `/auth/user/sign-in`
//   if (currentPath === "/auth/sign-in") {
//     if (role === "director") return NextResponse.next();
//     return NextResponse.redirect(new URL("/auth/user/sign-in", req.url));
//   }

//   // Define dashboard paths that should bypass the company_status check
//   const dashboardPaths = [
//     '/dashboard',
//     '/accountant/dashboard',
//     '/manager/dashboard',
//     '/staff/dashboard',
//     '/user/dashboard',
//   ];

//   // Company status check: if currentPath does NOT start with one of the dashboard paths,
//   // then if company_status is "pending" or "rejected", redirect to unauthorized.
//   if (
//     !dashboardPaths.some((path) => currentPath.startsWith(path)) &&
//     (company_status === 'pending' || company_status === 'rejected')
//   ) {
//     return NextResponse.redirect(new URL('/unauthorized', req.url));
//   }

//   // Role-based route restrictions
//   const allowedRoutes =
//     roleBasedRoutes[role as keyof typeof roleBasedRoutes] || [];
//   if (!allowedRoutes.some((route) => currentPath.startsWith(route))) {
//     return NextResponse.redirect(new URL("/unauthorized", req.url));
//   }

//   // Allow access and set headers for debugging or downstream use
//   const response = NextResponse.next();
//   response.headers.set("x-authorization-status", "authorized");
//   return response;
// }

// export const config = {
//   matcher: [
//     "/dashboard/:path*",
//     "/wallet/:path*",
//     "/auth/:path*",
//     "/manager/:path*",
//     "/management/:path*",
//     "/tasks/:path*",
//     "/reports/:path*",
//     "/listing/:path*",
//     "/accounting/:path*",
//     "/applications/:path*",
//     "/documents/:path*",
//     "/settings/:path*",
//     "/messages/:path*",
//     "/notifications/:path*",
//   ],
// };













  // const handleSubmit = async (formData: Record<string, any>) => {
  //   if (!propertyId) return;
  //   if (propertyType !== "facility" && state.images.length === 0) {
  //     toast.warning("Please add at least one picture");
  //     return;
  //   }
  //   // Check if strings contain at least one digit
  //   const hasNoDigits = (str: string) => !/\d/.test(str);
  //   if (
  //     (formData.number_of && hasNoDigits(formData.number_of)) ||
  //     (formData.total_area_sqm && hasNoDigits(formData.total_area_sqm))
  //   ) {
  //     toast.warning("Please enter valid measurement values");
  //     return;
  //   }
  //   setSubmitLoading(true);
  //   convertYesNoToBoolean(formData, yesNoFields);
  //   const transformedData = transformUnitFormData(
  //     formData,
  //     state.imageFiles,
  //     propertyId
  //   );
  //   if (props.empty) {
  //     const unitId = await createUnit(propertyId, transformedData);
  //     if (unitId) {
  //       if (saveClick) {
  //         setSubmitLoading(false);
  //         resetForm();
  //         formRef.current?.reset();
  //         router.push("/management/properties/");
  //         return;
  //       }
  //       const unitData = await getUnitById(unitId);
  //       if (unitData) {
  //         if (duplicate?.val) {
  //           addUnit(unitData, duplicate.count);
  //           setDuplicate({
  //             val: false,
  //             count: 1,
  //           });
  //           props.hideEmptyForm();
  //         } else {
  //           addUnit(unitData);
  //         }
  //         formRef.current?.reset();
  //         resetForm();
  //       }
  //     }
  //   } else {
  //     if (props.data.notYetUploaded) {
  //       const unitId = await createUnit(propertyId, transformedData);
  //       if (unitId) {
  //         const unitData = await getUnitById(unitId);
  //         if (unitData) {
  //           editUnit(props.index, unitData);
  //         }
  //       }
  //     } else {
  //       const { newImages, retainedImages } = transformedData.images.reduce<{
  //         newImages: File[];
  //         retainedImages: string[];
  //       }>(
  //         (acc, image) => {
  //           if (image instanceof File) {
  //             acc.newImages.push(image);
  //           } else {
  //             const matchingImage = props.data.images.find(
  //               (img) => img.path === image
  //             );
  //             if (matchingImage) {
  //               acc.retainedImages.push(matchingImage.id);
  //             }
  //           }
  //           return acc;
  //         },
  //         { newImages: [], retainedImages: [] }
  //       );
  //       const editUnitPayload = {
  //         ...transformedData,
  //         images: newImages,
  //         retain_images: retainedImages,
  //       };
  //       const unitId = await editUnitApi(props.data.id, editUnitPayload);
  //       if (unitId) {
  //         const unitData = await getUnitById(unitId);
  //         if (unitData) {
  //           editUnit(props.index, unitData);
  //         }
  //       }
  //     }
  //     props.setIsEditing(false);
  //   }
  //   setSubmitLoading(false);
  // };




// import Input from "@/components/Form/Input/input";
// import Select from "@/components/Form/Select/select";
// import { rentPeriods } from "@/data";
// import { useAddUnitStore } from "@/store/add-unit-store";
// import { useState, useEffect, useMemo } from "react";
// import { DeleteIconX } from "@/public/icons/icons";
// import {
//   formatNumber,
//   currencySymbols,
//   formatCostInputValue,
// } from "@/utils/number-formatter";
// import { useUnitForm } from "./unit-form-context";

// const UnitBreakdownFacility = () => {
//   const { formResetKey, unitData } = useUnitForm();
//   const propertySettings = useAddUnitStore((s) => s.propertySettings);
//   const CURRENCY_SYMBOL =
//     currencySymbols[propertySettings?.currency || "naira"];
//   const [otherChargesInput, setOtherChargesInput] = useState(
//     !!parseFloat(unitData?.other_charge || "0")
//   );

//   const initialFormValues = useMemo(() => {
//     return {
//       rentAmount: unitData?.fee_amount
//         ? formatNumber(parseFloat(unitData.fee_amount))
//         : "",
//       securityFee: unitData?.security_fee
//         ? formatNumber(parseFloat(unitData.security_fee))
//         : "",
//       serviceCharge: unitData?.service_charge
//         ? formatNumber(parseFloat(unitData.service_charge))
//         : "",
//       otherCharges: unitData?.other_charge
//         ? formatNumber(parseFloat(unitData.other_charge))
//         : "",
//       // Initialize VAT to "0"
//       vat: unitData?.renew_vat
//         ? formatNumber(parseFloat(unitData.renew_vat as string))
//         : "0",
//       totalPackage: unitData?.total_package
//         ? formatNumber(parseFloat(unitData.total_package))
//         : "",
//     };
//   }, [
//     unitData?.fee_amount,
//     unitData?.security_fee,
//     unitData?.service_charge,
//     unitData?.other_charge,
//     unitData?.renew_vat,
//     unitData?.total_package,
//   ]);

//   const [formValues, setFormValues] = useState(initialFormValues);
//   const {
//     rentAmount,
//     securityFee,
//     serviceCharge,
//     otherCharges,
//     vat,
//     totalPackage,
//   } = formValues;

//   type FormField = keyof typeof formValues;
//   // Update formValues based on input changes
//   const handleInputChange = (field: FormField, value: string) => {
//     setFormValues((prevValues) => ({
//       ...prevValues,
//       [field]: formatCostInputValue(value),
//     }));
//   };

//   const addOtherCharges = () => {
//     setOtherChargesInput(true);
//   };

//   const handleRemoveOtherCharges = () => {
//     setOtherChargesInput(false);
//     setFormValues((prevValues) => ({
//       ...prevValues,
//       otherCharges: "0",
//     }));
//   };

//   // calculate VAT price from rentAmount
//   useEffect(() => {
//     const rentAmountValue = parseFloat(rentAmount.replace(/,/g, "")) || 0;
//     const shouldCalculateVAT = propertySettings?.VAT?.toLowerCase() === "yes";
//     const rentTenPercent = rentAmountValue * 0.1;
//     const calculatedVAT = shouldCalculateVAT ? rentTenPercent * 0.075 : 0;

//     setFormValues((prevValues) => ({
//       ...prevValues,
//       vat: formatNumber(calculatedVAT.toFixed(2)),
//     }));
//   }, [rentAmount, propertySettings?.VAT]);

//   // Calculate the total package
//   useEffect(() => {
//     const total =
//       (parseFloat(rentAmount.replace(/,/g, "")) || 0) +
//       (parseFloat(securityFee.replace(/,/g, "")) || 0) +
//       (parseFloat(serviceCharge.replace(/,/g, "")) || 0) +
//       (parseFloat(otherCharges.replace(/,/g, "")) || 0) +
//       (parseFloat(vat.replace(/,/g, "")) || 0);

//     setFormValues((prevValues) => ({
//       ...prevValues,
//       totalPackage: formatNumber(parseFloat(total.toFixed(2))),
//     }));
//   }, [rentAmount, securityFee, serviceCharge, otherCharges, vat]);

//   // reset form
//   useEffect(() => {
//     if (formResetKey !== 0) {
//       setOtherChargesInput(!!unitData?.other_charge);
//       setFormValues(initialFormValues);
//     }
//   }, [formResetKey, initialFormValues, unitData?.other_charge]);

//   return (
//     <div>
//       <h4 className="text-primary-navy dark:text-white text-lg md:text-xl font-bold">
//         Unit Fee Breakdown
//       </h4>
//       <hr className="my-4" />
//       <div className="grid gap-4 md:gap-5 md:grid-cols-2 lg:grid-cols-3">
//         <Select
//           id="fee_period"
//           required
//           options={rentPeriods}
//           label="Fee Period"
//           inputContainerClassName="bg-white"
//           resetKey={formResetKey}
//           hiddenInputClassName="unit-form-input"
//           defaultValue={unitData?.fee_period || "yearly"}
//         />
//         <Input
//           id="fee_amount"
//           label="Fee Amount"
//           required
//           inputClassName="bg-white unit-form-input"
//           CURRENCY_SYMBOL={CURRENCY_SYMBOL}
//           value={rentAmount}
//           onChange={(value) => handleInputChange("rentAmount", value)}
//           type="text"
//         />
//         <Input
//           id="security_fee"
//           label="Security Fee"
//           inputClassName="bg-white"
//           CURRENCY_SYMBOL={CURRENCY_SYMBOL}
//           value={securityFee}
//           onChange={(value) => handleInputChange("securityFee", value)}
//           type="text"
//         />
//         <Input
//           id="service_charge"
//           label="Service Charge"
//           inputClassName="bg-white"
//           CURRENCY_SYMBOL={CURRENCY_SYMBOL}
//           value={serviceCharge}
//           onChange={(value) => handleInputChange("serviceCharge", value)}
//           type="text"
//         />

//         {otherChargesInput && (
//           <div className="relative">
//             <Input
//               id="other_charge"
//               label="Other Charges"
//               inputClassName="bg-white"
//               CURRENCY_SYMBOL={CURRENCY_SYMBOL}
//               value={otherCharges}
//               onChange={(value) => handleInputChange("otherCharges", value)}
//               type="text"
//             />
//             <button
//               type="button"
//               aria-label="Remove Other Charges"
//               onClick={handleRemoveOtherCharges}
//               className="absolute top-0 right-0 w-[18px] h-[18px]"
//             >
//               <DeleteIconX size={20} />
//             </button>
//           </div>
//         )}
//         {!otherChargesInput && (
//           <button
//             type="button"
//             onClick={addOtherCharges}
//             className="text-brand-9 text-xs md:text-sm font-normal md:self-end md:justify-self-start"
//           >
//             Add Other Charges
//           </button>
//         )}
//         {/* Only display VAT input if VAT is enabled */}
//         {propertySettings?.VAT?.toLowerCase() === "yes" && (
//           <Input
//             id="renew_vat"
//             label="VAT Fee"
//             inputClassName="bg-white unit-form-input"
//             CURRENCY_SYMBOL={CURRENCY_SYMBOL}
//             value={vat}
//             readOnly
//             type="text"
//           />
//         )}
//         <Input
//           required
//           id="total_package"
//           label="Total Package"
//           inputClassName="bg-white unit-form-input"
//           CURRENCY_SYMBOL={CURRENCY_SYMBOL}
//           value={totalPackage}
//           readOnly
//           type="text"
//         />
//       </div>
//     </div>
//   );
// };

// export default UnitBreakdownFacility;













// export const transformUnitFormData = (
//   formData: Record<string, any>,
//   images: (File | string)[],
//   property_id: string,
//   originalImages: { id: string; path: string }[] = [] // Default to empty array if not provided
// ) => {
//   const parseFee = (value: string | undefined) => {
//     if (!value) {
//       return 0;
//     }
//     return parseFloat(value.replace(/,/g, ""));
//   };

//   const parseIntOrNull = (value: string | undefined | null) => {
//     if (!value) return 0;
//     const parsed = parseInt(value, 10);
//     return isNaN(parsed) ? null : parsed;
//   };

//   // Determine the default image ID (first image in the list)
//   let defaultImageId: string | null = null;
//   if (images.length > 0) {
//     const firstImage = images[0];
//     if (typeof firstImage === "string") {
//       const matchingImage = originalImages.find(
//         (img) => img.path === firstImage
//       );
//       if (matchingImage) {
//         defaultImageId = matchingImage.id;
//       }
//     }
//     // If the first image is a File (new upload), the server will assign its ID after upload
//     // In this case, defaultImageId remains null and can be handled server-side
//   }

//   const payload = {
//     unit_name: formData.unit_name,
//     unit_type: formData.unit_type,
//     unit_sub_type: formData.unit_sub_type ?? null,
//     unit_preference: formData.unit_preference,
//     measurement: formData.measurement ?? null,
//     total_area_sqm: formData.total_area_sqm ?? null,
//     number_of: formData.number_of ?? 0,
//     bedroom: parseIntOrNull(formData.bedroom),
//     bathroom: parseIntOrNull(formData.bathroom),
//     toilet: parseIntOrNull(formData.toilet),
//     facilities: formData.facilities
//       ? formData.facilities.split(",").map(decodeURIComponent)
//       : [],
//     en_suit: formData.en_suit ?? null,
//     prepaid: formData.prepaid ?? null,
//     wardrobe: formData.wardrobe ?? null,
//     pet_allowed: formData.pets_allowed ?? null,
//     fee_period: formData.fee_period ?? null,
//     fee_amount: parseFee(formData.fee_amount),
//     service_charge: parseFee(formData.service_charge),
//     agency_fee: parseFee(formData.agency_fee),
//     legal_fee: parseFee(formData.legal_fee),
//     caution_fee: parseFee(formData.caution_fee),
//     inspection_fee: parseFee(formData.inspection_fee),
//     other_charge: parseFee(formData.other_charge),
//     negotiation: formData.negotiation ?? null,
//     security_fee: parseFee(formData.security_fee),
//     total_package: parseFee(formData.total_package),
//     renew_fee_period: formData.renew_fee_period ?? null,
//     renew_fee_amount: parseFee(formData.renew_fee_amount),
//     renew_service_charge: parseFee(formData.renew_service_charge),
//     renew_other_charge: parseFee(formData.renew_other_charge),
//     renew_total_package: parseFee(formData.renew_total_package),
//     property_id,
//     images,
//     default_image: defaultImageId, // Set to the ID of the first existing image
//   };

//   return payload;
// };






