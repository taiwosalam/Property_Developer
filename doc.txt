 {/* NOTE: BACKEND CAN'T ACCEPT MULTIPLE AMOUNT AND TITLE FOR INVOICE */}
      <div className="space-y-6">
        <div className="flex gap-1 flex-col">
          <div className="flex gap-2">
            <h3 className="text-[#092C4C] font-bold text-xl dark:text-white">
              Add Payment
            </h3>
            {/* <Checkbox
              radio
              checked={isAddPaymentChecked}
              onChange={() => setIsAddPaymentChecked(true)}
            /> */}
          </div>
          <p>
            Choose to create a manual payment for a specific bill or set it to
            auto-payment for a designated period.
          </p>
        </div>
        {/* {isAddPaymentChecked && ( */}
        <div className="bg-white dark:bg-darkText-primary rounded-[8px] space-y-4 p-6">
          <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
            <Input
              type="text"
              id="payment_title"
              label="Payment Title"
              value={paymentTitle}
              onChange={(value) => setPaymentTitle(value as string)}
            />
            <Input
              type="text"
              id="amount"
              label="Amount"
              className="w-full"
              CURRENCY_SYMBOL={"₦"}
              formatNumber
              value={paymentAmount}
              onChange={(value) => setPaymentAmount(value as string)}
            />
          </div>
          <div className="flex items-center justify-end">
            <Button
              size="base_medium"
              className="py-2 px-8"
              onClick={handleAddPaymentClick}
            >
              Add
            </Button>
          </div>
        </div>
        {/* )} */}
      </div>


      {/* <div className="space-y-6">
        <div className="flex gap-1 flex-col">
          <div className="flex gap-2">
            <h3 className="text-[#092C4C] font-bold text-xl dark:text-white">
              Generated Rent Breakdown
            </h3>
            <Checkbox
              disabled={isSelectDisabled}
              radio
              checked={!isAddPaymentChecked}
              onChange={() => setIsAddPaymentChecked(false)}
            />
          </div>
          <p>
            Select to create a pending payment for tenants/occupants to pay
            their renewal fees.
          </p>
        </div>
        {!isAddPaymentChecked && <Breakdown />}
      </div> */}

      {payments.length > 0 && (
        <div className="space-y-6">
          <h3 className="text-[#092C4C] font-bold text-xl dark:text-white">
            Payment Added
          </h3>

          <div className="flex bg-white dark:bg-darkText-primary w-full p-6 rounded-lg flex-col gap-8">
            <div className="w-full max-w-[968px] grid sm:grid-cols-2 lg:grid-cols-3 gap-x-[34px] gap-y-6">
              {payments.map((payment, index) => (
                <div key={index} className="flex flex-col gap-4">
                  <p className="font-medium text-[16px] text-text-tertiary dark:darkText-1 capitalize">
                    {payment.title}
                  </p>
                  <div className="flex items-center gap-2">
                    <p className="font-bold text-[14px] text-text-secondary dark:text-darkText-2">
                      {new Intl.NumberFormat("en-NG", {
                        style: "currency",
                        currency: "NGN",
                      }).format(payment.amount)}
                    </p>
                    <Modal>
                      <ModalTrigger aria-label={`Delete ${payment.title}`}>
                        <DeleteIconX />
                      </ModalTrigger>
                      <ModalContent>
                        <DeleteItemWarningModal
                          item={payment.title}
                          amount={payment.amount}
                          handleDelete={() => handleDeletePayment(index)}
                          useCase="invoices"
                        />
                      </ModalContent>
                    </Modal>
                  </div>
                </div>
              ))}
            </div>
            <SectionSeparator />
            <div className="flex flex-col gap-4">
              <p className="font-medium text-[16px] text-text-tertiary dark:darkText-1">
                Total Added Payment
              </p>
              <p className="font-bold text-xl text-brand-9">
                {new Intl.NumberFormat("en-NG", {
                  style: "currency",
                  currency: "NGN",
                }).format(totalAmount)}
              </p>
            </div>
          </div>
        </div>
      )}

      {/* <div className="space-y-4 text-[#3F4247] text-sm dark:text-darkText-1">
        <div className="flex gap-4">
          {["Notification", "SMS Alert", "Email Alert"].map((option) => (
            <Checkbox sm key={option} defaultChecked>
              {option}
            </Checkbox>
          ))}
        </div>
        <p>
          Payment will be reflected on the receipt page once the selected client
          makes a payment for this generated invoice
        </p>
      </div> */}






      // StartRent.tsx
import { useRef } from "react";
import { AgreementPreview } from "@/components/Modal/tenant-document";

const StartRent = () => {
  const agreementRef = useRef<HTMLDivElement>(null);
  // ... other state and hooks ...

  const handleStartRent = async () => {
    // ... validation logic ...

    let doc_file: File | null = null;
    if (!IS_WEB_TENANT) {
      try {
        setPdfLoading(true);
        if (agreementRef.current) {
          const canvas = await html2canvas(agreementRef.current, { scale: 2 });
          const pdf = new jsPDF();
          const imageWidthInPoints = pdf.internal.pageSize.getWidth() - 20;
          const imageHeightInPoints = (canvas.height / canvas.width) * imageWidthInPoints;
          pdf.addImage(
            canvas.toDataURL("image/png"),
            "PNG",
            10,
            10,
            imageWidthInPoints,
            imageHeightInPoints
          );
          const pdfBlob = pdf.output("blob");
          doc_file = new File([pdfBlob], `agreement_${unit_data.unit_id}.pdf`, {
            type: "application/pdf",
          });
        } else {
          toast.error("Failed to generate agreement PDF.");
          return;
        }
      } catch (err) {
        console.error("PDF generation error:", err);
        toast.error("Failed to generate agreement PDF.");
        return;
      } finally {
        setPdfLoading(false);
      }
    }

    // ... FormData and API call ...
  };

  return (
    <div className="space-y-6 pb-[100px]">
      {/* Hidden AgreementPreview */}
      <div style={{ display: "none" }} ref={agreementRef}>
        <AgreementPreview renderUI={false} />
      </div>
      {/* ... rest of the component ... */}
    </div>
  );
};







  const handleStartRent = async () => {
    if (!unit_data?.unit_id || !selectedTenantId) {
      toast.error(
        `Missing required information: Unit or ${
          isRental ? "Tenant" : "Occupant"
        } not selected.`
      );
      return;
    }

    if (!selectedCheckboxOptions) {
      toast.error("Notification preferences not set.");
      return;
    }

    // Validate dueDate
    if (dueDate && dueDate.isBefore(dayjs(), "day")) {
      toast.warning("End date cannot be in the past.");
      return;
    }
    const successMsg = isRental
      ? "Rent Started Succesfully"
      : "Occupant Moved In Successfully";
    const failedMsg = isRental
      ? "Failed to start Rent, Try Again!"
      : "Failed to Move Occupant In, Try Again!";

    const IS_WEB_TENANT =
      selectedOccupant?.userTag?.toLocaleLowerCase() === "web";

    let doc_file: File | null = null;
    if (!IS_WEB_TENANT) {
      try {
        setPdfLoading(true);
        // Debug: Log documentData to inspect its structure
        console.log("documentData:", documentData);
        const agreementData: AgreementData = {
          documentData,
          unitName,
          isLoading: agreementLoading,
          error: agreementError,
        };
        const pdfBlob = await generateAgreementPDF(agreementData);
        if (pdfBlob) {
          doc_file = new File([pdfBlob], `agreement_${unit_data.unit_id}.pdf`, {
            type: "application/pdf",
          });
        } else {
          toast.error(
            "Failed to generate agreement PDF due to missing or invalid data."
          );
          return;
        }
      } catch (err) {
        console.error("PDF generation error:", err);
        toast.error("Failed to generate agreement PDF.");
        return;
      } finally {
        setPdfLoading(false);
      }
    }
    console.log("doc_file", doc_file);
    // const payload = {
    //   unit_id: unit_data.unit_id,
    //   tenant_id: selectedTenantId,
    //   start_date: startDate,
    //   payment_type: "full",
    //   rent_type: "new",
    //   mobile_notification: selectedCheckboxOptions.mobile_notification ? 1 : 0,
    //   email_alert: selectedCheckboxOptions.email_alert ? 1 : 0,
    //   has_invoice: selectedCheckboxOptions.create_invoice ? 1 : 0,
    // };
    // try {
    //   setReqLoading(true);
    //   const res = await startRent(payload);
    //   if (res) {
    //     toast.success(successMsg);
    //     router.push("/management/rent-unit");
    //   }
    // } catch (err) {
    //   toast.error(failedMsg);
    // } finally {
    //   setReqLoading(false);
    // }
  };




      {/* HIDDEN DOCUMENT FOR MOBILE TENANT/OCCUPANTS */}
      <div style={{ display: "none", width: "800px" }} ref={agreementRef}>
        <AgreementPreview renderUI={false} />
      </div>
















    
      let doc_file: File | null = null;
      if (!IS_WEB_TENANT) {
        try {
          setPdfLoading(true);
          // Debug: Log documentData to inspect its structure
          console.log("documentData:", documentData);
          const agreementData: AgreementData = {
            documentData,
            unitName,
            isLoading: agreementLoading,
            error: agreementError,
          };
          const pdfBlob = await generateAgreementPDF(agreementData);
          if (pdfBlob) {
            doc_file = new File([pdfBlob], `agreement_${unit_data.unit_id}.pdf`, {
              type: "application/pdf",
            });
          } else {
            toast.error("Failed to generate agreement PDF due to missing or invalid data.");
            return;
          }
        } catch (err) {
          console.error("PDF generation error:", err);
          toast.error("Failed to generate agreement PDF.");
          return;
        } finally {
          setPdfLoading(false);
        }
      }
    console.log("doc_file", doc_file);













      "use client";

import React, { useRef } from "react";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import {
  Parties,
  PropertyDescription,
  AttorneyInfo,
  LawFirmInfo,
  Attestation,
  ClauseList,
  WitnessSignatureDate,
} from "@/app/(nav)/documents/preview/component";
import {
  witnessLandlord,
  witnessTenant,
  witness,
} from "@/app/(nav)/documents/preview/data";
import { DocumentPreviewData } from "@/app/(nav)/documents/preview/types";
import Button from "../Form/Button/button";
import { useAgreementData } from "@/hooks/useAgreementData";
import { useAgreementExport } from "@/hooks/useAgreementExport";

interface AgreementPreviewProps {
  onClose?: () => void; // Optional callback for closing modal
  renderUI?: boolean; // Prop to toggle UI elements
}

export const AgreementPreview = ({
  onClose,
  renderUI = true,
}: AgreementPreviewProps) => {
  const router = useRouter();
  const firstPageRef = useRef<HTMLDivElement>(null);
  const restOfContentRef = useRef<HTMLDivElement>(null);

  // Fetch and transform agreement data
  const { documentData, unitName, isLoading, error } = useAgreementData();

  // Handle export functionality (used in modal UI)
  const { handleDownload, isDownloading } = useAgreementExport({
    firstPageRef,
    restOfContentRef,
  });

  // Handle errors
  if (error) {
    toast.error(error);
    if (onClose) {
      onClose();
    } else {
      router.back();
    }
    return null;
  }

  // Show loading state
  if (isLoading || !documentData) {
    return (
      <div className="text-center text-gray-600 dark:text-gray-400 py-4">
        Loading agreement...
      </div>
    );
  }

  const {
    parties,
    propertyDescription,
    attorney,
    lawFirm,
    attestation,
    witnessLawFirm,
    clauses,
  } = documentData;

  const content = (
    <div className="agreement-preview-content">
      <div ref={firstPageRef} className="agreement-preview-first-page">
        <Parties landlord={parties.landlord} tenant={parties.tenant} />
        <div className="agreement-preview-section">
          <PropertyDescription description={propertyDescription} />
          <AttorneyInfo attorney={attorney} />
        </div>
        <LawFirmInfo lawFirm={lawFirm} />
      </div>
      <div ref={restOfContentRef}>
        <Attestation
          date={attestation.date}
          landlord={attestation.landlord}
          tenant={attestation.tenant}
        />
        <ClauseList clauses={clauses} />
        <WitnessSignatureDate
          landlord={witnessLandlord}
          tenant={witnessTenant}
          witness={witness}
          lawFirm={witnessLawFirm}
        />
      </div>
    </div>
  );

  if (!renderUI) {
    return content;
  }

  return (
    <div className="agreement-preview-container">
      <div className="agreement-preview-header">
        {onClose && (
          <Button
            type="button"
            onClick={onClose}
            size="custom"
            className="agreement-preview-close-button"
            variant="sky_blue"
            aria-label="Close modal"
          >
            Close
          </Button>
        )}
      </div>
      {content}
      <div className="agreement-preview-footer">
        <Button
          type="button"
          onClick={() => handleDownload(unitName)}
          size="custom"
          className="agreement-preview-download-button"
          variant="sky_blue"
          disabled={isDownloading}
          aria-label="Download agreement"
        >
          {isDownloading ? "Downloading..." : "Download"}
        </Button>
      </div>
    </div>
  );
};


















// "use client";

// import React, { useRef } from "react";
// import { toast } from "sonner";
// import { useRouter } from "next/navigation";
// import {
//   Parties,
//   PropertyDescription,
//   AttorneyInfo,
//   LawFirmInfo,
//   Attestation,
//   ClauseList,
//   WitnessSignatureDate,
// } from "@/app/(nav)/documents/preview/component";
// import {
//   witnessLandlord,
//   witnessTenant,
//   witness,
// } from "@/app/(nav)/documents/preview/data";
// import { DocumentPreviewData } from "@/app/(nav)/documents/preview/types";
// import Button from "../Form/Button/button";
// import { useAgreementData } from "@/hooks/useAgreementData";
// import { useAgreementExport } from "@/hooks/useAgreementExport";

// interface AgreementPreviewProps {
//   onClose?: () => void; // Optional callback for closing modal
// }

// export const AgreementPreview = ({ onClose }: AgreementPreviewProps) => {
//   const router = useRouter();
//   const firstPageRef = useRef<HTMLDivElement>(null);
//   const restOfContentRef = useRef<HTMLDivElement>(null);

//   // Fetch and transform agreement data
//   const { documentData, unitName, isLoading, error } = useAgreementData();

//   // Handle export functionality
//   const { handleDownload, isDownloading } = useAgreementExport({
//     firstPageRef,
//     restOfContentRef,
//   });

//   // Handle errors
//   if (error) {
//     toast.error(error);
//     if (onClose) {
//       onClose();
//     } else {
//       router.back();
//     }
//     return null;
//   }

//   // Show loading state
//   if (isLoading || !documentData) {
//     return (
//       <div className="text-center text-gray-600 dark:text-gray-400 py-4">
//         Loading agreement...
//       </div>
//     );
//   }

//   const {
//     parties,
//     propertyDescription,
//     attorney,
//     lawFirm,
//     attestation,
//     witnessLawFirm,
//     clauses,
//   } = documentData;

//   return (
//     <div className="agreement-preview-container">
//       <div className="agreement-preview-header">
//         {onClose && (
//           <Button
//             type="button"
//             onClick={onClose}
//             size="custom"
//             className="agreement-preview-close-button"
//             variant="sky_blue"
//             aria-label="Close modal"
//           >
//             Close
//           </Button>
//         )}
//       </div>
//       <div className="agreement-preview-content">
//         <div ref={firstPageRef} className="agreement-preview-first-page">
//           <Parties landlord={parties.landlord} tenant={parties.tenant} />
//           <div className="agreement-preview-section">
//             <PropertyDescription description={propertyDescription} />
//             <AttorneyInfo attorney={attorney} />
//           </div>
//           <LawFirmInfo lawFirm={lawFirm} />
//         </div>
//         <div ref={restOfContentRef}>
//           <Attestation
//             date={attestation.date}
//             landlord={attestation.landlord}
//             tenant={attestation.tenant}
//           />
//           <ClauseList clauses={clauses} />
//           <WitnessSignatureDate
//             landlord={witnessLandlord}
//             tenant={witnessTenant}
//             witness={witness}
//             lawFirm={witnessLawFirm}
//           />
//         </div>
//       </div>
//       <div className="agreement-preview-footer">
//         <Button
//           type="button"
//           onClick={() => handleDownload(unitName)}
//           size="custom"
//           className="agreement-preview-download-button"
//           variant="sky_blue"
//           disabled={isDownloading}
//           aria-label="Download agreement"
//         >
//           {isDownloading ? "Downloading..." : "Download"}
//         </Button>
//       </div>
//     </div>
//   );
// };
