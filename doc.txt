LAYOUT ROUTES
- all / routes are for director role
- all /manager routes are for manager role
- all /accountant route are for account role


FILTER MODAL
- A component for filtering 
- it accept these props

--- filterOptionsMenu > an array object of filter options
export const maintenanceFilterOptionsWithDropdown: FilterOptionMenu[] = [
  {
    label: "Property",
    value: [
      { label: "Property 1", value: "Property1" },
      { label: "Property 2", value: "Property2" },
      { label: "Property 3", value: "Property3" },
    ],
  },
  {
    radio: true,
    label: "Status",
    value: [
      { label: "all", value: "all", isChecked: true }, use isChecked to check any value by default
      { label: "Pending", value: "Pending" },
      { label: "Ongoing", value: "Ongoing" },
      { label: "Completed", value: "Completed" },
    ],
  },
];


---FilterOptions > an object for filter option without menu
check management/vehicles-record filter for reference
    filterOptions={{
          radio: true, --- to change the checkbox to radio option
          value: [
            { label: "All", value: "all" },
            { label: "Rental", value: "rental" },
            { label: "Facility", value: "facility" },
          ],
        }}





               {/* {addedUnits.length > 0 && (
          <FixedFooter>
            <div className="flex justify-end w-full">
              <Modal>
                <ModalTrigger>
                  <Button> Add More Units</Button>
                </ModalTrigger>
                <ModalContent>
                  <UnitFormContext.Consumer>
                    {(context) => (
                      <FooterModal
                        duplicate={context?.duplicate}
                        setDuplicate={context?.setDuplicate}
                        submitLoading={context?.submitLoading}
                      />
                    )}
                  </UnitFormContext.Consumer>
                </ModalContent>
              </Modal>
            </div>
          </FixedFooter>
        )} */}













        // "use client";
// import { useState, useEffect } from "react";
// import PageCircleLoader from "@/components/Loader/PageCircleLoader";
// import PropertyDetails from "@/components/Management/Properties/property-details";
// import PropertySettings from "@/components/Management/Properties/property-settings";
// import { useAddUnitStore } from "@/store/add-unit-store";
// import AddUnitFormCard from "@/components/Management/Properties/add-unit-form-card";
// import UnitForm from "@/components/Management/Properties/unit-form";
// import PageProgressBar from "@/components/PageProgressBar/page-progress-bar";
// import useFetch from "@/hooks/useFetch";
// import BackButton from "@/components/BackButton/back-button";
// import { SinglePropertyResponse } from "../../../[id]/data";
// import NetworkError from "@/components/Error/NetworkError";
// import { transformPropertyData } from "./data";
// // import { useCustomBackNavigation } from "@/hooks/useCustomBackNavigation";
// import { useRouter } from "next/navigation";
// import AddUntFooter from "@/components/Management/Properties/AddUnitFooter";
// import FixedFooter from "@/components/FixedFooter/fixed-footer";
// import Button from "@/components/Form/Button/button";
// import { Modal, ModalContent, ModalTrigger } from "@/components/Modal/modal";
// import FooterModal from "@/components/Management/Properties/footer-modal";
// import { UnitFormContext } from "@/components/Management/Properties/unit-form-context";

// const AddUnit = ({ params }: { params: { propertyId: string } }) => {
//   const { propertyId } = params;
//   const customBackPath = `/management/properties/${propertyId}/edit-property`;
//   const router = useRouter();
//   const [dataNotFound, setDataNotFound] = useState(false);

//   const [hideEmptyForm, setHideEmptyForm] = useState(false);

//   const addedUnits = useAddUnitStore((s) => s.addedUnits);

//   const setAddUnitStore = useAddUnitStore((s) => s.setAddUnitStore);
//   // const resetStore = useAddUnitStore((s) => s.resetStore);
//   // resetStore();
//   const {
//     data: propertyData,
//     loading,
//     isNetworkError,
//     error,
//   } = useFetch<SinglePropertyResponse>(`property/${propertyId}/view`);

//   useEffect(() => {
//     if (propertyData) {
//       const transformedData = transformPropertyData(propertyData);
//       if (!transformedData) {
//         setDataNotFound(true);
//         return;
//       }
//       if (transformedData.propertyType === "facility") {
//         router.push(
//           `/management/properties/create-gated-estate-property/${propertyId}/add-unit`
//         );
//       }
//       setDataNotFound(false);
//       setAddUnitStore("property_id", transformedData.property_id);
//       setAddUnitStore("propertyType", transformedData.propertyType);
//       setAddUnitStore("propertyDetails", transformedData.propertyDetails);
//       setAddUnitStore("propertySettings", transformedData.propertySettings);
//       setAddUnitStore("addedUnits", transformedData.addedUnits);
//     }
//   }, [propertyData, setAddUnitStore, router, propertyId]);

//   // useCustomBackNavigation({ customBackPath });
//   // console.log("addedUnits", addedUnits);

//   if (loading) return <PageCircleLoader />;
//   if (isNetworkError) return <NetworkError />;
//   if (error) return <div className="text-red-500">{error}</div>;
//   if (dataNotFound)
//     return <div className="text-red-500">Property Data not found</div>;

//   return (
//     <div className="pb-[100px]">
//       <BackButton customBackPath={customBackPath}>Add Units</BackButton>
//       <PageProgressBar
//         breakpoints={[25, 50, 75]}
//         percentage={37}
//         className="mb-[52px]"
//       />
//       <div className="space-y-6 lg:space-y-8">
//         <PropertyDetails heading="Property Details" />
//         <PropertySettings heading="Property Settings" />
//         {addedUnits.length > 0 && (
//           <>
//             <h4 className="text-primary-navy text-lg lg:text-xl font-bold">
//               {hideEmptyForm ? "Units Summary" : "Added Units"}
//             </h4>
//             <hr className="!my-4 border-none bg-borders-dark h-[1px]" />
//             {addedUnits.map((unit, index) => (
//               <AddUnitFormCard key={index} index={index} data={unit} />
//             ))}
//           </>
//         )}
//         {!hideEmptyForm && (
//           <UnitForm empty hideEmptyForm={() => setHideEmptyForm(true)} />
//         )}
//       </div>
//     </div>
//   );
// };

// export default AddUnit;















// import { NextRequest, NextResponse } from "next/server";
// import { roleBasedRoutes } from "./data";

// export async function middleware(req: NextRequest) {
//   const emailVerified = req.cookies.get("emailVerified")?.value;
//   const currentPath = req.nextUrl.pathname;
//   const role = req.cookies.get("role")?.value;
//   const company_status = req.cookies.get("company_status")?.value;

//   console.log("server role", role);
//   console.log("server company_status", company_status);

//   // Public routes accessible without authentication
//   const publicRoutes = [
//     "/auth/user/sign-in",
//     "/auth/sign-in",
//     "/auth/sign-up",
//     "/auth/setup",
//     "/auth/forgot-password",
//     "/management/agent-community",
//   ];

//   if (publicRoutes.includes(currentPath)) {
//     return NextResponse.next();
//   }

//   // Allow access to `/auth/user/sign-in`
//   if (currentPath === "/auth/user/sign-in") {
//     return NextResponse.next();
//   }

//   // Allow `/auth/sign-in` for directors; redirect others to `/auth/user/sign-in`
//   if (currentPath === "/auth/sign-in") {
//     if (role === "director") return NextResponse.next();
//     return NextResponse.redirect(new URL("/auth/user/sign-in", req.url));
//   }

//   // Define dashboard paths that should bypass the company_status check
//   const dashboardPaths = [
//     '/dashboard',
//     '/accountant/dashboard',
//     '/manager/dashboard',
//     '/staff/dashboard',
//     '/user/dashboard',
//   ];

//   // Company status check: if currentPath does NOT start with one of the dashboard paths,
//   // then if company_status is "pending" or "rejected", redirect to unauthorized.
//   if (
//     !dashboardPaths.some((path) => currentPath.startsWith(path)) &&
//     (company_status === 'pending' || company_status === 'rejected')
//   ) {
//     return NextResponse.redirect(new URL('/unauthorized', req.url));
//   }

//   // Role-based route restrictions
//   const allowedRoutes =
//     roleBasedRoutes[role as keyof typeof roleBasedRoutes] || [];
//   if (!allowedRoutes.some((route) => currentPath.startsWith(route))) {
//     return NextResponse.redirect(new URL("/unauthorized", req.url));
//   }

//   // Allow access and set headers for debugging or downstream use
//   const response = NextResponse.next();
//   response.headers.set("x-authorization-status", "authorized");
//   return response;
// }

// export const config = {
//   matcher: [
//     "/dashboard/:path*",
//     "/wallet/:path*",
//     "/auth/:path*",
//     "/manager/:path*",
//     "/management/:path*",
//     "/tasks/:path*",
//     "/reports/:path*",
//     "/listing/:path*",
//     "/accounting/:path*",
//     "/applications/:path*",
//     "/documents/:path*",
//     "/settings/:path*",
//     "/messages/:path*",
//     "/notifications/:path*",
//   ],
// };
