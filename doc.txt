   // status:
        //   record.vehicle_record?.check_ins[0]?.status === undefined
        //     ? "no_record"
        //     : record.vehicle_record?.check_ins[0]?.status,


LAYOUT ROUTES
- all / routes are for director role
- all /manager routes are for manager role
- all /accountant route are for account role


FILTER MODAL
- A component for filtering 
- it accept these props

--- filterOptionsMenu > an array object of filter options
export const maintenanceFilterOptionsWithDropdown: FilterOptionMenu[] = [
  {
    label: "Property",
    value: [
      { label: "Property 1", value: "Property1" },
      { label: "Property 2", value: "Property2" },
      { label: "Property 3", value: "Property3" },
    ],
  },
  {
    radio: true,
    label: "Status",
    value: [
      { label: "all", value: "all", isChecked: true }, use isChecked to check any value by default
      { label: "Pending", value: "Pending" },
      { label: "Ongoing", value: "Ongoing" },
      { label: "Completed", value: "Completed" },
    ],
  },
];


---FilterOptions > an object for filter option without menu
check management/vehicles-record filter for reference
    filterOptions={{
          radio: true, --- to change the checkbox to radio option
          value: [
            { label: "All", value: "all" },
            { label: "Rental", value: "rental" },
            { label: "Facility", value: "facility" },
          ],
        }}




"use client";
import BackButton from "@/components/BackButton/back-button";
import Input from "@/components/Form/Input/input";
import Button from "@/components/Form/Button/button";
import { useSearchParams, useRouter } from "next/navigation";
import {
  PersonalDataProps,
  PersonalDetailsFormFields,
  VehicleDetailsFormFields,
} from "./form-sections";
import useVehicleRecordStore from "@/store/vehicle-record";
import { createVehicleRecord, transformTenant } from "./data";
import { toast } from "sonner";
import { useCallback, useEffect, useState } from "react";
import Select from "@/components/Form/Select/select";
import InputWithButton from "./input-with-button";
import { TenantApiResponse } from "./types";
import useFetch from "@/hooks/useFetch";
import {
  IndividualTenantAPIResponse,
  transformIndividualTenantAPIResponse,
} from "@/app/(nav)/management/tenants/[tenantId]/manage/data";
import SelectWithImage from "@/components/Form/Select/select-with-image";
import { transformMobileUseDataForVehicleRecord } from "@/app/(nav)/management/landlord/data";
import { getTenantById, getUsers } from "@/utils/getData";

const CreateRecordForm = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const type = searchParams.get("type") as "manual" | "id" | null;
  const propertyId = searchParams.get("p");
  const { selectedProperty } = useVehicleRecordStore();
  const [loading, setLoading] = useState(false);
  const [mobileUser, setMobileUser] = useState<PersonalDataProps | null>(null);
  const [userId, setUserId] = useState("");
  const [selectedTenantId, setSelectedTenantId] = useState<string | null>(null);
  const [tenants, setTenants] = useState<PersonalDataProps | null>(null);
  const [openFields, setOpenFields] = useState(false);
  const [reqLoading, setReqLoading] = useState(false);
  const [reqError, setReqError] = useState<string | null>(null);
  const [fetchError, setFetchError] = useState<string | null>(null);

  // Fetch tenants for the dropdown
  const {
    data: tenantsData,
    loading: tenantsLoading,
    error: tenantsError,
  } = useFetch<TenantApiResponse>(`/report/tenants?property_id=${propertyId}`);

  const tenantOptions =
    tenantsData?.data.tenants.map((tenant) => ({
      value: tenant.tenant_id,
      label: tenant.name,
      icon: tenant.picture,
    })) || [];

  // // Fetch selected tenant data when a tenant is selected from the dropdown
  // const {
  //   data: apiData,
  //   error: errorSelectedTenant,
  //   loading: loadingSelectedTenant,
  // } = useFetch<IndividualTenantAPIResponse>(
  //   selectedTenantId ? `tenant/${selectedTenantId}` : ""
  // );

  // Fetch selected tenant data
  const fetchSelectedTenant = useCallback(async () => {
    if (!selectedTenantId) return;
    setLoading(true);
    try {
      const data = await getTenantById(selectedTenantId);
      const transformedData = transformTenant(data);
      setTenants(transformedData);
      setOpenFields(true);
      setFetchError(null);
    } catch (err) {
      setFetchError("Failed to load tenant data");
      toast.error("Failed to load tenant data");
    } finally {
      setLoading(false);
    }
  }, [selectedTenantId]);

  useEffect(() => {
    fetchSelectedTenant();
  }, [fetchSelectedTenant]);

  // Fetch mobile user data
  const fetchMobileUser = useCallback(async () => {
    if (!userId) return;
    setLoading(true);
    try {
      const data = await getUsers(userId);
      const transformedData = transformMobileUseDataForVehicleRecord(data);
      setTenants(transformedData);
      setOpenFields(true);
      setFetchError(null);
    } catch (err) {
      setFetchError("Failed to load user data");
      toast.error("Failed to load user data");
    } finally {
      setLoading(false);
    }
  }, [userId]);

  useEffect(() => {
    fetchMobileUser();
  }, [fetchMobileUser]);

  // // Fetch mobile user data when a user ID is submitted
  // const {
  //   data: mobileUsersData,
  //   error: mobileUsersError,
  //   loading: loadingMobileUsers,
  //   refetch,
  // } = useFetch<any>(userId ? `/get-users?identifier=${userId}` : null);

  // // Handle mobile user data fetch
  // useEffect(() => {
  //   if (mobileUsersData && !mobileUsersError && !loadingMobileUsers && userId) {
  //     const transformedData =
  //       transformMobileUseDataForVehicleRecord(mobileUsersData);
  //     setTenants(transformedData);
  //     setOpenFields(true); // Open the form fields after setting tenants
  //   }
  // }, [mobileUsersData, mobileUsersError, loadingMobileUsers, userId]);

  // Handle selected tenant data fetch
  // useEffect(() => {
  //   if (apiData && !errorSelectedTenant && !loadingSelectedTenant) {
  //     const transformedData = transformTenant(apiData);
  //     setTenants(transformedData);
  //     setOpenFields(true); // Open the form fields after setting tenants
  //   } 
  // }, [apiData, errorSelectedTenant, loadingSelectedTenant]);

  // Reset tenant and form state when changing tenant
  const handleChangeTenant = () => {
    setTenants(null);
    setOpenFields(false);
    setSelectedTenantId(null);
    setUserId(""); // Reset userId to allow re-fetching mobile user data
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    formData.append("property_id", selectedProperty);

    // Handle avatar and picture fields
    const avatar = formData.get("avatar") as string;
    const picture = formData.get("picture") as string;
    if (!avatar && picture) {
      formData.set("avatar", picture);
    }
    formData.delete("picture");

    // Convert formData to an object for logging/debugging
    const data = Object.fromEntries(formData.entries());
    console.log("Form Data:", data);

    try {
      setLoading(true);
      const res = await createVehicleRecord(data);
      if (res) {
        toast.success("Vehicle record created successfully");
        useVehicleRecordStore.setState({ selectedProperty: "" });
        router.push(`/management/vehicles-record/${propertyId}`);
      }
    } catch (error) {
      console.error("Error creating vehicle record:", error);
      toast.error("An unexpected error occurred.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <form
      className="bg-white dark:bg-darkText-primary rounded-[20px] p-10 space-y-6"
      onSubmit={handleSubmit}
    >
      <div className="space-y-4">
        <BackButton className="text-primary-navy" bold>
          Profile
        </BackButton>
        {type === "manual" ? (
          <PersonalDetailsFormFields
            formstep={1}
            setFormstep={() => {}}
            loading={loading}
          />
        ) : openFields && tenants ? (
          <>
            <PersonalDetailsFormFields
              editMode={true}
              data={tenants}
              formstep={1}
              setFormstep={() => {}}
              loading={loading}
              changeTenant={handleChangeTenant}
            />
          </>
        ) : (
          <div className="grid gap-4 md:gap-5 md:grid-cols-2 lg:grid-cols-3">
            <InputWithButton
              label="Input Guest/Visitor ID"
              name="guest_id"
              btn_text="submit"
              onSubmit={setUserId}
              loading={loading}
            />
            <SelectWithImage
              label="Select From Record"
              id="guest_id"
              options={tenantOptions}
              onChange={setSelectedTenantId}
              placeholder={
                tenantsLoading
                  ? "Loading tenants..."
                  : tenantsError
                  ? "Error loading tenants"
                  : "Select tenant"
              }
              error={tenantsError}
            />
          </div>
        )}
      </div>
      <div className="space-y-4">
        <h2 className="text-primary-navy dark:text-white text-lg lg:text-xl font-bold">
          Vehicle Details
        </h2>
        <VehicleDetailsFormFields showSubmitButton loading={loading} />
      </div>
    </form>
  );
};

export default CreateRecordForm;










// "use client";
// import { useEffect, useState } from "react";
// import { CameraIcon } from "@/public/icons/icons";
// import Image from "next/image";
// import Sample from "@/public/empty/SampleProperty.jpeg";
// import { SectionSeparator } from "@/components/Section/section-components";
// import Sample2 from "@/public/empty/SampleProperty2.jpeg";
// import Sample3 from "@/public/empty/SampleProperty3.jpeg";
// import Sample4 from "@/public/empty/SampleProperty4.png";
// import Sample5 from "@/public/empty/SampleProperty5.jpg";
// import PopupImageModal from "@/components/PopupSlider/PopupSlider";
// import Checkbox from "@/components/Form/Checkbox/checkbox";
// import Switch from "@/components/Form/Switch/switch";
// import { useOccupantStore } from "@/hooks/occupant-store";

// interface PropertySwitchUnitItemProps {
//   id: string;
//   isSelected: boolean;
//   onSelect: (id: string) => void;
//   isRental?: boolean;
//   cautionDeposit?: string;
//   serviceCharge?: string;
//   unitDetails: string;
//   unitImages: string[];
//   rent: string;
//   propertyType: string;
//   unitName: string;
// }

// const PropertySwitchUnitItem: React.FC<PropertySwitchUnitItemProps> = ({
//   id,
//   isSelected,
//   onSelect,
//   isRental,
//   cautionDeposit,
//   serviceCharge,
//   unitDetails,
//   unitImages,
//   rent,
//   propertyType,
//   unitName,
// }) => {
//   const {
//     occupant,
//     propertyData,
//     records,
//     unitBalance,
//     calculation,
//     deduction,
//     setCalculation,
//     setDeduction,
//   } = useOccupantStore();
//   const [screenModal, setScreenModal] = useState(false);

//   useEffect(() => {
//     setChecked1(calculation);
//   }, [calculation]);

//   useEffect(() => {
//     setChecked2(deduction);
//   }, [deduction]);

//   const handleChecked1Click = () => {
//     const newChecked1 = !checked1;
//     setChecked1(newChecked1);
//     setCalculation(newChecked1);
//   };

//   const handleChecked2Click = () => {
//     const newChecked2 = !checked2;
//     setChecked2(newChecked2);
//     setDeduction(newChecked2);
//   };

//   const sampleImages = [Sample, Sample2, Sample3, Sample4, Sample5];
//   const [checked1, setChecked1] = useState(false);
//   const [checked2, setChecked2] = useState(false);
//   console.log("calculation", checked1)
//   console.log("deduction", checked2)
//   return (
//     <div
//       className="p-6 rounded-2xl bg-white dark:bg-darkText-primary"
//       style={{ boxShadow: "2px 2px 4px 0px rgba(0, 0, 0, 0.05)" }}
//     >
//       {/* Image Modal */}
//       <PopupImageModal
//         isOpen={screenModal}
//         onClose={() => setScreenModal(false)}
//         images={unitImages.map((image) => ({
//           src: image,
//         }))}
//       />
//       <div className="flex items-center justify-between">
//         <h4 className="text-brand-10 text-base font-bold">
//           Unit ID: {id}
//         </h4>
//         <Checkbox onChange={() => onSelect(id)} checked={isSelected} />
//       </div>
//       <SectionSeparator className="my-4 h-[2px]" />
//       <div className="flex items-center gap-2 justify-between overflow-y-auto custom-round-scrollbar pb-2">
//         <div className="min-w-[400px] text-sm md:text-base grid grid-cols-2 gap-x-2 gap-y-4 lg:[&>div]:grid lg:[&>div]:gap-x-2 lg:[&>div]:grid-cols-[35%,1fr]">
//           <div>
//             <p className="text-[#747474] dark:text-white">Unit Details</p>
//             <p className="text-black dark:text-darkText-1">{unitDetails}</p>
//           </div>
//           <div>
//             <p className="text-[#747474] dark:text-white">Rent</p>
//             <p className="text-black dark:text-darkText-1">{rent}</p>
//           </div>
//           <div>
//             <p className="text-[#747474] dark:text-white">Unit No/Name</p>
//             <p className="text-black dark:text-darkText-1">{unitName}</p>
//           </div>
//           <div>
//             <p className="text-[#747474] dark:text-white">Caution Deposit</p>
//             <p className="text-black dark:text-darkText-1">{cautionDeposit}</p>
//           </div>
//           <div>
//             <p className="text-[#747474] dark:text-white">Unit Description</p>
//             <p className="text-black dark:text-darkText-1">{unitDetails}</p>
//           </div>
//           <div>
//             <p className="text-[#747474] dark:text-white">Service Charge</p>
//             <p className="text-black dark:text-darkText-1">{serviceCharge}</p>
//           </div>
//         </div>

//         {/* Image */}
//         <div
//           role="button"
//           className="flex-shrink-0 w-[168px] h-[168px] rounded-2xl relative overflow-hidden cursor-pointer"
//           onClick={() => setScreenModal(true)}
//         >
//           <div className="absolute z-[1] left-[65%] top-3 bg-brand-1 rounded py-1 px-1.5 flex items-center gap-1.5">
//             <CameraIcon />
//             <p className="text-black font-medium text-[10px]">+{unitImages.length}</p>
//           </div>
//           <Image
//             src={unitImages[0]}
//             alt={""}
//             fill
//             className="object-cover object-center"
//           />
//         </div>
//       </div>
//       <SectionSeparator className="my-4 h-[2px]" />
//       {isSelected && isRental && (
//         <div className="space-y-6 text-text-secondary dark:text-darkText-1 text-sm font-medium">
//           <div className="space-y-[10px]">
//             <div className="flex items-center gap-2">
//               <Switch
//                 checked={checked1}
//                 onClick={handleChecked1Click}
//                 // onClick={() => setChecked1((x) => !x)}
//               />
//               <p>Calclation</p>
//             </div>
//             <p>
//               {!checked1
//                 ? "Charge the tenants the same total package as renewal tenants since they were tenants in one of the units of the property before"
//                 : "Calculate the total package of the new rent, including caution deposit, Service Charge, agency fee, legal fee and other Charges) for the tenants that you are transferring to the new unit."}
//             </p>
//           </div>
//           <div className="space-y-[10px]">
//             <div className="flex items-center gap-2">
//               <Switch
//                 checked={checked2}
//                 onClick={handleChecked2Click}
//                 // onClick={() => setChecked2((x) => !x)}
//               />
//               <p>Deduction</p>
//             </div>
//             <p>
//               {!checked2
//                 ? "Do not deduct the current outstanding rent balance from the cost of the new units that the occupants are moving into"
//                 : "Calculate the total package of the new fee, including service charge and other Charges for the occupant that you are transferring to the new unit."}
//             </p>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default PropertySwitchUnitItem;






























// "use client";

// import Button from "@/components/Form/Button/button";
// import Select from "@/components/Form/Select/select";
// import Switch from "@/components/Form/Switch/switch";
// import { ModalTrigger } from "@/components/Modal/modal";
// import ModalPreset from "@/components/Modal/modal-preset";
// import MenuModalPreset from "../../landlord-tenant-modal-preset";
// import { useRouter, useSearchParams } from "next/navigation";
// import { useEffect, useState } from "react";
// import useFetch from "@/hooks/useFetch";
// import { transformUnitOptions, UnitsApiResponse } from "./data";
// import { useOccupantStore } from "@/hooks/occupant-store";
// import { toast } from "sonner";

// const SwitchUnitModal: React.FC<{
//   isRental: boolean;
//   propertyId: number;
//   unitId: number;
// }> = ({ isRental, propertyId, unitId }) => {
//   const searchParams = useSearchParams();
//   const id = searchParams.get("id");
//   const propertyType = searchParams.get("type") as "rental" | "facility";
//   const { calculation, deduction, setCalculation, setDeduction } =
//     useOccupantStore();
//   const [checked1, setChecked1] = useState(calculation);
//   const [checked2, setChecked2] = useState(deduction);
//   const router = useRouter();
//   const [modalView, setModalView] = useState<"warning" | "menu">("warning");
//   const [unitsOptions, setUnitsOptions] = useState<any[]>([]);
//   const [selectedUnitId, setSelectedUnitId] = useState<string | null>(null);

//   const {
//     data: unitsData,
//     error: unitsError,
//     loading: UnitsLoading,
//   } = useFetch<UnitsApiResponse>(`/unit/${propertyId}/all`);

//   useEffect(() => {
//     if (unitsData) {
//       const unitsTransformOptions = transformUnitOptions(unitsData).filter(
//         (unit) => unit.value !== unitId
//       );
//       setUnitsOptions(unitsTransformOptions);
//     }
//   }, [unitsData, unitId]);

//   // console.log("unitsOptions", unitsData);

//   useEffect(() => {
//     setChecked1(calculation);
//   }, [calculation]);

//   useEffect(() => {
//     setChecked2(deduction);
//   }, [deduction]);

//   const handleChecked1Click = () => {
//     const newChecked1 = !checked1;
//     setChecked1(newChecked1);
//     setCalculation(newChecked1);
//   };

//   const handleChecked2Click = () => {
//     const newChecked2 = !checked2;
//     setChecked2(newChecked2);
//     setDeduction(newChecked2);
//   };

//   const handleContinue = () => {
//     if (!selectedUnitId) {
//       toast.warning("Please select a unit");
//       return;
//     }
//     router.push(
//       `/management/rent-unit/${id}/edit-rent/change-unit?type=${propertyType}&p=${propertyId}&u=${selectedUnitId}`
//     );
//   };

//   if (modalView === "warning") {
//     return (
//       <ModalPreset type="warning">
//         <div className="flex flex-col gap-10">
//           <p className="text-text-tertiary text-[14px]">
//             Are you sure you want to proceed with moving the{" "}
//             {isRental ? "tenant's" : "occupant's"} records from the current unit
//             to another unit of the same property?
//           </p>
//           <div className="flex flex-col gap-2">
//             <Button onClick={() => setModalView("menu")}>OK</Button>
//             <ModalTrigger asChild close>
//               <Button variant="blank" className="text-brand-9">
//                 Back
//               </Button>
//             </ModalTrigger>
//           </div>
//         </div>
//       </ModalPreset>
//     );
//   }

//   if (modalView === "menu") {
//     return (
//       <MenuModalPreset
//         heading="Transfer To New Unit"
//         back={{ handleBack: () => setModalView("warning") }}
//         style={{ maxWidth: "600px", height: isRental ? "auto" : "400px" }}
//       >
//         <div className="flex flex-col gap-14">
//           {isRental && (
//             <div className="flex flex-col gap-4 text-text-secondary text-[14px] font-medium">
//               <div className="flex flex-col gap-4">
//                 <div className="flex items-center gap-2">
//                   <Switch
//                     size={15}
//                     checked={checked1}
//                     onClick={handleChecked1Click}
//                     // onClick={() => {
//                     //   setChecked1((x) => !x);
//                     // }}
//                   />
//                   <p>Calculation</p>
//                 </div>
//                 <p>
//                   {!checked1
//                     ? "Charge the tenants the same total package as renewal tenants since they were tenants in one of the units of the property before."
//                     : "Calculate the total package of the new rent, including caution deposit, Service Charge, agency fee, legal fee and other Charges for the tenants that you are transferring to the new unit."}
//                 </p>
//               </div>
//               <div className="flex items-center gap-2">
//                 <Switch
//                   size={15}
//                   checked={checked2}
//                   onClick={handleChecked2Click}
//                   // onClick={() => {
//                   //   setChecked2((x) => !x);
//                   // }}
//                 />
//                 <p>Deduction</p>
//               </div>
//               <p>
//                 {!checked2
//                   ? "Deduct the current outstanding rent balance from the cost of the new unit when calculating the total cost."
//                   : "Do not deduct the current outstanding rent balance from the cost of the new unit that the tenants are moving into."}
//               </p>
//             </div>
//           )}
//           <div className="flex items-center justify-center my-auto">
//             <div className="space-y-5">
//               <Select
//                 id=""
//                 label="Select Unit"
//                 className="min-w-[300px]"
//                 options={unitsOptions}
//                 onChange={setSelectedUnitId}
//                 placeholder={
//                   UnitsLoading
//                     ? "Loading Units..."
//                     : unitsError
//                     ? "Error loading Units"
//                     : "Select Unit"
//                 }
//                 error={unitsError}
//                 disabled={UnitsLoading}
//               />
//               <div className="w-full flex items-center justify-center">
//                 <Button
//                   onClick={handleContinue}
//                   className="py-2 px-8"
//                   size="base_medium"
//                 >
//                   Add
//                 </Button>
//               </div>
//             </div>
//           </div>
//         </div>
//       </MenuModalPreset>
//     );
//   }
//   return null;
// };

// export default SwitchUnitModal;

















import { Modal, ModalContent } from "@/components/Modal/modal";
import { useContext, useEffect, useState } from "react";
import { FlowProgressContext } from "@/components/FlowProgress/flow-progress";
import FooterModal from "./footer-modal";
import Button from "@/components/Form/Button/button";
import FixedFooter from "@/components/FixedFooter/fixed-footer";
import { useUnitForm } from "./unit-form-context";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import { useAddUnitStore } from "@/store/add-unit-store";

interface AddUntFooterProps {
  noForm?: boolean;
}

const AddUntFooter = ({ noForm }: AddUntFooterProps) => {
  const { canSubmit, handleInputChange, missingFields } =
    useContext(FlowProgressContext);
  const { submitLoading, setSaveClick } = useUnitForm();
  const [footerModalOpen, setFooterModalOpen] = useState(false);
  const router = useRouter();
  const addedUnits = useAddUnitStore((s) => s.addedUnits);
  const newForm = useAddUnitStore((s) => s.newForm);
  const [checkSubmit, setCheckSubmit] = useState(false);

  // // Effect to handle validation after state updates
  // useEffect(() => {
  //   if (checkSubmit) {
  //     if (!canSubmit) {
  //       toast.error(
  //         `The following fields are required: ${missingFields.join(", ")}`
  //       );
  //     } else {
  //       setFooterModalOpen(true);
  //     }
  //     setCheckSubmit(false); // Reset the trigger
  //   }
  // }, [canSubmit, missingFields, checkSubmit]);

  useEffect(() => {
    if (checkSubmit) {
      if (!canSubmit && !noForm) {
        toast.error(
          `The following fields are required: ${missingFields.join(", ")}`
        );
      } else {
        setFooterModalOpen(true);
      }
      setCheckSubmit(false); // Reset the trigger
    }
  }, [canSubmit, missingFields, checkSubmit, noForm]);

  const handleAddMoreClick = () => {
    handleInputChange(); // Trigger state update
    setCheckSubmit(true);
  };

  // const handleSaveClick = (e: React.MouseEvent<HTMLButtonElement>) => {
  //   e.preventDefault();
  //   if (noForm) {
  //     // Check if any unit has notYetUploaded set to true
  //     const hasNotYetUploaded = addedUnits.some((unit) => unit.notYetUploaded);
  //     if (hasNotYetUploaded) {
  //       toast.warning(
  //         "There are units that have not been updated yet. Please update them to continue."
  //       );
  //       return;
  //     }
  //     router.push("/management/properties");
  //   } else {
  //     if (!canSubmit) {
  //       toast.error(
  //         `The following fields are required: ${missingFields.join(", ")}`
  //       );
  //       return;
  //     }
  //     setSaveClick(true);
  //     const form = e.currentTarget.form;
  //     setTimeout(() => {
  //       form?.requestSubmit();
  //     }, 0);
  //   }
  // };

  const handleSaveClick = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();

    // If there are added units, check for notYetUploaded
    if (addedUnits.length > 0) {
      const hasNotYetUploaded = addedUnits.some((unit) => unit.notYetUploaded);
      if (hasNotYetUploaded) {
        toast.warning(
          "There are units that have not been updated yet. Please update them to continue."
        );
        return;
      }
    }

    // If a form exists (noForm is false or newForm is true), validate canSubmit
    if (!noForm || newForm) {
      if (!canSubmit) {
        toast.error(
          `The following fields are required: ${missingFields.join(", ")}`
        );
        return;
      }
      setSaveClick(true);
      const form = e.currentTarget.form;
      setTimeout(() => {
        form?.requestSubmit();
      }, 0);
    } else {
      // If no form and no unuploaded units, navigate
      router.push("/management/properties");
    }
  };

  return (
    <FixedFooter className="flex items-center justify-end gap-10">
      <Modal state={{ isOpen: footerModalOpen, setIsOpen: setFooterModalOpen }}>
        <ModalContent>
          <FooterModal noForm={noForm} />
        </ModalContent>
      </Modal>
      <Button
        size="base_medium"
        className="py-2 px-6"
        disabled={submitLoading}
        form="add-unit-form"
        onClick={handleAddMoreClick}
      >
        {submitLoading ? "Adding..." : "Add More Unit"}
      </Button>
      <Button
        form="add-unit-form"
        type="button"
        size="base_medium"
        className="py-2 px-6"
        disabled={submitLoading}
        onClick={handleSaveClick}
      >
        {submitLoading ? "Saving..." : "Save"}
      </Button>
    </FixedFooter>
  );
};

export default AddUntFooter;

















// Imports
import Input from "../Form/Input/input";
import { useEffect, useState } from "react";
import Button from "../Form/Button/button";
import { AuthForm } from "../Auth/auth-components";
import LandlordTenantModalPreset from "./landlord-tenant-modal-preset";
import UserCard, { UserCardProps } from "./landlord-and-tenant-card";
import useFetch from "@/hooks/useFetch";
import { transformMobileUseData } from "@/app/(nav)/management/landlord/data";
import { toast } from "sonner";

interface InvitationFormProps {
  method: "id" | "email";
  submitAction: (data: any) => Promise<void>;
  formStep?: number;
  identifier?: number | string;
  setIdentifier?: React.Dispatch<React.SetStateAction<string>>;
  setFormStep?: React.Dispatch<React.SetStateAction<number>>;
  page?: "landlord" | "tenant";
}

const InvitationForm: React.FC<InvitationFormProps> = ({
  submitAction,
  method,
  formStep,
  setFormStep,
  identifier,
  setIdentifier,
  page,
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [mobileUser, setMobileUser] = useState<UserCardProps | null>(null);
  const {
    data: apiData,
    error,
    loading,
    refetch,
  } = useFetch<any>(identifier ? `/get-users?identifier=${identifier}` : null);

  // Move to step 2 when fetch completes successfully
  useEffect(() => {
    if (!loading && apiData && !error && identifier) {
      const trans = transformMobileUseData(apiData);
      setMobileUser(trans);
      setFormStep && setFormStep(3);
    }
  }, [loading, apiData, error, identifier]);

  const handleSubmit = async (data: any) => {
    if (method === "id" && setFormStep && setIdentifier) {
      const identifier = data.identifier;
      if (!identifier) {
        toast.warning("Please enter a profile email or ID");
        return;
      }
      setIdentifier(identifier);
      return;
    } else {
      setIsLoading(true);
      await submitAction(data);
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (error) {
      toast.warning("No Mobile User with that Identity");
    }
  }, [error]);

  const handleProceed = async () => {
    if (method === "id") {
      setIsLoading(true);
      await submitAction(identifier!);
      setIsLoading(false);
    }
  };

  return (
    <div className="relative min-h-[200px]">
      <AuthForm
        className={`items-center justify-center custom-flex-col gap-5 transition-opacity duration-150 ${
          formStep === 3 ? "pointer-events-none opacity-0" : "opacity-100"
        }`}
        onFormSubmit={handleSubmit}
      >
        <div className="custom-flex-col gap-5 max-w-[400px]">
          {method === "email" ? (
            <>
              <Input
                id="name"
                label="name"
                inputClassName="text-xs md:text-sm font-normal rounded-[8px]"
              />
              <Input
                id="email"
                label="email"
                type="email"
                inputClassName="text-xs md:text-sm font-normal rounded-[8px]"
              />
            </>
          ) : (
            <Input
              // id="profile_id"
              id="identifier"
              label="Input Profile Email/ID"
              inputClassName="text-xs md:text-sm font-normal rounded-[8px]"
            />
          )}
          <div className="flex justify-center">
            <Button
              type="submit"
              size="base_medium"
              className="py-2 px-8"
              disabled={isLoading}
            >
              {isLoading
                ? "Please wait..."
                : method === "email"
                ? "invite"
                : "Add"}
            </Button>
          </div>
        </div>
      </AuthForm>
      {formStep === 3 && (
        <div className="absolute top-0 left-0 right-0 pb-[20px] min-h-[200px]">
          <div className="flex flex-col gap-4 bg-white items-center justify-center">
            <h3 className="text-black dark:text-darkText-1 text-base font-medium">
              Kindly verify if the name matches the ID or Email of the mobile
              user you intend to add
            </h3>
            <div>
              {mobileUser && (
                <UserCard className="min-w-[300px]" {...mobileUser} />
              )}
            </div>
            <div className="flex gap-4">
              <Button
                type="button"
                size="base_medium"
                className="py-2 px-8"
                disabled={isLoading}
                onClick={handleProceed}
              >
                {isLoading ? "Please wait..." : "Proceed"}
              </Button>
              <Button
                size="custom"
                onClick={() => {
                  setFormStep && setFormStep(1);
                  setIdentifier && setIdentifier("");
                }}
                type="button"
                className="py-2 px-8 font-bold text-sm lg:text-base"
                variant="sky_blue"
              >
                Cancel
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InvitationForm;





"use client";
import { useEffect, useMemo, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import Picture from "@/components/Picture/picture";
import BadgeIcon from "@/components/BadgeIcon/badge-icon";
import { secondaryFont } from "@/utils/fonts";
import Button from "@/components/Form/Button/button";
import UserTag from "@/components/Tags/user-tag";
import {
  LandlordTenantInfoBox as InfoBox,
  LandlordTenantInfo as ContactInfo,
  MobileNotesModal,
} from "@/components/Management/landlord-tenant-info-components";
import PreviousRecord from "@/components/tasks/vehicles-record/previous-record";
import DefaultLandlordAvatar from "@/public/empty/landlord-avatar.png";
import { SectionSeparator } from "@/components/Section/section-components";
import Pagination from "@/components/Pagination/pagination";
import { Modal, ModalTrigger, ModalContent } from "@/components/Modal/modal";
import CheckInOutForm from "@/components/tasks/visitors-requests/check-in-out-form";
import {
  EditVehicleDetailsFormModal,
  EditPersonalDetailsFormModal,
} from "@/components/tasks/vehicles-record/edit-vehicle-details";
import BackButton from "@/components/BackButton/back-button";
import FixedFooter from "@/components/FixedFooter/fixed-footer";
import useFetch from "@/hooks/useFetch";
import useRefetchOnEvent from "@/hooks/useRefetchOnEvent";
import {
  transformSingleVehicleRecordApiResponse,
  UserData,
  VehicleDetails,
  WebContactInfo,
  checkInsOutData,
  SingleVehicleRecordApiResponse,
} from "./data";
import CustomLoader from "@/components/Loader/CustomLoader";
import NetworkError from "@/components/Error/NetworkError";
import { checkInVehicle } from "@/components/tasks/vehicles-record/data";
import { toast } from "sonner";
import { Box as MuiBox, Modal as MuiModal } from "@mui/material";
import { UseerSkeletonVehicleRecord } from "@/components/Skeleton/vehicle-record";
import ServerError from "@/components/Error/ServerError";
import UpdateVehicleWithEmail from "@/components/Modal/update-vehicle-record";
import { NoteBlinkingIcon } from "@/public/icons/dashboard-cards/icons";
import { NotepadTextDashed } from "lucide-react";

interface TransformedData {
  userData: UserData | null;
  vehicleDetails: VehicleDetails | null;
  webContactInfo: WebContactInfo | null;
  checkInsOutData: checkInsOutData | null;
}

interface DetailProps {
  label: string;
  value: string;
}

const Detail: React.FC<DetailProps> = ({ label, value }) => (
  <div className="flex flex-col sm:flex-row gap-x-4 gap-y-1">
    <p className="text-[#747474] dark:text-darkText-2 w-[135px]">{label}</p>
    <p className="text-black dark:text-white capitalize">{value}</p>
  </div>
);

interface Notes {
  last_updated: string;
  write_up?: string;
}

const RecordPage = () => {
  const router = useRouter();
  const [modalOpen, setModalOpen] = useState(false);
  const [updateUserModal, setUpdateUserModal] = useState(false);
  const [updateVehicleModal, setUpdateVehicleModal] = useState(false);
  const { recordId } = useParams();
  const [searchQuery, setSearchQuery] = useState("");
  const [checking, setChecking] = useState(false);

  const initialState: TransformedData = {
    userData: null,
    vehicleDetails: null,
    webContactInfo: null,
    checkInsOutData: null,
  };

  const [states, setStates] = useState<TransformedData>(initialState);

  const handlePageChange = (page: number) => {
    setSearchQuery("");
    setStates((prevState) => ({
      ...prevState,
      checkInsOutData: {
        ...prevState.checkInsOutData,
        current_page: page,
        check_ins: prevState.checkInsOutData?.check_ins || [],
        total: prevState.checkInsOutData?.total || 0,
        prev_page_url: prevState.checkInsOutData?.prev_page_url || "",
        last_page: prevState.checkInsOutData?.last_page || 0,
        next_page_url: prevState.checkInsOutData?.next_page_url || "",
        first_page_url: prevState.checkInsOutData?.first_page_url || "",
        last_page_url: prevState.checkInsOutData?.last_page_url || "",
        per_page: prevState.checkInsOutData?.per_page || 0,
      },
    }));
  };

  const config = useMemo(
    () => ({
      params: {
        page: states.checkInsOutData?.current_page || 1,
        search: searchQuery,
      },
    }),
    [states.checkInsOutData?.current_page, searchQuery]
  );

  const {
    data: apiData,
    loading,
    silentLoading,
    isNetworkError,
    error,
    refetch,
  } = useFetch<SingleVehicleRecordApiResponse>(
    `vehicle-records/${recordId}/show-details`,
    config
  );

  useRefetchOnEvent("refetchVehicleRecord", () => refetch({ silent: true }));

  useEffect(() => {
    if (apiData && "data" in apiData && apiData.data) {
      try {
        const transformed = transformSingleVehicleRecordApiResponse(apiData);
        setStates((prevState) => ({
          ...prevState,
          userData: transformed.userData,
          vehicleDetails: transformed.vehicleDetails,
          webContactInfo: transformed.webContactInfo,
          checkInsOutData: transformed.checkInsOutData,
        }));
      } catch (error) {
        console.error("Transformation error:", error, apiData);
      }
    } else if (!loading) {
      console.error("Invalid API data format:", apiData);
    }
  }, [apiData, loading]);

  const { userData, vehicleDetails, webContactInfo, checkInsOutData } = states;

  if (loading)
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="w-12 h-12 border-4 border-brand-9 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );

  if (isNetworkError) return <NetworkError />;
  if (error) return <ServerError error={error} />;
  if (!userData || !vehicleDetails || !webContactInfo) {
    return <div>No data available.</div>;
  }

  const {
    user_tag,
    notes,
    note,
    full_name,
    state: userState,
    address,
    avatar,
    local_government,
    city,
    phone_number,
    id: userId,
    pictureSrc,
    registrationDate,
  } = userData;

  const {
    id,
    brand,
    plate_number,
    category,
    model,
    state: vehicleState,
    color,
    manufacture_year,
    vehicle_type,
  } = vehicleDetails;

  const handleCheckIn = async (event: React.FormEvent) => {
    event.preventDefault();
    const form = event.target as HTMLFormElement;
    const formData = new FormData(form);

    // Modify keys in formData
    const data = Object.fromEntries(formData.entries());
    data.passengers_in = data.passenger;
    delete data.passenger;
    data.inventory_in = data.inventory;
    delete data.inventory;

    // Add vehicle_record to requestId
    data.vehicle_record_id = `${recordId}`;

    try {
      setChecking(true);
      const response = await checkInVehicle(data);
      if (response) {
        window.dispatchEvent(new Event("refetchVehicleRecord"));
        toast.success("Vehicle checked in successfully");
        setModalOpen(false);
      } else {
        toast.error("Failed to check in vehicle");
      }
    } catch (error) {
      console.error(error);
    } finally {
      setChecking(false);
    }
  };

  // Check if there's a record
const hasRecords = (checkInsOutData?.check_ins ?? []).length > 0;

  // Handle Edit Vehicle button click
  const handleEditVehicleClick = () => {
    if (hasRecords) {
      toast.warning("Cannot update details if there's a record.");
      return;
    }
    setUpdateVehicleModal(true);
  };

  // Check if there's a pending record
  const hasPendingRecord =
    checkInsOutData?.check_ins?.some((record) => record.status === "pending") ||
    false;

  // Handle button click when there's a pending record
  const handleCreateNewRecordClick = () => {
    if (hasPendingRecord) {
      toast.warning(
        "There’s a pending record that needs to be checked out before creating a new record."
      );
      return;
    }
    setModalOpen(true);
  };

  return (
    <div className="space-y-5 pb-[100px]">
      <BackButton>Vehicle Record</BackButton>
      <div className="grid lg:grid-cols-2 gap-y-5 gap-x-8">
        <InfoBox
          style={{ padding: "24px 40px" }}
          className="relative space-y-5"
        >
          <div className="flex flex-col xl:flex-row gap-5">
            <Picture
              src={avatar || DefaultLandlordAvatar}
              alt="profile picture"
              size={120}
              rounded
              className="custom-secondary-bg"
            />
            <div className="custom-flex-col gap-4">
              <div className="custom-flex-col">
                <div className="flex items-center">
                  <p className="text-black dark:text-white text-lg lg:text-xl font-bold capitalize">
                    {full_name}
                  </p>
                  <BadgeIcon color="blue" />
                </div>
                <p
                  className={`${secondaryFont.className} text-sm dark:text-darkText-2 font-normal`}
                >
                  {phone_number}
                </p>
              </div>
              <div className="custom-flex-col gap-2">
                <div className="flex gap-2 items-center">
                  <UserTag type={user_tag} />
                  {note && (
                    <NoteBlinkingIcon size={20} className="blink-color" />
                  )}
                </div>
                {user_tag === "mobile" && (
                  <p className="text-neutral-800 dark:text-darkText-2 text-base font-medium">
                    ID: {userId}
                  </p>
                )}
              </div>
            </div>
          </div>
          <div className="w-fit mx-auto flex flex-wrap gap-4">
            {user_tag === "mobile" ? (
              <>
                <Button size="base_medium" className="py-2 px-8">
                  Message
                </Button>
              </>
            ) : (
              <>
                <Modal
                  state={{
                    isOpen: updateUserModal,
                    setIsOpen: setUpdateUserModal,
                  }}
                >
                  <ModalTrigger asChild>
                    <Button size="base_medium" className="py-2 px-8">
                      Edit
                    </Button>
                  </ModalTrigger>
                  <ModalContent>
                    <EditPersonalDetailsFormModal
                      data={{
                        id: vehicleDetails.id,
                        full_name,
                        state: userState,
                        address,
                        avatar,
                        local_government,
                        city,
                        phone_number,
                      }}
                      isOpen={updateUserModal}
                      setIsOpen={setUpdateUserModal}
                    />
                  </ModalContent>
                </Modal>
                <Modal>
                  <ModalTrigger asChild>
                    <Button size="base_medium" className="py-2 px-8">
                      Update with Email
                    </Button>
                  </ModalTrigger>
                  <ModalContent>
                    <UpdateVehicleWithEmail recordId={recordId.toString()} />
                  </ModalContent>
                </Modal>
              </>
            )}
            <Modal>
              <ModalTrigger asChild>
                <Button
                  variant="sky_blue"
                  size="base_medium"
                  className="py-2 px-8"
                >
                  Note
                </Button>
              </ModalTrigger>
              <ModalContent>
                <MobileNotesModal
                  page="vehicle-record"
                  id={recordId.toString()}
                  defaultNote={note}
                />
              </ModalContent>
            </Modal>
          </div>
        </InfoBox>

        {user_tag === "mobile" && (
          <ContactInfo
            info={{
              Gender: "Male",
              Religion: "Christianity",
              Phone: phone_number,
            }}
          />
        )}
        <ContactInfo
          heading="Contact Address"
          info={{
            Address: address,
            City: city,
            State: userState,
            "L.G": local_government,
          }}
        />
        {user_tag === "mobile" && (
          <ContactInfo
            heading="Next of Kin"
            containerClassName="flex flex-col justify-center"
            info={{
              Name: "Abimbola Adedeji",
              email: "abimbola@gmail.com",
              "Phone Number": phone_number,
              relationship: "Father",
            }}
          />
        )}
      </div>

      {/* Vehicle Details */}
      <InfoBox className="text-black dark:text-white text-lg lg:text-xl font-bold">
        <h3>Vehicle Details</h3>
        <SectionSeparator className="my-4" />
        <div className="flex flex-wrap gap-4 lg:gap-16 text-sm lg:text-base font-normal capitalize">
          <div className="grid gap-y-4 gap-x-8 grid-cols-2 lg:grid-cols-3">
            <Detail label="Brand Name" value={brand} />
            <Detail label="Plate Number" value={plate_number} />
            <Detail label="Category" value={category} />
            <Detail label="Model" value={model} />
            <Detail label="State" value={vehicleState} />
            <Detail label="Color" value={color || "N/A"} />
            <Detail label="Manufacture Year" value={manufacture_year} />
          </div>
          <Button
            size="base_medium"
            className="py-2 px-8 ml-auto self-end"
            onClick={handleEditVehicleClick}
          >
            Edit
          </Button>
          <Modal
            state={{
              isOpen: updateVehicleModal,
              setIsOpen: setUpdateVehicleModal,
            }}
          >
            <ModalContent>
              <EditVehicleDetailsFormModal
                data={{
                  id: vehicleDetails.id,
                  brand_name: brand,
                  plate_number: plate_number,
                  state: vehicleState,
                  model: model,
                  vehicle_type: vehicle_type,
                  color: color || "N/A",
                  manufacturer_year: manufacture_year,
                  visitor_category: category,
                }}
                setIsOpen={setUpdateVehicleModal}
              />
            </ModalContent>
          </Modal>
        </div>
      </InfoBox>

      {/* Previous Records */}
      <div className="space-y-4">
        <h2 className="text-brand-9 font-bold text-lg lg:text-xl">
          Previous Records
        </h2>
        <SectionSeparator />
        <div className="space-y-4">
          {checkInsOutData?.check_ins?.map((record) => (
            <PreviousRecord
              key={record.id}
              category={category}
              userId={Number(userId)}
              registrationDate={record.created_at}
              pictureSrc={pictureSrc}
              {...record}
            />
          ))}
        </div>
      </div>
      <Pagination
        totalPages={checkInsOutData?.last_page || 1}
        currentPage={checkInsOutData?.current_page || 1}
        onPageChange={handlePageChange}
      />
      <FixedFooter className="flex items-center justify-end">
        <Modal state={{ isOpen: modalOpen, setIsOpen: setModalOpen }}>
          <Button
            onClick={handleCreateNewRecordClick}
            size="sm_normal"
            className="py-2 px-8"
          >
            Create New Record
          </Button>
          <ModalContent>
            <CheckInOutForm
              onSubmit={handleCheckIn}
              loading={checking}
              useCase="vehicle"
              type="check-in"
              pictureSrc={pictureSrc}
              userName={full_name}
              id={userId}
              category={category}
              registrationDate={registrationDate}
            />
          </ModalContent>
        </Modal>
      </FixedFooter>
    </div>
  );
};

export default RecordPage;
