// "use client";
// import CustomTable from "@/components/Table/table";
// import type { DataItem } from "@/components/Table/types";
// import FilterBar from "@/components/FIlterBar/FilterBar";
// import { useCallback, useEffect, useRef, useState } from "react";
// import useFetch from "@/hooks/useFetch";
// import CustomLoader from "@/components/Loader/CustomLoader";
// import NetworkError from "@/components/Error/NetworkError";
// import { BranchFilter, FilterResult, PropertyFilter } from "../tenants/types";
// import { ReportsRequestParams } from "../tenants/data";
// import { AxiosRequestConfig } from "axios";
// import { BranchStaff } from "../../(messages-reviews)/messages/types";
// import dayjs from "dayjs";
// import SearchError from "@/components/SearchNotFound/SearchNotFound";
// import { hasActiveFilters } from "../data/utils";
// import EmptyList from "@/components/EmptyList/Empty-List";
// import ServerError from "@/components/Error/ServerError";
// import useAddressFromCoords from "@/hooks/useGeoCoding";
// import { useGlobalStore } from "@/store/general-store";
// import { useRouter, useSearchParams } from "next/navigation";
// import { debounce } from "@/utils/debounce";
// import { Activity } from "lucide-react";
// import {
//   DomainFields,
//   enrollment_subscriptions,
//   SponsorFields,
// } from "../../settings/add-on/data";
// import { usePersonalInfoStore } from "@/store/personal-info-store";
// import { EnrollmentApiResponse } from "../../settings/subscription/types";
// import useRefetchOnEvent from "@/hooks/useRefetchOnEvent";
// import { transformEnrollmentHistory } from "./data";
// import clsx from "clsx";

// interface EnrollmentQueryParams {
//   page?: number;
// }

// const SubscriptionRecord = () => {
//   const searchParams = useSearchParams();
//   const search = searchParams.get("b");
//   const setGlobalStore = useGlobalStore((s) => s.setGlobalInfoStore);
//   const { company_id } = usePersonalInfoStore();

//   const [state, setState] = useState<{
//     transactions: DataItem[];
//     current_page: number;
//     total_pages: number;
//     hasMore: boolean;
//   }>({
//     transactions: [],
//     current_page: 1,
//     total_pages: 1,
//     hasMore: false,
//   });

//   const [config, setConfig] = useState<AxiosRequestConfig | undefined>(
//     undefined
//   );
//   const observer = useRef<IntersectionObserver | null>(null);

//   // Only set config when company_id is available
//   useEffect(() => {
//     if (company_id) {
//       setConfig({
//         params: { page: 1 } as EnrollmentQueryParams,
//       });
//     }
//   }, [company_id]);

//   const {
//     data: companyEnrollments,
//     error: enrollmentErr,
//     loading,
//     silentLoading,
//     isNetworkError,
//     refetch: refetchEnrollments,
//   } = useFetch<EnrollmentApiResponse>(
//     company_id && config ? `/enrollments/${company_id}` : null,
//     config
//   );

//   useRefetchOnEvent("refetchEnrollments", () =>
//     company_id && config ? refetchEnrollments({ silent: true }) : null
//   );

//   // Transform and update state when new data is fetched
//   useEffect(() => {
//     if (!loading && companyEnrollments?.data?.enrollments) {
//       const newData = transformEnrollmentHistory(
//         companyEnrollments.data.enrollments,
//         companyEnrollments.data.pagination
//       );
//       const newTransactions = newData.transactions;
//       const currentTransactions = useGlobalStore.getState().subscriptions || [];

//       if (
//         JSON.stringify(currentTransactions) !== JSON.stringify(newTransactions)
//       ) {
//         setState((prevState) => {
//           const combinedTransactions =
//             newData.current_page === 1
//               ? newData.transactions
//               : [...prevState.transactions, ...newData.transactions];

//           // Remove duplicates based on id
//           const uniqueTransactions = combinedTransactions.filter(
//             (transaction, index, self) =>
//               index === self.findIndex((t) => t.id === transaction.id)
//           );
//           return {
//             ...prevState,
//             transactions: uniqueTransactions,
//             current_page: newData.current_page,
//             total_pages: newData.total_pages,
//             hasMore: newData.hasMore,
//           };
//         });
//         setGlobalStore("subscriptions", newTransactions);
//       }
//     }
//   }, [companyEnrollments, loading, setGlobalStore]);

//   // Fetch next page for infinite scroll
//   const fetchNextPage = useCallback(() => {
//     if (!state.hasMore || silentLoading || loading) {
//       return;
//     }

//     const nextPage = state.current_page + 1;
//     if (nextPage <= state.total_pages) {
//       setConfig((prev) => ({
//         ...prev,
//         params: {
//           ...(prev?.params || {}),
//           page: nextPage,
//         } as EnrollmentQueryParams,
//       }));
//     }
//   }, [
//     state.hasMore,
//     silentLoading,
//     loading,
//     state.current_page,
//     state.total_pages,
//   ]);

//   // Set up IntersectionObserver for infinite scroll
//   const lastRowRef = useCallback(
//     (node: HTMLElement | null) => {
//       if (!node || loading) return;

//       if (observer.current) observer.current.disconnect();

//       observer.current = new IntersectionObserver(
//         (entries) => {
//           if (entries[0].isIntersecting && state.hasMore && !silentLoading) {
//             fetchNextPage();
//           }
//         },
//         {
//           root: document.getElementById("table-container"),
//           rootMargin: "100px",
//           threshold: 0.1,
//         }
//       );

//       observer.current.observe(node);
//     },
//     [fetchNextPage, state.hasMore, silentLoading, loading]
//   );

//   console.log("companyEnrollments", companyEnrollments);

//   // Transform data for table rendering
//   const transformedTableData = state.transactions.map((t, index) => ({
//     ...t,
//     status: (
//       <span
//         className={clsx("font-medium", {
//           "text-status-success-3": t.status.toLowerCase() === "active",
//           "text-status-error-primary":
//             t.status.toLowerCase() === "inactive" ||
//             t.status.toLowerCase() === "failed",
//           "text-yellow-500": t.status.toLowerCase() === "pending",
//         })}
//       >
//         {t.status}
//       </span>
//     ),
//     ref: index === state.transactions.length - 1 ? lastRowRef : null,
//   }));

//   const handleExport = () => {
//     if (!companyEnrollments || loading) return;
//     setGlobalStore("subscriptions", state.transactions);
//     // router.push("/reports/adds-on-domain/export");
//   };

//   if (isNetworkError) return <NetworkError />;
//   if (enrollmentErr) return <ServerError error={enrollmentErr} />;
//   if (loading && state.transactions.length === 0)
//     return <CustomLoader layout="page" view="table" />;

//   return (
//     <div className="space-y-9">
//       <FilterBar
//         exports
//         isDateTrue
//         onBack={search ? true : false}
//         pageTitle="Subscription History"
//         aboutPageModalData={{
//           title: "Subscription History",
//           description:
//             "This page contains a list of listing subscription history",
//         }}
//         searchInputPlaceholder="Search for subscriptions"
//         handleFilterApply={() => {}}
//         handleSearch={() => {}}
//         hasGridListToggle={false}
//         exportHref="/reports/subscription-history/export"
//         xlsxData={state?.transactions}
//         fileLabel={"Subscriptions"}
//       />
//       <section>
//         {state.transactions.length === 0 ? (
//           <EmptyList
//             noButton
//             title=" No Previous Subscription Record Found"
//             body={
//               <p>
//                 You currently do not have any previous records associated with
//                 this subscription plan. Once you subscribe, your subscription
//                 history and related details will appear here for future
//                 reference and tracking.
//                 <br />
//                 <br />
//               </p>
//             }
//           />
//         ) : (
//           <CustomTable
//             fields={enrollment_subscriptions.fields}
//             data={transformedTableData}
//             tableHeadClassName="h-[45px]"
//           />
//         )}
//       </section>
//     </div>
//   );
// };

// export default SubscriptionRecord;