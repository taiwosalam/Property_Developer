// import { KeyValueListProps } from "./types";
// import clsx from "clsx";

// export const KeyValueList = <T extends object>({
//   styles,
//   data = {},
//   chunkSize = 3,
//   referenceObject,
//   direction = "row",
//   truncateLength, // Add truncateLength prop
// }: KeyValueListProps<T>) => {
//   const keys = Object.keys(referenceObject) as Array<keyof T>;

//   // Helper function to truncate text
//   const truncateText = (text: string, length?: number): string => {
//     if (length === undefined || text.length <= length) {
//       return text;
//     }
//     return text.slice(0, length) + "...";
//   };

//   const chunkArray = (arr: Array<keyof T>, size: number) =>
//     arr.reduce(
//       (acc, _, i) => (i % size === 0 ? [...acc, arr.slice(i, i + size)] : acc),
//       [] as Array<Array<keyof T>>
//     );

//   const chunkedKeys = chunkArray(keys, chunkSize);

//   return (
//     <>
//       {chunkedKeys.map((chunk, chunkIndex) => (
//         <div
//           key={chunkIndex}
//           className={clsx("flex-1 text-base font-medium capitalize", {
//             "flex gap-10": direction === "row",
//             "custom-flex-col gap-6": direction === "column",
//           })}
//         >
//           {direction === "column" ? (
//             <>
//               {chunk.map((key) => (
//                 <div
//                   key={`${chunkIndex}-${String(key)}`}
//                   className="custom-flex-col gap-2"
//                 >
//                   <p
//                     className="text-[#747474] dark:text-darkText-1 whitespace-nowrap"
//                     style={styles?.[key]?.label}
//                   >
//                     {String(key).split("_").join(" ")}
//                   </p>
//                   <p
//                     className="text-black dark:text-darkText-2 line-clamp-1"
//                     style={styles?.[key]?.value}
//                   >
//                     {/* Apply truncation to the value */}
//                     {data && data[key] !== undefined
//                       ? truncateText(String(data[key]), truncateLength)
//                       : "---"}
//                   </p>
//                 </div>
//               ))}
//             </>
//           ) : (
//             <>
//               <div className="custom-flex-col gap-4">
//                 {chunk.map((key) => (
//                   <p
//                     key={`${chunkIndex}-${String(key)}`}
//                     className="text-[#747474] dark:text-darkText-1 whitespace-nowrap"
//                     style={styles?.[key]?.label}
//                   >
//                     {String(key).split("_").join(" ")}
//                   </p>
//                 ))}
//               </div>
//               <div className="custom-flex-col gap-4">
//                 {chunk.map((key) => (
//                   <p
//                     key={`${chunkIndex}-${String(key)}`}
//                     className="text-black dark:text-darkText-2"
//                     style={styles?.[key]?.value}
//                   >
//                     {/* Apply truncation to the value */}
//                     {data && data[key] !== undefined
//                       ? truncateText(String(data[key]), truncateLength)
//                       : "---"}
//                   </p>
//                 ))}
//               </div>
//             </>
//           )}
//         </div>
//       ))}
//     </>
//   );
// };

// export default KeyValueList;





// "use client";
// import { useEffect, useState } from "react";
// import LandlordTenantModalPreset from "../Management/landlord-tenant-modal-preset";
// import SettingsLegalDrawer, {
//   Checkbox,
// } from "../Settings/Modals/settings-legal-drawer";
// import { Drawer } from "@mui/material";
// import { useDrawerStore } from "@/store/drawerStore";
// import { checkboxOptions, transformDocumentsResponse } from "./data";
// import useFetch from "@/hooks/useFetch";
// import CheckBoxLoader from "../Loader/CheckBoxLoader";
// import OtherAgreement from "./other-agrement";
// import TenancyAgreement from "./TenancyAgrrement";

// const CreateTenancyAggrementModal = () => {
//   const [selectedOption, setSelectedOption] = useState<string | null>(null);
//   const { setSelectedLegalOption, selectedLegalOption } = useDrawerStore();
//   const [step, setStep] = useState<number>(0);

//   const [checkboxOptions, setCheckboxOptions] = useState<CheckboxOption[]>([]);
//   const { data, loading, error } = useFetch<DocumentsAPIResponse>(
//     "/property-document/documents"
//   );

//   const IS_TENANCY_SELECTED =
//     selectedLegalOption?.title === "Tenancy Agreement";

//   useEffect(() => {
//     if (data) {
//       const options = transformDocumentsResponse(data);
//       setCheckboxOptions(options);
//     }
//   }, [data]);

//   // HANDLE CHECKBOX CHANGE
//   const handleCheckboxChange = (value: string | number) => {
//     setSelectedOption(value.toString());
//     const selectedOption = checkboxOptions.find(
//       (option) => option.id === value
//     );
//     if (selectedOption) {
//       setSelectedLegalOption({
//         title: selectedOption.title,
//         description: selectedOption.description,
//         amount: selectedOption.amount ?? 0,
//         id: selectedOption.id ?? 0,
//       });
//     }
//   };

//   return (
//     <>
//       <LandlordTenantModalPreset
//         {...(selectedOption
//           ? { back: { handleBack: () => setSelectedOption(null) } }
//           : {})}
//         style={{ maxWidth: "714px", overflow: "visible" }}
//         heading={
//           selectedOption
//             ? checkboxOptions.find((option) => option.value === selectedOption)
//                 ?.title || ""
//             : "Tenancy Legal Procedure"
//         }
//       >
//         {selectedOption ? (
//           <>{IS_TENANCY_SELECTED ? <TenancyAgreement /> : <OtherAgreement />}</>
//         ) : (
//           <div className="flex flex-col gap-1">
//             <h2 className="text-text-primary text-[20px] font-bold dark:text-white text-base not-italic leading-[32px]">
//               Engage legal counsel.
//             </h2>
//             <p className="text-text-disabled dark:text-darkText-1 text-sm font-medium">
//               The legal steps and processes involved in renting or leasing
//               property, usually regulated by landlord-tenant laws and
//               regulations. Please choose any options below that are most
//               applicable to the property unit.
//             </p>
//           </div>
//         )}

//         {/* Render checkboxes only if no option is selected */}
//         {loading ? (
//           <CheckBoxLoader />
//         ) : (
//           !selectedOption && (
//             <div className="flex flex-col gap-4 mt-4">
//               {checkboxOptions.map((option) => (
//                 <Checkbox
//                   key={option.value}
//                   title={option.title}
//                   checked={selectedOption === option.value}
//                   groupName="legal_process"
//                   state={{
//                     isChecked: selectedOption === option.value,
//                     setIsChecked: () => {
//                       handleCheckboxChange(option.id ?? 0);
//                     },
//                   }}
//                   noCheckbox={true}
//                 >
//                   <p className="text-sm text-darkText-secondary capitalize text-text-disabled tracking-[0px]">
//                     {option.description}
//                   </p>
//                 </Checkbox>
//               ))}
//             </div>
//           )
//         )}
//       </LandlordTenantModalPreset>
//     </>
//   );
// };

// export default CreateTenancyAggrementModal;

// // DRAWER COMPONENT FLOW
// export const DrawerComponent = () => {
//   const { isDrawerOpen, closeDrawer, selectedLegalOption } = useDrawerStore();
//   return (
//     <Drawer
//       anchor="bottom"
//       open={isDrawerOpen}
//       onClose={closeDrawer}
//       classes={{ paper: "custom-round-scrollbar" }}
//       sx={{
//         "& .MuiPaper-root": {
//           borderTopLeftRadius: "32px",
//           borderTopRightRadius: "32px",
//           overflow: "auto",
//           height: "500px",
//         },
//         zIndex: 1,
//       }}
//     >
//       <SettingsLegalDrawer
//         onClose={closeDrawer}
//         noCheckbox={true}
//         selectedLegalOption={selectedLegalOption}
//       />
//     </Drawer>
//   );
// };






"use client";

import { useState, useEffect, useRef, useCallback } from "react";
import clsx from "clsx";
import BackButton from "@/components/BackButton/back-button";
import FilterBar from "@/components/FIlterBar/FilterBar";
import CustomTable from "@/components/Table/table";
import {
  walletTableFields,
  computeStatsTotals,
  determinePercentageDifference,
  determineTrend,
} from "../data";
import {
  initialPageData,
  transactionHistoryFilterMenu,
  transformAllTransactionsResponse,
} from "./data";
import TableLoading from "@/components/Loader/TableLoading";
import useFetch from "@/hooks/useFetch";
import type { AllTransactionsResponse, TransactionQueryParams } from "./types";
import type { FilterResult } from "@/components/Management/Landlord/types";
import { AxiosRequestConfig } from "axios";
import dayjs from "dayjs";
import NetworkError from "@/components/Error/NetworkError";
import { getTransactionIcon } from "@/components/Wallet/icons";
import { useGlobalStore } from "@/store/general-store";
import ServerError from "@/components/Error/ServerError";
import WalletAnalytics from "@/components/Wallet/wallet-analytics";
import { DateRangeSelector } from "./components";
import { useSearchParams } from "next/navigation";

const TransactionHistory = () => {
  const [state, setState] = useState(initialPageData);
  const setGlobalStore = useGlobalStore((s) => s.setGlobalInfoStore);
  const branchWalletTransactions = useGlobalStore(
    (s) => s.branchWalletTransactions
  );
  const timeRange = useGlobalStore((s) => s.timeRange);
  const selectedDateRange = useGlobalStore((s) => s.selectedDateRange);
  const filteredTransactions = useGlobalStore((s) => s.wallet_transactions);
  const [config, setConfig] = useState<AxiosRequestConfig>({
    params: {
      page: 1,
    } as TransactionQueryParams,
  });
  const observer = useRef<IntersectionObserver | null>(null);
  const isBranch = Number(useSearchParams().get("branch")) > 0;

  const [appliedFilters, setAppliedFilters] = useState<FilterResult>({
    options: [],
    menuOptions: {},
    startDate: null,
    endDate: null,
  });

  const isFilterApplied = () => {
    const { options, menuOptions, startDate, endDate } = appliedFilters;
    return (
      options.length > 0 ||
      Object.keys(menuOptions).some((key) => menuOptions[key].length > 0) ||
      startDate !== null ||
      endDate !== null
    );
  };

  const {
    data: apiData,
    loading,
    silentLoading,
    error,
    isNetworkError,
  } = useFetch<AllTransactionsResponse>("transactions", config);

  const TRANSACTIONS = isBranch ? branchWalletTransactions : state.transactions;

  // Compute stats for filtered transactions
  const currentTotals = computeStatsTotals(
    TRANSACTIONS || [],
    selectedDateRange
  );
  // const currentTotals = computeStatsTotals(
  //   state.transactions,
  //   selectedDateRange
  // );

  // Compute totals for the previous period
  const previousRange = (() => {
    if (!selectedDateRange?.from || !selectedDateRange?.to) {
      return undefined;
    }
    const fromDate = new Date(selectedDateRange.from);
    const toDate = new Date(selectedDateRange.to);
    const rangeDays =
      Math.ceil(
        (toDate.getTime() - fromDate.getTime()) / (1000 * 60 * 60 * 24)
      ) + 1;
    const previousFrom = new Date(fromDate);
    previousFrom.setDate(fromDate.getDate() - rangeDays);
    const previousTo = new Date(fromDate);
    previousTo.setDate(fromDate.getDate() - 1);
    return { from: previousFrom, to: previousTo };
  })();
  // const previousTotals = computeStatsTotals(state.transactions, previousRange);
  const previousTotals = computeStatsTotals(TRANSACTIONS || [], previousRange);

  // Percentage differences and trends
  const fundsPercent = determinePercentageDifference(
    previousTotals.total_funds,
    currentTotals.total_funds
  );
  const fundsUpDown = determineTrend(
    currentTotals.total_funds,
    previousTotals.total_funds
  );

  const debitPercent = determinePercentageDifference(
    previousTotals.total_debit,
    currentTotals.total_debit
  );
  const debitUpDown = determineTrend(
    currentTotals.total_debit,
    previousTotals.total_debit
  );

  const creditPercent = determinePercentageDifference(
    previousTotals.total_credit,
    currentTotals.total_credit
  );
  const creditUpDown = determineTrend(
    currentTotals.total_credit,
    previousTotals.total_credit
  );

  // Save stats and date range to global store
  useEffect(() => {
    setGlobalStore("wallet_stats", {
      total_funds: currentTotals.total_funds,
      total_debit: currentTotals.total_debit,
      total_credit: currentTotals.total_credit,
      funds_trend: {
        from: `previous ${
          timeRange === "90d"
            ? "3 months"
            : timeRange === "30d"
            ? "30 days"
            : timeRange === "7d"
            ? "7 days"
            : timeRange === "1d"
            ? "day"
            : "period"
        }`,
        type: fundsUpDown as "up" | "down" | "none",
        percent: Number(fundsPercent),
      },
      debit_trend: {
        from: `previous ${
          timeRange === "90d"
            ? "3 months"
            : timeRange === "30d"
            ? "30 days"
            : timeRange === "7d"
            ? "7 days"
            : timeRange === "1d"
            ? "day"
            : "period"
        }`,
        type: debitUpDown as "up" | "down" | "none",
        percent: Number(debitPercent),
      },
      credit_trend: {
        from: `previous ${
          timeRange === "90d"
            ? "3 months"
            : timeRange === "30d"
            ? "30 days"
            : timeRange === "7d"
            ? "7 days"
            : timeRange === "1d"
            ? "day"
            : "period"
        }`,
        type: creditUpDown as "up" | "down" | "none",
        percent: Number(creditPercent),
      },
    });
    setGlobalStore("wallet_date_range", { timeRange, selectedDateRange });
  }, [
    currentTotals,
    fundsPercent,
    fundsUpDown,
    debitPercent,
    debitUpDown,
    creditPercent,
    creditUpDown,
    timeRange,
    selectedDateRange,
    setGlobalStore,
  ]);

  const fetchNextPage = useCallback(() => {
    if (state.hasMore && !silentLoading) {
      setConfig((prev) => ({
        params: {
          ...prev.params,
          page: state.current_page + 1,
        } as TransactionQueryParams,
      }));
    }
  }, [state.hasMore, silentLoading, state.current_page]);

  const lastRowRef = useCallback(
    (node: HTMLElement | null) => {
      if (observer.current) observer.current.disconnect();
      observer.current = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting && state.hasMore) {
          fetchNextPage();
        }
      });
      if (node) observer.current.observe(node);
    },
    [fetchNextPage, state.hasMore]
  );

  useEffect(() => {
    if (apiData) {
      setState((prevState) => {
        const newTransactions = transformAllTransactionsResponse(apiData);
        const combinedTransactions = [
          ...prevState.transactions,
          ...newTransactions.transactions,
        ];
        const uniqueTransactions = combinedTransactions.filter(
          (transaction, index, self) =>
            index === self.findIndex((t) => t.id === transaction.id)
        );

        // Save unique transactions to global store
        setGlobalStore("wallet_transactions", uniqueTransactions);

        if (newTransactions.current_page === 1) {
          return {
            ...prevState,
            ...newTransactions,
            transactions: uniqueTransactions,
          };
        } else {
          return {
            ...prevState,
            transactions: uniqueTransactions,
            current_page: newTransactions.current_page,
            total_pages: newTransactions.total_pages,
            hasMore: newTransactions.hasMore,
          };
        }
      });
    }
  }, [apiData, setGlobalStore]);

  // const transformedWalletTableData = state.transactions.map((t, index) => ({
  const transformedWalletTableData = (TRANSACTIONS || []).map((t, index) => ({
    ...t,
    amount: (
      <span
        className={clsx({
          "text-status-success-3": t.type === "credit",
          "text-status-error-primary": t.type === "debit",
        })}
      >
        {`${t.type === "credit" ? "+" : t.type === "debit" ? "-" : ""}${
          t.amount
        }`}
      </span>
    ),
    icon: (
      <div
        className={clsx(
          "flex items-center justify-center w-9 h-9 rounded-full",
          {
            "bg-status-error-1 text-status-error-primary": t.type === "debit",
            "bg-status-success-1 text-status-success-primary":
              t.type === "credit" || t.type === "DVA",
          }
        )}
      >
        {getTransactionIcon(t.source, t.transaction_type)}
      </div>
    ),
    ref: index === state.transactions.length - 1 ? lastRowRef : null,
  }));

  const handleFilterApply = (filters: FilterResult) => {
    setAppliedFilters(filters);
    const { menuOptions, startDate, endDate } = filters;
    const queryParams: TransactionQueryParams = {
      page: 1,
    };
    const status = menuOptions["Status"]?.[0];
    const type = menuOptions["Type"]?.[0];
    if (startDate) {
      queryParams.from = dayjs(startDate).format("YYYY-MM-DD");
    }
    if (endDate) {
      queryParams.to = dayjs(endDate).format("YYYY-MM-DD");
    }
    if (status) {
      queryParams.status = status;
    }
    if (type) {
      queryParams.type = type;
    }
    setConfig({
      params: queryParams,
    });
  };

  // Get display text for current timeRange
  const getTimeRangeDisplayText = () => {
    switch (timeRange) {
      case "90d":
        return "Last 3 months";
      case "30d":
        return "Last 30 days";
      case "7d":
        return "Last 7 days";
      case "1d":
        return "Yesterday";
      case "custom":
        return "Custom";
      default:
        return "Last 30 days";
    }
  };

  if (isNetworkError) return <NetworkError />;
  if (error) return <ServerError error={error} />;

  return (
    <div className="custom-flex-col gap-8">
      <div className="flex justify-between items-center">
        <FilterBar
          pageTitle="Transaction History"
          hasGridListToggle={false}
          handleFilterApply={handleFilterApply}
          hiddenSearchInput
          exports
          isDateTrue
          exportHref="/wallet/audit-trail/export"
          filterOptionsMenu={transactionHistoryFilterMenu}
          appliedFilters={appliedFilters}
          fileLabel={"Wallet Transactions"}
          xlsxData={filteredTransactions}
          onBack
        />
        {/* <DateRangeSelector /> */}
      </div>
      <div className="flex flex-col xl:flex-row gap-8">
        <div className="custom-flex-col gap-10 flex-1">
          <div className="flex flex-col lg:flex-row gap-6">
            <WalletAnalytics
              title="funds"
              amount={currentTotals.total_funds}
              trend={{
                from: `previous ${
                  timeRange === "90d"
                    ? "3 months"
                    : timeRange === "30d"
                    ? "30 days"
                    : timeRange === "7d"
                    ? "7 days"
                    : timeRange === "1d"
                    ? "day"
                    : "period"
                }`,
                type: fundsUpDown as "up" | "down" | "none",
                percent: Number(fundsPercent),
              }}
            />
            <WalletAnalytics
              title="debit"
              amount={currentTotals.total_debit}
              trend={{
                from: `previous ${
                  timeRange === "90d"
                    ? "3 months"
                    : timeRange === "30d"
                    ? "30 days"
                    : timeRange === "7d"
                    ? "7 days"
                    : timeRange === "1d"
                    ? "day"
                    : "period"
                }`,
                type: debitUpDown as "up" | "down" | "none",
                percent: Number(debitPercent),
              }}
            />
            <WalletAnalytics
              title="credit"
              amount={currentTotals.total_credit}
              trend={{
                from: `previous ${
                  timeRange === "90d"
                    ? "3 months"
                    : timeRange === "30d"
                    ? "30 days"
                    : timeRange === "7d"
                    ? "7 days"
                    : timeRange === "1d"
                    ? "day"
                    : "period"
                }`,
                type: creditUpDown as "up" | "down" | "none",
                percent: Number(creditPercent),
              }}
            />
          </div>
        </div>
      </div>
      {loading ? (
        <TableLoading />
      ) : (
        <section>
          <CustomTable
            fields={walletTableFields}
            data={transformedWalletTableData}
            tableBodyCellSx={{
              paddingTop: "12px",
              paddingBottom: "12px",
              fontSize: "16px",
              whiteSpace: "nowrap",
            }}
            tableHeadCellSx={{
              paddingTop: "14px",
              paddingBottom: "14px",
              fontSize: "16px",
            }}
          />
          {silentLoading && (
            <div className="flex items-center justify-center py-4">
              <div className="loader" />
            </div>
          )}
        </section>
      )}
    </div>
  );
};

export default TransactionHistory;
