

LAYOUT ROUTES
- all / routes are for director role
- all /manager routes are for manager role
- all /accountant route are for account role


FILTER MODAL
- A component for filtering 
- it accept these props

--- filterOptionsMenu > an array object of filter options
export const maintenanceFilterOptionsWithDropdown: FilterOptionMenu[] = [
  {
    label: "Property",
    value: [
      { label: "Property 1", value: "Property1" },
      { label: "Property 2", value: "Property2" },
      { label: "Property 3", value: "Property3" },
    ],
  },
  {
    radio: true,
    label: "Status",
    value: [
      { label: "all", value: "all", isChecked: true }, use isChecked to check any value by default
      { label: "Pending", value: "Pending" },
      { label: "Ongoing", value: "Ongoing" },
      { label: "Completed", value: "Completed" },
    ],
  },
];


---FilterOptions > an object for filter option without menu
check management/vehicles-record filter for reference
    filterOptions={{
          radio: true, --- to change the checkbox to radio option
          value: [
            { label: "All", value: "all" },
            { label: "Rental", value: "rental" },
            { label: "Facility", value: "facility" },
          ],
        }}














// ================ transform /unit/${id}/view =================
// export const transformUnitData = (response: any) => {
//   const data = response.data;
//   const occupant = response?.data?.occupant;
//   const previous_records = response.data.previous_records;
//   // const previous_tenants = response.data.previous_tenants;
//   console.log("data to trans", data);
//   return {
//     title: data.property.title,
//     unit_id: data.id,
//     description: data.property.description,
//     unit_name: `${data.unit_name} ${data.unit_type}`,
//     address: data.property.full_address,
//     unitNumber: "",
//     images: data.images.map((image: any) => image.path),
//     categories: data.property.category,
//     unitPreference: data.unit_preference,
//     unitType: data.unit_type,
//     unitSubType: data.unit_sub_type,
//     state: data.property.state,
//     localGovernment: data.property.local_government,
//     accountOfficer: data.property.account_officer.name,
//     bedrooms: data.bedroom,
//     bathrooms: data.bathroom,
//     landlord_name: data.landlord.name,
//     toilets: data.toilet,
//     tenant_name: data.user.name,
//     unit_features: data.facilities,
//     newTenantTotalPrice: data.total_package,
//     currency: data.property.currency,
//     newTenantPrice: data.fee_amount
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.fee_amount))}`
//       : undefined,
//     inspectionFee: data.inspection_fee
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.inspection_fee))}`
//       : undefined,
//     legalFee: data.legal_fee
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.legal_fee))}`
//       : undefined,
//     vat_amount: data.user.vat_amount
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.user.vat_amount))}`
//       : "",
//     renew_vat_amount: data.user.renew_vat_amount
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.user.renew_vat_amount))}`
//       : "--- ---",
//     renewalTenantTotalPrice: data.renew_total_package,
//     renew_fee_period: data.renew_fee_period,
//     renewalTenantPrice: data.renew_fee_amount
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.renew_fee_amount))}`
//       : undefined,
//     renew_service_charge: data.renew_service_charge
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.renew_service_charge))}`
//       : undefined,
//     renew_other_charge: data.renew_other_charge
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.renew_other_charge))}`
//       : undefined,
//     management_fee: data.management_fee
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.management_fee))}`
//       : undefined,
//     en_suit: data.en_suit,
//     prepaid: data.prepaid,
//     wardrobe: data.wardrobe,
//     fee_period: data.fee_period,
//     branchName: data.property.branch.branch_name,
//     agency_fee: data.user.property.agency_fee,
//     group_chat: convertToYesNo(Number(data.property.group_chat)),
//     rent_penalty: convertToYesNo(Number(data.property.rent_penalty)),
//     caution_deposit: data.user.property.caution_deposit,
//     // PROPERTY VALUES
//     property_title: data.property.title,
//     whoToCharge: data.user.property.who_to_charge_new_tenant,
//     whoToChargeRenew: data.user.property.who_to_charge_renew_tenant,
//     property_state: data.property.state,
//     property_address: `${data.property.full_address}, ${data.property.city_area} ${data.property.local_government}, ${data.property.state}`,
//     caution_fee: data.caution_fee
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.caution_fee))}`
//       : undefined,
//     location: "",
//     fee_amount: data.fee_amount,
//     propertyId: data.property.id,
//     total_package: data.total_package,
//     // caution_fee: data.caution_fee,
//     security_fee: data.security_fee
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.security_fee))}`
//       : undefined,
//     other_charge: data.other_charge
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.other_charge))}`
//       : undefined,
//     unitAgentFee: data.agency_fee
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.agency_fee))}`
//       : undefined,
//     service_charge: data.service_charge
//       ? `${
//           currencySymbols[
//             data?.property?.currency as keyof typeof currencySymbols
//           ] || "₦"
//         }${formatNumber(parseFloat(data.service_charge))}`
//       : undefined,
//     occupant: occupant
//       ? {
//           id: occupant.id,
//           name: occupant.name,
//           email: occupant.email,
//           userTag: occupant.userTag,
//           avatar: occupant.avatar || empty,
//           gender: occupant.gender,
//           birthday: occupant.birthday,
//           religion: occupant.religion,
//           phone: occupant.phone,
//           maritalStatus: occupant.maritalStatus,
//           address: occupant.address,
//           city: occupant.city,
//           state: occupant.state,
//           lg: occupant.lg,
//           badgeColor:
//             occupant.user_tier || occupant.tier
//               ? tierColorMap[
//                   (occupant?.user_tier ||
//                     occupant.tier) as keyof typeof tierColorMap
//                 ]
//               : undefined,
//         }
//       : undefined,
//     previous_records: previous_records ? previous_records : undefined,
//     previous_tenants: data.previous_tenants ? data.previous_tenants : undefined,
//   };
// };















// "use client";
// import { useState } from "react";
// import { OccupantProfileProps, Occupant } from "./types";
// import { MatchedProfile } from "./matched-profile";
// import { FeeBreakdown } from "./fee-breakdown";
// import { ProfileForm } from "./profile-form";
// import { RentSectionTitle } from "./rent-section-container";
// import { Skeleton } from "@mui/material";
// import { RentPeriod } from "./data";
// import { useGlobalStore } from "@/store/general-store";

// export const OccupantProfile: React.FC<OccupantProfileProps> = ({
//   isRental,
//   occupants,
//   feeDetails,
//   total_package,
//   id,
//   loading,
//   setSelectedTenantId,
//   setSelectedCheckboxOptions,
//   period,
//   setStart_date,
//   setIsPastDate,
//   setDueDate,
// }) => {
//   const selectedOccupant = useGlobalStore((state) => state.selectedOccupant); 
//   // const [selectedOccupant, setSelectedOccupant] = useState<Occupant | null>(
//   //   null
//   // );
//   const handleOccupantSelect = (occupant: Occupant | null) => {
//     setSelectedOccupant(occupant);
//   };
//   const [occupantLoading, setOccupantLoading] = useState(false);
//   const [occupantError, setOccupantError] = useState<Error | null>(null);

//   return (
//     <>
//       {loading ? (
//         <OccupantProfileLoading />
//       ) : (
//         <div className="pt-6 space-y-4">
//           <RentSectionTitle>
//             {isRental ? "Tenant" : "Occupant"} Profile
//           </RentSectionTitle>
//           <div className="lg:flex lg:gap-10">
//             {/* Left Column */}
//             <div className="lg:w-3/5 space-y-5">
//               <div className="h-[2px] bg-[#C0C2C8] opacity-20" />
//               <ProfileForm
//                 period={period as RentPeriod}
//                 setSelectedCheckboxOptions={setSelectedCheckboxOptions}
//                 isRental={isRental}
//                 selectedOccupant={selectedOccupant}
//                 occupants={occupants}
//                 onOccupantSelect={handleOccupantSelect}
//                 onLoadingChange={setOccupantLoading}
//                 onError={setOccupantError}
//                 occupantLoading={occupantLoading}
//                 occupantError={occupantError}
//                 setSelectedTenantId={setSelectedTenantId}
//                 setStart_date={setStart_date}
//                 setIsPastDate={setIsPastDate} 
//                 setDueDate={setDueDate}
//               />
//               <FeeBreakdown
//                 id={id}
//                 total_package={total_package}
//                 feeDetails={feeDetails}
//                 isRental={isRental}
//               />
//             </div>

//             {/* Right Column */}
//             <div className="mt-5 lg:mt-0 lg:flex-1 hidden lg:block">
//               <MatchedProfile
//                 occupant={selectedOccupant}
//                 isLoading={occupantLoading}
//                 error={occupantError}
//                 title="Matched Profile"
//               />
//             </div>
//           </div>
//         </div>
//       )}
//     </>
//   );
// };

// const OccupantProfileLoading = () => {
//   return (
//     <Skeleton
//       width={"100%"}
//       height={200}
//       animation="wave"
//       sx={{
//         transform: "none",
//       }}
//     />
//   );
// };














// "use client";

// import Select from "@/components/Form/Select/select";
// import { useState, useEffect } from "react";
// import { Occupant, TenantResponse } from "./types";
// import { Modal, ModalContent, ModalTrigger } from "@/components/Modal/modal";
// import Button from "@/components/Form/Button/button";
// import AddOccupantWithId from "./add-occupant-with-id-modal";
// import DateInput from "@/components/Form/DateInput/date-input";
// import Checkbox from "@/components/Form/Checkbox/checkbox";
// import { MatchedProfile } from "./matched-profile";
// import { calculateDueDate, transformTenantData, type RentPeriod } from "./data";
// import { RentSectionTitle } from "./rent-section-container";
// import { Dayjs } from "dayjs";
// import useFetch from "@/hooks/useFetch";
// import dayjs from "dayjs";
// import SelectWithImage from "@/components/Form/Select/select-with-image";
// import { empty } from "@/app/config";
// import { useGlobalStore } from "@/store/general-store";

// export const ProfileForm: React.FC<{
//   occupants: { name: string; id: string; picture?: string }[];
//   isRental: boolean;
//   selectedOccupant: Occupant | null;
//   onOccupantSelect: (occupant: Occupant | null) => void;
//   onLoadingChange: (isLoading: boolean) => void;
//   onError: (error: Error | null) => void;
//   occupantLoading: boolean;
//   occupantError: Error | null;
//   setSelectedTenantId?: any;
//   setStart_date?: any;
//   setDueDate?: (date: Dayjs | null) => void; // Add setDueDate
//   setSelectedCheckboxOptions?: any;
//   period: RentPeriod;
//   setIsPastDate?: (isPast: boolean) => void;
// }> = ({
//   occupants,
//   isRental,
//   selectedOccupant,
//   onOccupantSelect,
//   onError,
//   onLoadingChange,
//   occupantLoading,
//   occupantError,
//   setSelectedTenantId,
//   setStart_date,
//   setDueDate,
//   setSelectedCheckboxOptions,
//   period,
//   setIsPastDate,
// }) => {
//   const { setGlobalInfoStore } = useGlobalStore();
//   const [selectedId, setSelectedId] = useState<string>("");
//   const [isModalIdSelected, setIsModalIdSelected] = useState<boolean>(false);

//   const [startDate, setStartDate] = useState<Dayjs | null>(null);
//   const [dueDate, setDueDateLocal] = useState<Dayjs | null>(null);
//   const [rentPeriod, setRentPeriod] = useState<RentPeriod>(period);

//   useEffect(() => {
//     if (period) {
//       setRentPeriod(period);
//     }
//   }, [period]);

//   // Handle select id from dropdown
//   const handleSelectId = (id: string) => {
//     setSelectedId(id);
//     setSelectedTenantId(id);
//     setIsModalIdSelected(false);
//   };

//   // Callback function to receive the ID from AddOccupantWithId
//   const handleTenantIdFromModal = (tenantId: string) => {
//     setSelectedId(tenantId);
//     setSelectedTenantId(tenantId);
//     setIsModalIdSelected(true);
//   };

//   // useEffect(() => {
//   //   if (!selectedId) {
//   //     onOccupantSelect(null);
//   //     onError(null);
//   //     return;
//   //   }
//   // }, [selectedId, onOccupantSelect, onError]);

//   const { data, loading, error } = useFetch<TenantResponse>(
//     `/tenant/${selectedId}`
//   );

//   // useEffect(() => {
//   //   if (data) {
//   //     const transformedData = transformTenantData(data);
//   //     onOccupantSelect(transformedData);
//   //   }
//   // }, [data]);

//   useEffect(() => {
//     if (data) {
//       const transformedData = transformTenantData(data);
//       setGlobalInfoStore("selectedOccupant", transformedData); // Store selected occupant
//     } else {
//       setGlobalInfoStore("selectedOccupant", null); // Clear occupant if no data
//     }
//   }, [data, setGlobalInfoStore]);

//   // Calculate due date and update isPastDate when start date changes
//   useEffect(() => {
//     if (!startDate) {
//       setDueDateLocal(null);
//       setDueDate?.(null);
//       setIsPastDate?.(false);
//       setGlobalInfoStore("isPastDate", false); // Clear isPastDate
//       return;
//     }
//     const formattedStartDate = startDate.format("YYYY-MM-DD");
//     setStart_date(formattedStartDate);
//     const calculatedDueDate = calculateDueDate(startDate, rentPeriod);
//     setDueDateLocal(calculatedDueDate);
//     setDueDate?.(calculatedDueDate);
//     const isPast = startDate.isBefore(dayjs(), "day");
//     setIsPastDate?.(isPast);
//     setGlobalInfoStore("isPastDate", isPast);
//   }, [
//     startDate,
//     rentPeriod,
//     setStart_date,
//     setDueDate,
//     setIsPastDate,
//     setGlobalInfoStore,
//   ]);

//   const [selectedOptions, setSelectedOptions] = useState<
//     Record<string, boolean>
//   >({
//     create_invoice: true,
//     mobile_notification: true,
//     sms_alert: true,
//     email_alert: true,
//   });

//   const handleCheckboxChange = (optionKey: string) => (checked: boolean) => {
//     setSelectedOptions((prev) => ({
//       ...prev,
//       [optionKey]: checked,
//     }));
//   };

//   useEffect(() => {
//     if (setSelectedCheckboxOptions) {
//       setSelectedCheckboxOptions(selectedOptions);
//     }
//   }, [selectedOptions, setSelectedCheckboxOptions]);

//   const options = [
//     "Create Invoice",
//     "Mobile Notification",
//     "SMS Alert",
//     "Email Alert",
//   ];

//   // Determine the value to set for the Select component
//   const selectValue = isModalIdSelected ? "" : selectedId;

//   return (
//     <div className="space-y-6">
//       <div className="space-y-4">
//         <div className="flex flex-col md:flex-row md:items-end gap-x-[35px] gap-y-4">
//           <SelectWithImage
//             id={`available_${isRental ? "tenant" : "occupant"}`}
//             label={`Choose Available ${isRental ? "Tenant" : "Occupant"}`}
//             options={occupants.map((occupant) => ({
//               label: occupant.name,
//               value: occupant.id,
//               icon: occupant.picture || empty,
//             }))}
//             className="md:flex-1 md:max-w-[300px]"
//             onChange={(value) => handleSelectId(value)}
//           />
//           <Modal>
//             <ModalTrigger asChild>
//               <Button size="16_bold" className="py-2 px-6">
//                 Choose With ID
//               </Button>
//             </ModalTrigger>
//             <ModalContent>
//               <AddOccupantWithId onTenantIdSelect={handleTenantIdFromModal} />
//             </ModalContent>
//           </Modal>
//         </div>
//         <div className="block lg:hidden">
//           <MatchedProfile
//             occupant={selectedOccupant}
//             isLoading={loading}
//             error={occupantError}
//             title="Matched Profile"
//           />
//         </div>
//       </div>
//       <RentSectionTitle>
//         Start {isRental ? "Rent" : "Counting"}
//       </RentSectionTitle>
//       <div className="h-[1px] bg-[#C0C2C8] mb-4" />
//       <div className="grid grid-cols-2 gap-4">
//         <DateInput
//           id="start date"
//           label="Start Date"
//           value={startDate}
//           onChange={setStartDate}
//           lastYear={true}
//         />
//         <DateInput
//           id="due date"
//           label="Due Date"
//           disabled
//           value={dueDate}
//           className="opacity-50"
//         />
//       </div>
//       <div className="flex items-center justify-end gap-4 flex-wrap">
//         {options.map((option) => {
//           const key = option.toLowerCase().replace(/\s+/g, "_");
//           return (
//             <Checkbox
//               sm
//               key={key}
//               defaultChecked={selectedOptions[key]}
//               onChange={handleCheckboxChange(key)}
//             >
//               {option}
//             </Checkbox>
//           );
//         })}
//       </div>
//     </div>
//   );
// };














// import Image from "next/image";
// import { useContext, useEffect, useState } from "react";
// // Import
// import { SectionHeading } from "../Section/section-components";
// import Button from "../Form/Button/button";
// import { DeleteIconOrange, PersonIcon, UploadImageIcon } from "@/public/icons/icons";
// import { FlowProgressContext } from "../FlowProgress/flow-progress";
// import { useImageUploader } from "@/hooks/useImageUploader";
// import CameraCircle from "@/public/icons/camera-circle.svg";
// import Picture from "../Picture/picture";
// import { Modal, ModalContent, ModalTrigger } from "../Modal/modal";
// import LandlordTenantModalPreset from "../Management/landlord-tenant-modal-preset";
// import Avatars from "../Avatars/avatars";

// const ProfilePicture = () => {
//   const { handleInputChange } = useContext(FlowProgressContext);

//   const {
//     preview,
//     handleImageChange: originalHandleImageChange,
//     inputFileRef,
//     clearSelection: clearImageSelection,
//     setPreview,
//   } = useImageUploader({
//     placeholder: CameraCircle,
//     maxSize: {
//       unit: "MB",
//       value: 2,
//     },
//   });

//   const [avatarModalOpen, setAvatarModalOpen] = useState(false);
//   const [selectedAvatar, setSelectedAvatar] = useState("");

//   const handleAvatarSelection = (avatarUrl: string) => {
//     clearImageSelection();
//     setSelectedAvatar(avatarUrl);
//     setAvatarModalOpen(false);
//   };

//   const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     setSelectedAvatar("");
//     originalHandleImageChange(e);
//   };

//   // const { preview, inputFileRef, handleImageChange, clearSelection } =
//   //   useImageUploader({
//   //     maxSize: { unit: "MB", value: 2 },
//   //   });

//   const handleButtonClick = () => {
//     if (inputFileRef.current) {
//       inputFileRef.current.click();
//     }
//   };

//   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     handleImageChange(e);
//     handleInputChange();
//   };

//   const handleDeleteImage = () => {
//     clearImageSelection();
//     handleInputChange();
//   };

//   return (
//     <div className="custom-flex-col gap-5">
//       <SectionHeading required title="profile picture">
//         The profile photo size should be 100 x 100 pixels with a maximum file
//         size of 2MB.
//       </SectionHeading>

//       <div className="flex gap-4 items-center">
//         <input type="hidden" name="avatar" value={selectedAvatar} />
//         <div className="flex gap-2">
//           <input
//             name="director_profile_picture"
//             type="file"
//             accept="image/*"
//             ref={inputFileRef}
//             onChange={handleFileChange}
//             className="hidden setup-f required"
//           />
//           {preview && preview !== CameraCircle ? (
//             <div className="w-[100px] h-[100px] relative">
//               <button
//                 type="button"
//                 onClick={handleDeleteImage}
//                 className="absolute top-[-15px] right-[-25px] z-10"
//                 aria-label="Delete"
//               >
//                 <DeleteIconOrange />
//               </button>
//               <Image
//                 src={preview}
//                 alt="Profile Picture"
//                 fill
//                 style={{ objectFit: "cover" }}
//                 className="rounded-lg w-[100px] h-[100px]"
//               />
//             </div>
//           ) : (
//             <button
//               type="button"
//               onClick={handleButtonClick}
//               className="w-[100px] h-[100px] rounded-xl border-2 border-dashed border-borders-normal flex flex-col items-center justify-center cursor-pointer"
//             >
//               <UploadImageIcon />
//               <span className="text-text-secondary text-xs font-normal">
//                 Upload Profile Picture
//               </span>
//             </button>
//           )}
//           {preview && (
//             <div className="flex items-end">
//               <Button
//                 type="button"
//                 variant="change"
//                 size="sm"
//                 onClick={handleButtonClick}
//               >
//                 Change Picture
//               </Button>
//             </div>
//           )}
//         </div>

//         <label htmlFor="picture" className="!w-fit cursor-pointer relative">
//           <Picture src={preview} alt="Camera" size={90} rounded />
//           {preview && preview !== CameraCircle && (
//             <div
//               role="button"
//               aria-label="remove image"
//               className="absolute top-0 right-0"
//               onClick={(e) => {
//                 e.preventDefault();
//                 clearImageSelection();
//               }}
//             >
//               <DeleteIconOrange size={20} />
//             </div>
//           )}
//           <input
//             type="file"
//             id="picture"
//             name="picture"
//             accept="image/*"
//             className="hidden pointer-events-none"
//             onChange={handleImageChange}
//             ref={inputFileRef}
//           />
//         </label>
//         <div className="custom-flex-col gap-3">
//           <p className="text-black text-base font-medium">Choose Avatar</p>
//           <Modal
//             state={{ isOpen: avatarModalOpen, setIsOpen: setAvatarModalOpen }}
//           >
//             <ModalTrigger
//               className="bg-[rgba(42,42,42,0.63)] !w-[60px] h-[60px] rounded-full flex items-center justify-center text-white relative"
//               aria-label="choose avatar"
//             >
//               {selectedAvatar ? (
//                 <>
//                   <Image
//                     src={selectedAvatar}
//                     alt="selected avatar"
//                     width={60}
//                     height={60}
//                     className="object-cover object-center w-[60px] h-[60px] rounded-full bg-brand-9"
//                   />
//                   <div
//                     role="button"
//                     aria-label="remove avatar"
//                     className="absolute top-0 right-0"
//                     onClick={(e) => {
//                       e.stopPropagation();
//                       setSelectedAvatar("");
//                     }}
//                   >
//                     <DeleteIconOrange size={20} />
//                   </div>
//                 </>
//               ) : (
//                 <PersonIcon size={18} />
//               )}
//             </ModalTrigger>
//             <ModalContent>
//               <LandlordTenantModalPreset
//                 heading="Choose Avatar"
//                 style={{ maxWidth: "700px" }}
//               >
//                 <Avatars onClick={handleAvatarSelection} />
//               </LandlordTenantModalPreset>
//             </ModalContent>
//           </Modal>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default ProfilePicture;