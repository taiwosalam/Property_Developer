"use client";

import { useEffect, useState } from "react";
import Image from "next/image";
import { usePathname } from "next/navigation";
import { empty } from "@/app/config";
// Types
import type { SideNavProps } from "./types";

// Imports
import { nav_items } from "./data";
import NavDropdown from "./nav-dropdown";
import { NavButton } from "./nav-components";
import { usePersonalInfoStore } from "@/store/personal-info-store";
import { getNavs } from "@/app/(onboarding)/auth/data";
import { useRole } from "@/hooks/roleContext";
import { usePermission } from "@/hooks/getPermission";
import { useBranchInfoStore } from "@/store/branch-info-store";
import { normalizeIsActive } from "../Management/Staff-And-Branches/Branch/branch-balance-card";

const SideNav: React.FC<SideNavProps> = ({ closeSideNav, isCollapsed }) => {
  const pathname = usePathname();
  const [loading, setLoading] = useState(false);
  const { role, setRole } = useRole();
  const isCompanyOwner = usePersonalInfoStore((state) => state.is_owner);
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  const branchWallet = useBranchInfoStore((s) => s.sub_wallet);

  const handleDropdownToggle = (label: string) => {
    setActiveDropdown((prevActive) => (prevActive === label ? null : label));
  };

  // ============== PERMISSIONS CHECK ==============
  const canViewCallRequests = usePermission(role, "Can view call request");
  const canViewPropertyRequests = usePermission(
    role,
    "Can view property request"
  );
  const managerWalletIsActive = normalizeIsActive(
    branchWallet?.is_active as string | boolean
  );
  const canViewWallet =
    usePermission(role, "Full Wallet Access") ||
    (role === "manager" && managerWalletIsActive);
  const canViewComplain = usePermission(role, "Can view complaints");

  const isDirector = role === "director";

  const company_logo = usePersonalInfoStore((state) => state.company_logo);

  const sanitizeClassName = (label: string): string => {
    return label
      .toLowerCase()
      .replace(/\s+/g, "-")
      .replace(/[^a-z0-9-]/g, "");
  };

  // Define restricted labels and their conditions (for both top-level and child items)
  const restrictedLabels = [
    {
      label: "call request",
      condition: () => isDirector || canViewCallRequests,
    },
    {
      label: "property request",
      condition: () => isDirector || canViewPropertyRequests,
    },
    {
      label: "Can view complaints",
      condition: () => isDirector || canViewComplain,
    },
    {
      label: "wallet",
      condition: () => canViewWallet || isCompanyOwner,
    },
    // Add more restricted labels here, e.g.:
    // {
    //   label: "complaints",
    //   condition: () => usePermission(role, "Can view complaints") || isCompanyOwner,
    // },
  ];

  // Filter navItems for both top-level and child items
  const navItems = getNavs(role)
    ?.filter((item) => {
      const restricted = restrictedLabels.find(
        (r) => r.label.toLowerCase() === item.label.toLowerCase()
      );
      return !restricted || restricted.condition();
    })
    .map((item) => {
      if (item.content) {
        return {
          ...item,
          content: item.content.filter((subItem) => {
            const restricted = restrictedLabels.find(
              (r) => r.label.toLowerCase() === subItem.label.toLowerCase()
            );
            return !restricted || restricted.condition();
          }),
        };
      }
      return item;
    })
    .filter((item) => !item.content || item.content.length > 0); // Remove dropdowns that become empty

  return (
    <div className="custom-flex-col pb-3">
      <div className="flex md:hidden justify-center p-3 pt-0">
        <Image
          src={company_logo || empty}
          alt="company logo"
          width={200}
          height={55}
          className="w-full h-[55px] object-contain"
        />
      </div>

      {navItems?.map((item, idx) => {
        const className = sanitizeClassName(item.label);
        return item.content ? (
          <NavDropdown
            key={idx}
            type={item.type}
            content={item.content}
            highlight={item.content.some((i) =>
              isDirector
                ? pathname.includes(`${item.label}${i.href}`)
                : pathname.includes(`${i.href}`)
            )}
            onContentClick={closeSideNav}
            isOpen={activeDropdown === item.label}
            onToggle={() => handleDropdownToggle(item.label)}
            isCollapsed={isCollapsed}
            className={className}
          >
            {item.label}
          </NavDropdown>
        ) : (
          <NavButton
            highlight={item.href ? pathname.includes(item.href) : false}
            key={idx}
            href={item.href}
            type={item.type}
            onClick={closeSideNav}
            isCollapsed={isCollapsed}
            className={className}
          >
            {item.label}
          </NavButton>
        );
      })}
    </div>
  );
};

export default SideNav;













// "use client";

// import { useEffect, useState } from "react";
// import Image from "next/image";
// import { usePathname } from "next/navigation";
// import { empty } from "@/app/config";
// import type { SideNavProps } from "./types";
// import { nav_items } from "./data";
// import NavDropdown from "./nav-dropdown";
// import { NavButton } from "./nav-components";
// import { usePersonalInfoStore } from "@/store/personal-info-store";
// import { getNavs } from "@/app/(onboarding)/auth/data";
// import { useRole } from "@/hooks/roleContext";
// import { usePermission } from "@/hooks/getPermission";
// import { useBranchInfoStore } from "@/store/branch-info-store";
// import { normalizeIsActive } from "../Management/Staff-And-Branches/Branch/branch-balance-card";

// const permissionMapping: Record<
//   string,
//   { permission: string; ownerRoles: string[] }
// > = {
//   "call request": {
//     permission: "Can view call request",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   "property request": {
//     permission: "Can view property request",
//     ownerRoles: ["manager"],
//   },
//   complaints: {
//     permission: "Can view complaints",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   wallet: {
//     permission: "Full Wallet Access",
//     ownerRoles: ["director"],
//   },
//   "landlord & landlady": {
//     permission: "Can add and manage landlords/landlady",
//     ownerRoles: ["manager", "account"],
//   },
//   "tenants & occupants": {
//     permission: "Can add and manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
//   properties: {
//     permission: "Can add/delete branch properties",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   "service providers": {
//     permission: "Can view service provider",
//     ownerRoles: ["account", "staff"],
//   },
//   examine: {
//     permission: "Can create examine",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   inspections: {
//     permission: "Can manage inspections",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   calendars: {
//     permission: "Can manage calendar",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   announcements: {
//     permission: "Can create and manage announcement",
//     ownerRoles: ["manager", "account"],
//   },
//   "visitors request": {
//     permission: "Can check in visitors",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   inventory: {
//     permission: "Can create inventory",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   "vehicles record": {
//     permission: "Can check in and manage vehicle records",
//     ownerRoles: ["manager", "account"],
//   },
//   invoice: {
//     permission: "Can manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
//   expenses: {
//     permission: "Can manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
//   disbursement: {
//     permission: "Can manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
// };

// const SideNav: React.FC<SideNavProps> = ({ closeSideNav, isCollapsed }) => {
//   const pathname = usePathname();
//   const [loading, setLoading] = useState(false);
//   const { role, setRole } = useRole();
//   const isCompanyOwner = usePersonalInfoStore((state) => state.is_owner);
//   const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
//   const branchWallet = useBranchInfoStore((s) => s.sub_wallet);
//   const company_logo = usePersonalInfoStore((state) => state.company_logo);

//   const managerWalletIsActive = normalizeIsActive(
//     branchWallet?.is_active as string | boolean
//   );

//   // 1️⃣ Precompute all permissions outside of filter/map loops
//   const permissionsCache: Record<string, boolean> = {};
//   Object.entries(permissionMapping).forEach(([label, mapping]) => {
//     permissionsCache[label] = usePermission(role, mapping.permission);
//   });

//   // 2️⃣ Now filter/map using the cached results (no hook calls here)
//   const navItems = getNavs(role)
//     ?.filter((item) => {
//       const mapping = permissionMapping[item.label.toLowerCase()];

//       if (!mapping || !mapping.ownerRoles.includes(role)) return true;

//       if (item.label.toLowerCase() === "wallet") {
//         return (
//           permissionsCache["wallet"] ||
//           (role === "manager" && managerWalletIsActive) ||
//           isCompanyOwner
//         );
//       }

//       return permissionsCache[item.label.toLowerCase()];
//     })
//     .map((item) => {
//       if (item.content) {
//         return {
//           ...item,
//           content: item.content.filter((subItem) => {
//             const mapping = permissionMapping[subItem.label.toLowerCase()];
//             return (
//               !mapping ||
//               !mapping.ownerRoles.includes(role) ||
//               permissionsCache[subItem.label.toLowerCase()]
//             );
//           }),
//         };
//       }
//       return item;
//     })
//     .filter((item) => !item.content || item.content.length > 0);

//   const sanitizeClassName = (label: string): string =>
//     label
//       .toLowerCase()
//       .replace(/\s+/g, "-")
//       .replace(/[^a-z0-9-]/g, "");

//   const handleDropdownToggle = (label: string) => {
//     setActiveDropdown((prevActive) => (prevActive === label ? null : label));
//   };

//   return (
//     <div className="custom-flex-col pb-3">
//       <div className="flex md:hidden justify-center p-3 pt-0">
//         <Image
//           src={company_logo || empty}
//           alt="company logo"
//           width={200}
//           height={55}
//           className="w-full h-[55px] object-contain"
//         />
//       </div>

//       {navItems?.map((item, idx) => {
//         const className = sanitizeClassName(item.label);
//         return item.content ? (
//           <NavDropdown
//             key={idx}
//             type={item.type}
//             content={item.content}
//             highlight={item.content.some((i) =>
//               role === "director"
//                 ? pathname.includes(`${item.label}${i.href}`)
//                 : pathname.includes(`${i.href}`)
//             )}
//             onContentClick={closeSideNav}
//             isOpen={activeDropdown === item.label}
//             onToggle={() => handleDropdownToggle(item.label)}
//             isCollapsed={isCollapsed}
//             className={className}
//           >
//             {item.label}
//           </NavDropdown>
//         ) : (
//           <NavButton
//             highlight={item.href ? pathname.includes(item.href) : false}
//             key={idx}
//             href={item.href}
//             type={item.type}
//             onClick={closeSideNav}
//             isCollapsed={isCollapsed}
//             className={className}
//           >
//             {item.label}
//           </NavButton>
//         );
//       })}
//     </div>
//   );
// };

// export default SideNav;










// // "use client";

// // import Link from "next/link";
// // import SVG from "../SVG/svg";
// // import { useModal } from "../Modal/modal";
// // import useDarkMode from "@/hooks/useCheckDarkMode";
// // import { useRole } from "@/hooks/roleContext";
// // import { usePermission } from "@/hooks/getPermission";
// // import type { NavCreateNewColumnProps } from "./types";
// // import { useMemo } from "react";
// // import { permissionMapping } from "./nav-create-new-items";

// // const NavCreateNewColumn: React.FC<NavCreateNewColumnProps> = ({
// //   data = [],
// //   handleModalTrigger,
// // }) => {
// //   const { setIsOpen } = useModal();
// //   const isDarkMode = useDarkMode();
// //   const { role } = useRole();

// //   // Pre-compute permissions to avoid calling usePermission in a callback
// //   const permissionsCache: Record<string, boolean> = useMemo(() => {
// //     const cache: Record<string, boolean> = {};
// //     Object.entries(permissionMapping).forEach(([label, mapping]) => {
// //       cache[label] = usePermission(role, mapping.permission);
// //     });
// //     return cache;
// //   }, [role]);

// //   const filteredContent = useMemo(() => {
// //     const options = ["management", "tasks", "accounting", "documents"];
// //     return data
// //       .filter((item) => options.includes(item.label.toLowerCase()))
// //       .map((item) => ({
// //         ...item,
// //         content: item.content?.filter(({ label }) => {
// //           const mapping = permissionMapping[label.toLowerCase()];
// //           // Render item if no permission is defined or if the role is not an owner
// //           if (!mapping || !mapping.ownerRoles.includes(role)) {
// //             return true;
// //           }
// //           // Only filter out if the role owns the permission and it's false
// //           return permissionsCache[label.toLowerCase()];
// //         }),
// //       }))
// //       .filter((item) => item.content && item.content.length > 0);
// //   }, [data, role, permissionsCache]);

// //   const class_styles = "flex items-center gap-4";
// //   const icon = (
// //     <SVG
// //       type="horizontal_line"
// //       className="w-[30px] flex justify-center"
// //       color={isDarkMode ? "#fff" : "#050901"}
// //     />
// //   );

// //   const closeCreateNewModal = () => {
// //     setIsOpen(false);
// //   };

// //   return (
// //     <div className="flex gap-10 w-full overflow-auto custom-round-scrollbar">
// //       {filteredContent.map(({ type, label, content }, index) => (
// //         <div key={index} className="custom-flex-col text-base font-medium">
// //           <div className="flex items-center gap-2">
// //             <SVG
// //               type={type}
// //               color={isDarkMode ? "#fff" : "#050901"}
// //               className="w-[30px] flex justify-center"
// //             />
// //             <p className="text-text-primary dark:text-white capitalize">
// //               {label}
// //             </p>
// //           </div>
// //           {content?.map(({ label, link, modal }, idx) => (
// //             <div key={idx} className="py-3 px-5">
// //               {link ? (
// //                 <Link
// //                   href={link}
// //                   className={class_styles}
// //                   onClick={closeCreateNewModal}
// //                 >
// //                   {icon}
// //                   <p className="text-text-secondary dark:text-darkText-1 capitalize">
// //                     {label}
// //                   </p>
// //                 </Link>
// //               ) : (
// //                 <button
// //                   type="button"
// //                   className={class_styles}
// //                   onClick={() => handleModalTrigger(modal)}
// //                 >
// //                   {icon}
// //                   <p className="text-text-secondary dark:text-darkText-1 capitalize">
// //                     {label}
// //                   </p>
// //                 </button>
// //               )}
// //             </div>
// //           ))}
// //         </div>
// //       ))}
// //     </div>
// //   );
// // };

// // export default NavCreateNewColumn;







// "use client";

// import Link from "next/link";
// import SVG from "../SVG/svg";
// import { useModal } from "../Modal/modal";
// import useDarkMode from "@/hooks/useCheckDarkMode";
// import { useRole } from "@/hooks/roleContext";
// import type { NavCreateNewColumnProps } from "./types";
// import { useMemo } from "react";
// import { permissionMapping } from "./nav-create-new-items";
// import { usePermissionsCache } from "@/hooks/usePermissioncache";

// const NavCreateNewColumn: React.FC<NavCreateNewColumnProps> = ({
//   data = [],
//   handleModalTrigger,
// }) => {
//   const { setIsOpen } = useModal();
//   const isDarkMode = useDarkMode();
//   const { role } = useRole();

//   // Use custom hook to get permissions cache
//   const permissionsCache = usePermissionsCache(role, permissionMapping);

//   const filteredContent = useMemo(() => {
//     const options = ["management", "tasks", "accounting", "documents"];
//     return data
//       .filter((item) => options.includes(item.label.toLowerCase()))
//       .map((item) => ({
//         ...item,
//         content: item.content?.filter(({ label }) => {
//           const mapping = permissionMapping[label.toLowerCase()];
//           // Render item if no permission is defined or if the role is not an owner
//           if (!mapping || !mapping.ownerRoles.includes(role)) {
//             return true;
//           }
//           // Only filter out if the role owns the permission and it's false
//           return permissionsCache[label.toLowerCase()];
//         }),
//       }))
//       .filter((item) => item.content && item.content.length > 0);
//   }, [data, role, permissionsCache]);

//   const class_styles = "flex items-center gap-4";
//   const icon = (
//     <SVG
//       type="horizontal_line"
//       className="w-[30px] flex justify-center"
//       color={isDarkMode ? "#fff" : "#050901"}
//     />
//   );

//   const closeCreateNewModal = () => {
//     setIsOpen(false);
//   };

//   return (
//     <div className="flex gap-10 w-full overflow-auto custom-round-scrollbar">
//       {filteredContent.map(({ type, label, content }, index) => (
//         <div key={index} className="custom-flex-col text-base font-medium">
//           <div className="flex items-center gap-2">
//             <SVG
//               type={type}
//               color={isDarkMode ? "#fff" : "#050901"}
//               className="w-[30px] flex justify-center"
//             />
//             <p className="text-text-primary dark:text-white capitalize">
//               {label}
//             </p>
//           </div>
//           {content?.map(({ label, link, modal }, idx) => (
//             <div key={idx} className="py-3 px-5">
//               {link ? (
//                 <Link
//                   href={link}
//                   className={class_styles}
//                   onClick={closeCreateNewModal}
//                 >
//                   {icon}
//                   <p className="text-text-secondary dark:text-darkText-1 capitalize">
//                     {label}
//                   </p>
//                 </Link>
//               ) : (
//                 <button
//                   type="button"
//                   className={class_styles}
//                   onClick={() => handleModalTrigger(modal)}
//                 >
//                   {icon}
//                   <p className="text-text-secondary dark:text-darkText-1 capitalize">
//                     {label}
//                   </p>
//                 </button>
//               )}
//             </div>
//           ))}
//         </div>
//       ))}
//     </div>
//   );
// };

// export default NavCreateNewColumn;







