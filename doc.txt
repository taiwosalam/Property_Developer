"use client";

import { useEffect, useState } from "react";
import Image from "next/image";
import { usePathname } from "next/navigation";
import { empty } from "@/app/config";
// Types
import type { SideNavProps } from "./types";

// Imports
import { nav_items } from "./data";
import NavDropdown from "./nav-dropdown";
import { NavButton } from "./nav-components";
import { usePersonalInfoStore } from "@/store/personal-info-store";
import { getNavs } from "@/app/(onboarding)/auth/data";
import { useRole } from "@/hooks/roleContext";
import { usePermission } from "@/hooks/getPermission";
import { useBranchInfoStore } from "@/store/branch-info-store";
import { normalizeIsActive } from "../Management/Staff-And-Branches/Branch/branch-balance-card";

const SideNav: React.FC<SideNavProps> = ({ closeSideNav, isCollapsed }) => {
  const pathname = usePathname();
  const [loading, setLoading] = useState(false);
  const { role, setRole } = useRole();
  const isCompanyOwner = usePersonalInfoStore((state) => state.is_owner);
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  const branchWallet = useBranchInfoStore((s) => s.sub_wallet);

  const handleDropdownToggle = (label: string) => {
    setActiveDropdown((prevActive) => (prevActive === label ? null : label));
  };

  // ============== PERMISSIONS CHECK ==============
  const canViewCallRequests = usePermission(role, "Can view call request");
  const canViewPropertyRequests = usePermission(
    role,
    "Can view property request"
  );
  const managerWalletIsActive = normalizeIsActive(
    branchWallet?.is_active as string | boolean
  );
  const canViewWallet =
    usePermission(role, "Full Wallet Access") ||
    (role === "manager" && managerWalletIsActive);
  const canViewComplain = usePermission(role, "Can view complaints");

  const isDirector = role === "director";

  const company_logo = usePersonalInfoStore((state) => state.company_logo);

  const sanitizeClassName = (label: string): string => {
    return label
      .toLowerCase()
      .replace(/\s+/g, "-")
      .replace(/[^a-z0-9-]/g, "");
  };

  // Define restricted labels and their conditions (for both top-level and child items)
  const restrictedLabels = [
    {
      label: "call request",
      condition: () => isDirector || canViewCallRequests,
    },
    {
      label: "property request",
      condition: () => isDirector || canViewPropertyRequests,
    },
    {
      label: "Can view complaints",
      condition: () => isDirector || canViewComplain,
    },
    {
      label: "wallet",
      condition: () => canViewWallet || isCompanyOwner,
    },
    // Add more restricted labels here, e.g.:
    // {
    //   label: "complaints",
    //   condition: () => usePermission(role, "Can view complaints") || isCompanyOwner,
    // },
  ];

  // Filter navItems for both top-level and child items
  const navItems = getNavs(role)
    ?.filter((item) => {
      const restricted = restrictedLabels.find(
        (r) => r.label.toLowerCase() === item.label.toLowerCase()
      );
      return !restricted || restricted.condition();
    })
    .map((item) => {
      if (item.content) {
        return {
          ...item,
          content: item.content.filter((subItem) => {
            const restricted = restrictedLabels.find(
              (r) => r.label.toLowerCase() === subItem.label.toLowerCase()
            );
            return !restricted || restricted.condition();
          }),
        };
      }
      return item;
    })
    .filter((item) => !item.content || item.content.length > 0); // Remove dropdowns that become empty

  return (
    <div className="custom-flex-col pb-3">
      <div className="flex md:hidden justify-center p-3 pt-0">
        <Image
          src={company_logo || empty}
          alt="company logo"
          width={200}
          height={55}
          className="w-full h-[55px] object-contain"
        />
      </div>

      {navItems?.map((item, idx) => {
        const className = sanitizeClassName(item.label);
        return item.content ? (
          <NavDropdown
            key={idx}
            type={item.type}
            content={item.content}
            highlight={item.content.some((i) =>
              isDirector
                ? pathname.includes(`${item.label}${i.href}`)
                : pathname.includes(`${i.href}`)
            )}
            onContentClick={closeSideNav}
            isOpen={activeDropdown === item.label}
            onToggle={() => handleDropdownToggle(item.label)}
            isCollapsed={isCollapsed}
            className={className}
          >
            {item.label}
          </NavDropdown>
        ) : (
          <NavButton
            highlight={item.href ? pathname.includes(item.href) : false}
            key={idx}
            href={item.href}
            type={item.type}
            onClick={closeSideNav}
            isCollapsed={isCollapsed}
            className={className}
          >
            {item.label}
          </NavButton>
        );
      })}
    </div>
  );
};

export default SideNav;













// "use client";

// import { useEffect, useState } from "react";
// import Image from "next/image";
// import { usePathname } from "next/navigation";
// import { empty } from "@/app/config";
// import type { SideNavProps } from "./types";
// import { nav_items } from "./data";
// import NavDropdown from "./nav-dropdown";
// import { NavButton } from "./nav-components";
// import { usePersonalInfoStore } from "@/store/personal-info-store";
// import { getNavs } from "@/app/(onboarding)/auth/data";
// import { useRole } from "@/hooks/roleContext";
// import { usePermission } from "@/hooks/getPermission";
// import { useBranchInfoStore } from "@/store/branch-info-store";
// import { normalizeIsActive } from "../Management/Staff-And-Branches/Branch/branch-balance-card";

// const permissionMapping: Record<
//   string,
//   { permission: string; ownerRoles: string[] }
// > = {
//   "call request": {
//     permission: "Can view call request",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   "property request": {
//     permission: "Can view property request",
//     ownerRoles: ["manager"],
//   },
//   complaints: {
//     permission: "Can view complaints",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   wallet: {
//     permission: "Full Wallet Access",
//     ownerRoles: ["director"],
//   },
//   "landlord & landlady": {
//     permission: "Can add and manage landlords/landlady",
//     ownerRoles: ["manager", "account"],
//   },
//   "tenants & occupants": {
//     permission: "Can add and manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
//   properties: {
//     permission: "Can add/delete branch properties",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   "service providers": {
//     permission: "Can view service provider",
//     ownerRoles: ["account", "staff"],
//   },
//   examine: {
//     permission: "Can create examine",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   inspections: {
//     permission: "Can manage inspections",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   calendars: {
//     permission: "Can manage calendar",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   announcements: {
//     permission: "Can create and manage announcement",
//     ownerRoles: ["manager", "account"],
//   },
//   "visitors request": {
//     permission: "Can check in visitors",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   inventory: {
//     permission: "Can create inventory",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   "vehicles record": {
//     permission: "Can check in and manage vehicle records",
//     ownerRoles: ["manager", "account"],
//   },
//   invoice: {
//     permission: "Can manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
//   expenses: {
//     permission: "Can manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
//   disbursement: {
//     permission: "Can manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
// };

// const SideNav: React.FC<SideNavProps> = ({ closeSideNav, isCollapsed }) => {
//   const pathname = usePathname();
//   const [loading, setLoading] = useState(false);
//   const { role, setRole } = useRole();
//   const isCompanyOwner = usePersonalInfoStore((state) => state.is_owner);
//   const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
//   const branchWallet = useBranchInfoStore((s) => s.sub_wallet);
//   const company_logo = usePersonalInfoStore((state) => state.company_logo);

//   const managerWalletIsActive = normalizeIsActive(
//     branchWallet?.is_active as string | boolean
//   );

//   // 1️⃣ Precompute all permissions outside of filter/map loops
//   const permissionsCache: Record<string, boolean> = {};
//   Object.entries(permissionMapping).forEach(([label, mapping]) => {
//     permissionsCache[label] = usePermission(role, mapping.permission);
//   });

//   // 2️⃣ Now filter/map using the cached results (no hook calls here)
//   const navItems = getNavs(role)
//     ?.filter((item) => {
//       const mapping = permissionMapping[item.label.toLowerCase()];

//       if (!mapping || !mapping.ownerRoles.includes(role)) return true;

//       if (item.label.toLowerCase() === "wallet") {
//         return (
//           permissionsCache["wallet"] ||
//           (role === "manager" && managerWalletIsActive) ||
//           isCompanyOwner
//         );
//       }

//       return permissionsCache[item.label.toLowerCase()];
//     })
//     .map((item) => {
//       if (item.content) {
//         return {
//           ...item,
//           content: item.content.filter((subItem) => {
//             const mapping = permissionMapping[subItem.label.toLowerCase()];
//             return (
//               !mapping ||
//               !mapping.ownerRoles.includes(role) ||
//               permissionsCache[subItem.label.toLowerCase()]
//             );
//           }),
//         };
//       }
//       return item;
//     })
//     .filter((item) => !item.content || item.content.length > 0);

//   const sanitizeClassName = (label: string): string =>
//     label
//       .toLowerCase()
//       .replace(/\s+/g, "-")
//       .replace(/[^a-z0-9-]/g, "");

//   const handleDropdownToggle = (label: string) => {
//     setActiveDropdown((prevActive) => (prevActive === label ? null : label));
//   };

//   return (
//     <div className="custom-flex-col pb-3">
//       <div className="flex md:hidden justify-center p-3 pt-0">
//         <Image
//           src={company_logo || empty}
//           alt="company logo"
//           width={200}
//           height={55}
//           className="w-full h-[55px] object-contain"
//         />
//       </div>

//       {navItems?.map((item, idx) => {
//         const className = sanitizeClassName(item.label);
//         return item.content ? (
//           <NavDropdown
//             key={idx}
//             type={item.type}
//             content={item.content}
//             highlight={item.content.some((i) =>
//               role === "director"
//                 ? pathname.includes(`${item.label}${i.href}`)
//                 : pathname.includes(`${i.href}`)
//             )}
//             onContentClick={closeSideNav}
//             isOpen={activeDropdown === item.label}
//             onToggle={() => handleDropdownToggle(item.label)}
//             isCollapsed={isCollapsed}
//             className={className}
//           >
//             {item.label}
//           </NavDropdown>
//         ) : (
//           <NavButton
//             highlight={item.href ? pathname.includes(item.href) : false}
//             key={idx}
//             href={item.href}
//             type={item.type}
//             onClick={closeSideNav}
//             isCollapsed={isCollapsed}
//             className={className}
//           >
//             {item.label}
//           </NavButton>
//         );
//       })}
//     </div>
//   );
// };

// export default SideNav;










// // "use client";

// // import Link from "next/link";
// // import SVG from "../SVG/svg";
// // import { useModal } from "../Modal/modal";
// // import useDarkMode from "@/hooks/useCheckDarkMode";
// // import { useRole } from "@/hooks/roleContext";
// // import { usePermission } from "@/hooks/getPermission";
// // import type { NavCreateNewColumnProps } from "./types";
// // import { useMemo } from "react";
// // import { permissionMapping } from "./nav-create-new-items";

// // const NavCreateNewColumn: React.FC<NavCreateNewColumnProps> = ({
// //   data = [],
// //   handleModalTrigger,
// // }) => {
// //   const { setIsOpen } = useModal();
// //   const isDarkMode = useDarkMode();
// //   const { role } = useRole();

// //   // Pre-compute permissions to avoid calling usePermission in a callback
// //   const permissionsCache: Record<string, boolean> = useMemo(() => {
// //     const cache: Record<string, boolean> = {};
// //     Object.entries(permissionMapping).forEach(([label, mapping]) => {
// //       cache[label] = usePermission(role, mapping.permission);
// //     });
// //     return cache;
// //   }, [role]);

// //   const filteredContent = useMemo(() => {
// //     const options = ["management", "tasks", "accounting", "documents"];
// //     return data
// //       .filter((item) => options.includes(item.label.toLowerCase()))
// //       .map((item) => ({
// //         ...item,
// //         content: item.content?.filter(({ label }) => {
// //           const mapping = permissionMapping[label.toLowerCase()];
// //           // Render item if no permission is defined or if the role is not an owner
// //           if (!mapping || !mapping.ownerRoles.includes(role)) {
// //             return true;
// //           }
// //           // Only filter out if the role owns the permission and it's false
// //           return permissionsCache[label.toLowerCase()];
// //         }),
// //       }))
// //       .filter((item) => item.content && item.content.length > 0);
// //   }, [data, role, permissionsCache]);

// //   const class_styles = "flex items-center gap-4";
// //   const icon = (
// //     <SVG
// //       type="horizontal_line"
// //       className="w-[30px] flex justify-center"
// //       color={isDarkMode ? "#fff" : "#050901"}
// //     />
// //   );

// //   const closeCreateNewModal = () => {
// //     setIsOpen(false);
// //   };

// //   return (
// //     <div className="flex gap-10 w-full overflow-auto custom-round-scrollbar">
// //       {filteredContent.map(({ type, label, content }, index) => (
// //         <div key={index} className="custom-flex-col text-base font-medium">
// //           <div className="flex items-center gap-2">
// //             <SVG
// //               type={type}
// //               color={isDarkMode ? "#fff" : "#050901"}
// //               className="w-[30px] flex justify-center"
// //             />
// //             <p className="text-text-primary dark:text-white capitalize">
// //               {label}
// //             </p>
// //           </div>
// //           {content?.map(({ label, link, modal }, idx) => (
// //             <div key={idx} className="py-3 px-5">
// //               {link ? (
// //                 <Link
// //                   href={link}
// //                   className={class_styles}
// //                   onClick={closeCreateNewModal}
// //                 >
// //                   {icon}
// //                   <p className="text-text-secondary dark:text-darkText-1 capitalize">
// //                     {label}
// //                   </p>
// //                 </Link>
// //               ) : (
// //                 <button
// //                   type="button"
// //                   className={class_styles}
// //                   onClick={() => handleModalTrigger(modal)}
// //                 >
// //                   {icon}
// //                   <p className="text-text-secondary dark:text-darkText-1 capitalize">
// //                     {label}
// //                   </p>
// //                 </button>
// //               )}
// //             </div>
// //           ))}
// //         </div>
// //       ))}
// //     </div>
// //   );
// // };

// // export default NavCreateNewColumn;







 "use client";

 import Link from "next/link";
 import SVG from "../SVG/svg";
 import { useModal } from "../Modal/modal";
 import useDarkMode from "@/hooks/useCheckDarkMode";
 import { useRole } from "@/hooks/roleContext";
 import type { NavCreateNewColumnProps } from "./types";
 import { useMemo } from "react";
 import { permissionMapping } from "./nav-create-new-items";
 import { usePermissionsCache } from "@/hooks/usePermissioncache";

 const NavCreateNewColumn: React.FC<NavCreateNewColumnProps> = ({
   data = [],
   handleModalTrigger,
 }) => {
   const { setIsOpen } = useModal();
   const isDarkMode = useDarkMode();
   const { role } = useRole();

   // Use custom hook to get permissions cache
   const permissionsCache = usePermissionsCache(role, permissionMapping);

   const filteredContent = useMemo(() => {
     const options = ["management", "tasks", "accounting", "documents"];
     return data
       .filter((item) => options.includes(item.label.toLowerCase()))
       .map((item) => ({
         ...item,
         content: item.content?.filter(({ label }) => {
           const mapping = permissionMapping[label.toLowerCase()];
            Render item if no permission is defined or if the role is not an owner
           if (!mapping || !mapping.ownerRoles.includes(role)) {
             return true;
           }
            Only filter out if the role owns the permission and it's false
           return permissionsCache[label.toLowerCase()];
         }),
       }))
       .filter((item) => item.content && item.content.length > 0);
   }, [data, role, permissionsCache]);

   const class_styles = "flex items-center gap-4";
   const icon = (
     <SVG
       type="horizontal_line"
       className="w-[30px] flex justify-center"
       color={isDarkMode ? "#fff" : "#050901"}
     />
   );

   const closeCreateNewModal = () => {
     setIsOpen(false);
   };

   return (
     <div className="flex gap-10 w-full overflow-auto custom-round-scrollbar">
       {filteredContent.map(({ type, label, content }, index) => (
         <div key={index} className="custom-flex-col text-base font-medium">
           <div className="flex items-center gap-2">
             <SVG
               type={type}
               color={isDarkMode ? "#fff" : "#050901"}
               className="w-[30px] flex justify-center"
             />
             <p className="text-text-primary dark:text-white capitalize">
               {label}
             </p>
           </div>
           {content?.map(({ label, link, modal }, idx) => (
             <div key={idx} className="py-3 px-5">
               {link ? (
                 <Link
                   href={link}
                   className={class_styles}
                   onClick={closeCreateNewModal}
                 >
                   {icon}
                   <p className="text-text-secondary dark:text-darkText-1 capitalize">
                     {label}
                   </p>
                 </Link>
               ) : (
                 <button
                   type="button"
                   className={class_styles}
                   onClick={() => handleModalTrigger(modal)}
                 >
                   {icon}
                   <p className="text-text-secondary dark:text-darkText-1 capitalize">
                     {label}
                   </p>
                 </button>
               )}
             </div>
           ))}
         </div>
       ))}
     </div>
   );
 };

 export default NavCreateNewColumn;















// import { usePermission } from "@/hooks/getPermission";
// import { useMemo } from "react";

// // Define the valid icon types based on your component requirements
// export type ValidIconType =
//   | "buildings"
//   | "people"
//   | "menu_board"
//   | "status_up"
//   | "empty_wallet"
//   | "folder"
//   | "chart"
//   | "task"
//   | "settings"
//   | "briefcase_timer"
//   | "horizontal_line"
//   | "arrow_down"
//   | "sidebar"
//   | "list"
//   | "grid"
//   | "eye";

// export interface NavItem {
//   label: string;
//   href: string;
//   type: ValidIconType;
//   content: NavItem[];
// }

// interface FilterNavItemsParams {
//   items: NavItem[] | null;
//   role: string;
//   permissionsCache: Record<string, boolean>;
//   permissionMapping: Record<
//     string,
//     { permission: string; ownerRoles: string[] }
//   >;
//   managerWalletIsActive: boolean;
//   isCompanyOwner: boolean;
// }

// export const permissionMapping: Record<
//   string,
//   { permission: string; ownerRoles: string[] }
// > = {
//   "call request": {
//     permission: "Can view call request",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   "property request": {
//     permission: "Can view property request",
//     ownerRoles: ["manager"],
//   },
//   complaints: {
//     permission: "Can view complaints",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   wallet: {
//     permission: "Full Wallet Access",
//     ownerRoles: ["director"],
//   },
//   "landlord & landlady": {
//     permission: "Can add and manage landlords/landlady",
//     ownerRoles: ["manager", "account"],
//   },
//   "tenants & occupants": {
//     permission: "Can add and manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
//   properties: {
//     permission: "Can add/delete branch properties",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   "service providers": {
//     permission: "Can view service provider",
//     ownerRoles: ["account", "staff"],
//   },
//   examine: {
//     permission: "Can create examine",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   inspections: {
//     permission: "Can manage inspections",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   calendars: {
//     permission: "Can manage calendar",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   announcements: {
//     permission: "Can create and manage announcement",
//     ownerRoles: ["manager", "account"],
//   },
//   "visitors request": {
//     permission: "Can check in visitors",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   inventory: {
//     permission: "Can create inventory",
//     ownerRoles: ["manager", "account", "staff"],
//   },
//   "vehicles record": {
//     permission: "Can check in and manage vehicle records",
//     ownerRoles: ["manager", "account"],
//   },
//   invoice: {
//     permission: "Can manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
//   expenses: {
//     permission: "Can manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
//   disbursement: {
//     permission: "Can manage tenants/occupants",
//     ownerRoles: ["manager", "account"],
//   },
// };

// export const useNavPermissions = (role: string) => {
//   // Call all permissions at the top level
//   const callRequestPerm = usePermission(role, "Can view call request");
//   const propertyRequestPerm = usePermission(role, "Can view property request");
//   const complaintsPerm = usePermission(role, "Can view complaints");
//   const walletPerm = usePermission(role, "Full Wallet Access");
//   const landlordPerm = usePermission(
//     role,
//     "Can add and manage landlords/landlady"
//   );
//   const tenantsPerm = usePermission(
//     role,
//     "Can add and manage tenants/occupants"
//   );
//   const propertiesPerm = usePermission(
//     role,
//     "Can add/delete branch properties"
//   );
//   const serviceProvidersPerm = usePermission(role, "Can view service provider");
//   const examinePerm = usePermission(role, "Can create examine");
//   const inspectionsPerm = usePermission(role, "Can manage inspections");
//   const calendarsPerm = usePermission(role, "Can manage calendar");
//   const announcementsPerm = usePermission(
//     role,
//     "Can create and manage announcement"
//   );
//   const visitorsRequestPerm = usePermission(role, "Can check in visitors");
//   const inventoryPerm = usePermission(role, "Can create inventory");
//   const vehiclesRecordPerm = usePermission(
//     role,
//     "Can check in and manage vehicle records"
//   );

//   // Create permissions cache using the hook results
//   const permissionsCache = useMemo(
//     () => ({
//       "call request": callRequestPerm,
//       "property request": propertyRequestPerm,
//       complaints: complaintsPerm,
//       wallet: walletPerm,
//       "landlord & landlady": landlordPerm,
//       "tenants & occupants": tenantsPerm,
//       properties: propertiesPerm,
//       "service providers": serviceProvidersPerm,
//       examine: examinePerm,
//       inspections: inspectionsPerm,
//       calendars: calendarsPerm,
//       announcements: announcementsPerm,
//       "visitors request": visitorsRequestPerm,
//       inventory: inventoryPerm,
//       "vehicles record": vehiclesRecordPerm,
//       invoice: tenantsPerm,
//       expenses: tenantsPerm,
//       disbursement: tenantsPerm,
//     }),
//     [
//       callRequestPerm,
//       propertyRequestPerm,
//       complaintsPerm,
//       walletPerm,
//       landlordPerm,
//       tenantsPerm,
//       propertiesPerm,
//       serviceProvidersPerm,
//       examinePerm,
//       inspectionsPerm,
//       calendarsPerm,
//       announcementsPerm,
//       visitorsRequestPerm,
//       inventoryPerm,
//       vehiclesRecordPerm,
//     ]
//   );

//   return { permissionsCache, permissionMapping };
// };

// export const sanitizeClassName = (label: string): string =>
//   label
//     ? label
//         .toLowerCase()
//         .replace(/\s+/g, "-")
//         .replace(/[^a-z0-9-]/g, "")
//     : "";

// // Helper function to ensure type safety
// const ensureValidType = (type: string | undefined): ValidIconType => {
//   const validTypes: ValidIconType[] = [
//     "buildings",
//     "people",
//     "menu_board",
//     "status_up",
//     "empty_wallet",
//     "folder",
//     "chart",
//     "task",
//     "settings",
//     "briefcase_timer",
//     "horizontal_line",
//     "arrow_down",
//     "sidebar",
//     "list",
//   ];

//   return validTypes.includes(type as ValidIconType)
//     ? (type as ValidIconType)
//     : "folder";
// };

// export const filterNavItems = ({
//   items,
//   role,
//   permissionsCache,
//   permissionMapping,
//   managerWalletIsActive,
//   isCompanyOwner,
// }: FilterNavItemsParams): NavItem[] => {
//   // Handle null or undefined items
//   if (!items || !Array.isArray(items)) {
//     return [];
//   }

//   return items
//     .filter((item) => {
//       if (!item || typeof item.label !== "string") {
//         return false;
//       }
//       const mapping = permissionMapping[item.label.toLowerCase()];

//       // Render item if no permission is defined or role is not an owner
//       if (!mapping || !mapping.ownerRoles.includes(role)) {
//         return true;
//       }

//       // Special case for "wallet"
//       if (item.label.toLowerCase() === "wallet") {
//         return (
//           permissionsCache["wallet"] ||
//           (role === "manager" && managerWalletIsActive) ||
//           isCompanyOwner
//         );
//       }

//       return permissionsCache[item.label.toLowerCase()];
//     })
//     .map((item) => {
//       // Ensure type safety by providing a valid type
//       const safeItem: NavItem = {
//         ...item,
//         type: ensureValidType(item.type),
//       };

//       if (safeItem.content && Array.isArray(safeItem.content)) {
//         return {
//           ...safeItem,
//           content: safeItem.content
//             .filter((subItem) => {
//               if (!subItem || typeof subItem.label !== "string") {
//                 return false;
//               }
//               const mapping = permissionMapping[subItem.label.toLowerCase()];
//               return (
//                 !mapping ||
//                 !mapping.ownerRoles.includes(role) ||
//                 permissionsCache[subItem.label.toLowerCase()]
//               );
//             })
//             .map((subItem) => ({
//               ...subItem,
//               type: ensureValidType(subItem.type),
//             })),
//         };
//       }
//       return safeItem;
//     })
//     .filter((item) => !item.content || item.content.length > 0);
// };

import { usePermission } from "@/hooks/getPermission";
import { useMemo } from "react";

// Define the valid icon types based on your component requirements
export type ValidIconType =
  | "buildings"
  | "people"
  | "menu_board"
  | "status_up"
  | "empty_wallet"
  | "folder"
  | "chart"
  | "task"
  | "settings"
  | "briefcase_timer"
  | "horizontal_line"
  | "arrow_down"
  | "sidebar"
  | "list";

export interface NavItem {
  label: string;
  href?: string;
  type?: ValidIconType;
  content?: NavItem[];
}

interface FilterNavItemsParams {
  items: NavItem[] | null;
  role: string;
  permissionsCache: Record<string, boolean>;
  permissionMapping: Record<
    string,
    {
      permissions: Record<string, string>;
      ownerRoles: string[];
    }
  >;
  managerWalletIsActive: boolean;
  isCompanyOwner: boolean;
}

// Role-specific permission mapping - accounts for different permission names per role
export const permissionMapping: Record<
  string,
  {
    permissions: Record<string, string>; // role -> permission name mapping
    ownerRoles: string[];
  }
> = {
  "call request": {
    permissions: {
      manager: "Can view call request",
      account: "Can view call request",
      staff: "Can view call request",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  "property request": {
    permissions: {
      manager: "Can view property request",
    },
    ownerRoles: ["manager"],
  },
  complaints: {
    permissions: {
      manager: "Can view complaints",
      account: "Can view complaints",
      staff: "Can view complaints",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  wallet: {
    permissions: {
      director: "Full Wallet Access",
    },
    ownerRoles: ["director"],
  },
  "landlord & landlady": {
    permissions: {
      manager: "Can add and manage landlords/landlady",
      account: "Can add and manage landlords/landlady",
    },
    ownerRoles: ["manager", "account"],
  },
  // "tenants & occupants": {
  //   permissions: {
  //     manager: "Can add and manage tenants/occupants",
  //     account: "Can manage tenants/occupants", 
  //   },
  //   ownerRoles: ["manager", "account"],
  // },
  properties: {
    permissions: {
      manager: "Can add/delete branch properties",
      account: "Can add/delete branch properties",
      staff: "Can add/delete branch properties",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  "service providers": {
    permissions: {
      manager: "Can create service provider",
      account: "Can view service provider",
      staff: "Can view service provider",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  examine: {
    permissions: {
      manager: "Can create examine",
      account: "Can create examine",
      staff: "Can create examine",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  inspections: {
    permissions: {
      manager: "Can manage inspections",
      account: "Can manage inspections",
      staff: "Can manage inspections",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  calendars: {
    permissions: {
      manager: "Can manage calendar",
      account: "Can manage calendar",
      staff: "Can manage calendar",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  announcements: {
    permissions: {
      manager: "Can create and manage announcement",
      account: "Can create announcement", 
      staff: "Can view announcement",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  "visitors request": {
    permissions: {
      manager: "Can check in visitors",
      account: "Can check in visitors",
      staff: "Can check in visitors",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  inventory: {
    permissions: {
      manager: "Can create inventory",
      account: "Can create branch inventory", 
      staff: "Can create inventory",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  "vehicles record": {
    permissions: {
      manager: "Can check in and manage vehicle records",
      account: "Can check in and manage vehicle records",
      staff: "Can check in vehicle records",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  invoice: {
    permissions: {
      manager: "Can add and manage tenants/occupants",
      account: "Can manage tenants/occupants",
    },
    ownerRoles: ["manager", "account"],
  },
  expenses: {
    permissions: {
      manager: "Can add and manage tenants/occupants",
      account: "Can manage tenants/occupants",
    },
    ownerRoles: ["manager", "account"],
  },
  disbursement: {
    permissions: {
      manager: "Can add and manage tenants/occupants",
      account: "Can manage tenants/occupants",
    },
    ownerRoles: ["manager", "account"],
  },
};

export const useNavPermissions = (role: string) => {
  // Call all permissions at the top level - React-compliant way
  const callRequestPerm = usePermission(role, "Can view call request");
  const propertyRequestPerm = usePermission(role, "Can view property request");
  const complaintsPerm = usePermission(role, "Can view complaints");
  const walletPerm = usePermission(role, "Full Wallet Access");
  const landlordPerm = usePermission(
    role,
    "Can add and manage landlords/landlady"
  );
  const tenantsPerm = usePermission(
    role,
    "Can add and manage tenants/occupants"
  );
  const propertiesPerm = usePermission(
    role,
    "Can add/delete branch properties"
  );
  const serviceProvidersPerm = usePermission(role, "Can view service provider");
  const examinePerm = usePermission(role, "Can create examine");
  const inspectionsPerm = usePermission(role, "Can manage inspections");
  const calendarsPerm = usePermission(role, "Can manage calendar");
  const announcementsPerm = usePermission(
    role,
    "Can create and manage announcement"
  );
  const visitorsRequestPerm = usePermission(role, "Can check in visitors");
  const inventoryPerm = usePermission(role, "Can create inventory");
  const vehiclesRecordPerm = usePermission(
    role,
    "Can check in and manage vehicle records"
  );

  // Create permissions cache using the hook results
  const permissionsCache = useMemo(
    () => ({
      "call request": callRequestPerm,
      "property request": propertyRequestPerm,
      complaints: complaintsPerm,
      wallet: walletPerm,
      "landlord & landlady": landlordPerm,
      "tenants & occupants": tenantsPerm,
      properties: propertiesPerm,
      "service providers": serviceProvidersPerm,
      examine: examinePerm,
      inspections: inspectionsPerm,
      calendars: calendarsPerm,
      announcements: announcementsPerm,
      "visitors request": visitorsRequestPerm,
      inventory: inventoryPerm,
      "vehicles record": vehiclesRecordPerm,
      invoice: tenantsPerm,
      expenses: tenantsPerm,
      disbursement: tenantsPerm,
    }),
    [
      callRequestPerm,
      propertyRequestPerm,
      complaintsPerm,
      walletPerm,
      landlordPerm,
      tenantsPerm,
      propertiesPerm,
      serviceProvidersPerm,
      examinePerm,
      inspectionsPerm,
      calendarsPerm,
      announcementsPerm,
      visitorsRequestPerm,
      inventoryPerm,
      vehiclesRecordPerm,
    ]
  );

  return { permissionsCache, permissionMapping };
};

export const sanitizeClassName = (label: string): string =>
  label
    ? label
        .toLowerCase()
        .replace(/\s+/g, "-")
        .replace(/[^a-z0-9-]/g, "")
    : "";

// Helper function to ensure type safety
const ensureValidType = (type: string | undefined): ValidIconType => {
  const validTypes: ValidIconType[] = [
    "buildings",
    "people",
    "menu_board",
    "status_up",
    "empty_wallet",
    "folder",
    "chart",
    "task",
    "settings",
    "briefcase_timer",
    "horizontal_line",
    "arrow_down",
    "sidebar",
    "list",
  ];

  return validTypes.includes(type as ValidIconType)
    ? (type as ValidIconType)
    : "folder";
};

export const filterNavItems = ({
  items,
  role,
  permissionsCache,
  permissionMapping,
  managerWalletIsActive,
  isCompanyOwner,
}: FilterNavItemsParams): NavItem[] => {
  // Handle null or undefined items
  if (!items || !Array.isArray(items)) {
    return [];
  }

  return items
    .filter((item) => {
      if (!item || typeof item.label !== "string") {
        return false;
      }
      const mapping = permissionMapping[item.label.toLowerCase()];

      // Render item if no permission is defined or role is not an owner
      if (!mapping || !mapping.ownerRoles.includes(role)) {
        return true;
      }

      // Special case for "wallet"
      if (item.label.toLowerCase() === "wallet") {
        return (
          permissionsCache["wallet"] ||
          (role === "manager" && managerWalletIsActive) ||
          isCompanyOwner
        );
      }

      return permissionsCache[item.label.toLowerCase()];
    })
    .map((item) => {
      // Ensure type safety by providing a valid type
      const safeItem: NavItem = {
        ...item,
        type: ensureValidType(item.type),
      };

      if (safeItem.content && Array.isArray(safeItem.content)) {
        return {
          ...safeItem,
          content: safeItem.content
            .filter((subItem) => {
              if (!subItem || typeof subItem.label !== "string") {
                return false;
              }
              const mapping = permissionMapping[subItem.label.toLowerCase()];
              return (
                !mapping ||
                !mapping.ownerRoles.includes(role) ||
                permissionsCache[subItem.label.toLowerCase()]
              );
            })
            .map((subItem) => ({
              ...subItem,
              type: ensureValidType(subItem.type),
            })),
        };
      }
      return safeItem;
    })
    .filter((item) => !item.content || item.content.length > 0);
};























import { usePermission } from "@/hooks/getPermission";
import { useMemo } from "react";
import { SVGType } from "../SVG/types";

// Staff configurations for reference
export const staffConfigurations = [
  {
    title: "admin configuration (company director)",
    permissions: [
      [
        "Add Other Directors",
        "Change Company Module",
        "Manage Messages & Reviews",
        "Notification Preferences",
        "Reset System Settings",
        "Customize Appearance",
        "Manage Enrollment Settings",
        "Set Authorized Signature",
        "Change Wallet PIN",
      ],
      [
        "Update Bank Details",
        "Modify SMS Sender Name",
        "Configure SMTP Settings",
        "Edit Services",
        "Manage Subscription Settings",
        "Access Management Settings",
        "Modify Company Information",
        "Full Wallet Access",
        "Activate Add-on",
      ],
    ],
  },
  {
    title: "partner configuration (branch manager)",
    permissions: [
      [
        "Can view and reply branch messages",
        "Can add/delete branch staff",
        "Can add/delete branch properties",
        "Can view and edit branch profile",
        "Can upgrade or downgrade branch staff account",
        "Can view call request",
        "Can check in visitors",
        "Can view property request",
        "Can create examine",
        "Can manage inspections",
      ],
      [
        "Can create and manage announcement",
        "Can add and manage tenants/occupants",
        "Can view and reply property reviews",
        "Can add and manage landlords/landlady",
        "Can view complaints",
        "Can create inventory",
        "Can manage calendar",
        "Can create service provider",
        "Can check in and manage vehicle records",
        "Can approve and refund caution deposit",
      ],
    ],
  },
  {
    title: "colleague configuration (account manager)",
    permissions: [
      [
        "Can manage tenants/occupants",
        "Can view service provider",
        "Can create announcement",
        "Can add/delete branch properties",
        "Can view call request",
        "Can create branch inventory",
        "Can reply assigned messages",
        "Can check in and manage vehicle records",
      ],
      [
        "Can add and manage landlords/landlady",
        "Can check in visitors",
        "Can manage calendar",
        "Can create examine",
        "Can view complaints",
        "Can manage inspections",
      ],
    ],
  },
  {
    title: "staff configuration (other staff)",
    permissions: [
      [
        "Can view complaints",
        "Can view announcement",
        "Can create examine",
        "Can manage inspections",
        "Can view service provider",
        "Can check in vehicle records",
      ],
      [
        "Can check in visitors",
        "Can view call request",
        "Can create inventory",
        "Can manage calendar",
        "Can view and reply assigned messages",
      ],
    ],
  },
];

// Role-specific permission mapping for nav create items
export const permissionMapping: Record<
  string,
  {
    permissions: Record<string, string>; // role -> permission name mapping
    ownerRoles: string[];
  }
> = {
  "landlord / landlady": {
    permissions: {
      manager: "Can add and manage landlords/landlady",
      account: "Can add and manage landlords/landlady",
    },
    ownerRoles: ["manager", "account"],
  },
  "tenants / occupants": {
    permissions: {
      manager: "Can add and manage tenants/occupants",
      account: "Can manage tenants/occupants", // Different permission name for account role
    },
    ownerRoles: ["manager", "account"],
  },
  branch: {
    permissions: {
      manager: "Can add/delete branch properties",
      account: "Can add/delete branch properties",
    },
    ownerRoles: ["manager", "account"],
  },
  property: {
    permissions: {
      manager: "Can add/delete branch properties",
      account: "Can add/delete branch properties",
      staff: "Can add/delete branch properties",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  "service provider": {
    permissions: {
      manager: "Can create service provider",
      account: "Can view service provider", // Different permission for account
      staff: "Can view service provider", // Different permission for staff
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  examine: {
    permissions: {
      manager: "Can create examine",
      account: "Can create examine",
      staff: "Can create examine",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  maintenance: {
    permissions: {
      manager: "Can manage inspections",
      account: "Can manage inspections",
      staff: "Can manage inspections",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  reminder: {
    permissions: {
      manager: "Can manage calendar",
      account: "Can manage calendar",
      staff: "Can manage calendar",
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  announcement: {
    permissions: {
      manager: "Can create and manage announcement",
      account: "Can create announcement", // Different permission name for account role
      staff: "Can view announcement", // Staff can only view, not create
    },
    ownerRoles: ["manager", "account", "staff"],
  },
  invoice: {
    permissions: {
      manager: "Can add and manage tenants/occupants",
      account: "Can manage tenants/occupants",
    },
    ownerRoles: ["manager", "account"],
  },
  expenses: {
    permissions: {
      manager: "Can add and manage tenants/occupants",
      account: "Can manage tenants/occupants",
    },
    ownerRoles: ["manager", "account"],
  },
  disbursement: {
    permissions: {
      manager: "Can add and manage tenants/occupants",
      account: "Can manage tenants/occupants",
    },
    ownerRoles: ["manager", "account"],
  },
  "tenancy agreement": {
    permissions: {
      manager: "Can add and manage tenants/occupants",
      account: "Can manage tenants/occupants",
    },
    ownerRoles: ["manager", "account"],
  },
  "other documents": {
    permissions: {
      manager: "Can add and manage tenants/occupants",
      account: "Can manage tenants/occupants",
    },
    ownerRoles: ["manager", "account"],
  },
  "tenancy form": {
    permissions: {
      staff: "Can view and reply assigned messages", // Staff have different permission
    },
    ownerRoles: ["staff"],
  },
  "management form": {
    permissions: {
      staff: "Can view and reply assigned messages", // Staff have different permission
    },
    ownerRoles: ["staff"],
  },
};

// Custom hook for nav create permissions
export const useNavCreatePermissions = (role: string) => {
  // Helper function to get role-specific permission name
  const getPermissionForRole = (
    navItem: string,
    userRole: string
  ): string | null => {
    const mapping = permissionMapping[navItem];
    if (!mapping) return null;
    return mapping.permissions[userRole] || null;
  };

  // Call all permissions at the top level with role-specific permission names
  const landlordPerm = usePermission(
    role,
    getPermissionForRole("landlord / landlady", role) || ""
  );
  const tenantsPerm = usePermission(
    role,
    getPermissionForRole("tenants / occupants", role) || ""
  );
  const branchPerm = usePermission(
    role,
    getPermissionForRole("branch", role) || ""
  );
  const propertiesPerm = usePermission(
    role,
    getPermissionForRole("property", role) || ""
  );
  const serviceProviderPerm = usePermission(
    role,
    getPermissionForRole("service provider", role) || ""
  );
  const examinePerm = usePermission(
    role,
    getPermissionForRole("examine", role) || ""
  );
  const inspectionsPerm = usePermission(
    role,
    getPermissionForRole("maintenance", role) || ""
  );
  const calendarPerm = usePermission(
    role,
    getPermissionForRole("reminder", role) || ""
  );
  const announcementPerm = usePermission(
    role,
    getPermissionForRole("announcement", role) || ""
  );
  const formsPerm = usePermission(
    role,
    getPermissionForRole("tenancy form", role) || ""
  );

  // Create permissions cache using the hook results
  const permissionsCache = useMemo(
    () => ({
      "landlord / landlady": landlordPerm,
      "tenants / occupants": tenantsPerm,
      branch: branchPerm,
      property: propertiesPerm,
      "service provider": serviceProviderPerm,
      examine: examinePerm,
      maintenance: inspectionsPerm,
      reminder: calendarPerm,
      announcement: announcementPerm,
      invoice: tenantsPerm, // Uses same as tenants
      expenses: tenantsPerm, // Uses same as tenants
      disbursement: tenantsPerm, // Uses same as tenants
      "tenancy agreement": tenantsPerm, // Uses same as tenants
      "other documents": tenantsPerm, // Uses same as tenants
      "tenancy form": formsPerm,
      "management form": formsPerm,
    }),
    [
      landlordPerm,
      tenantsPerm,
      branchPerm,
      propertiesPerm,
      serviceProviderPerm,
      examinePerm,
      inspectionsPerm,
      calendarPerm,
      announcementPerm,
      formsPerm,
    ]
  );

  return { permissionsCache, permissionMapping };
};

// Define interfaces for better type safety
export interface NavCreateItem {
  label: string;
  link?: string;
  modal?: string;
}

export interface NavCreateSection {
  type: SVGType;
  label: string;
  content?: NavCreateItem[];
}

interface FilterNavCreateItemsParams {
  data: NavCreateSection[];
  role: string;
  permissionsCache: Record<string, boolean>;
  permissionMapping: Record<
    string,
    {
      permissions: Record<string, string>;
      ownerRoles: string[];
    }
  >;
}

// Filter function for nav create items
export const filterNavCreateItems = ({
  data,
  role,
  permissionsCache,
  permissionMapping,
}: FilterNavCreateItemsParams): NavCreateSection[] => {
  const options = ["management", "tasks", "accounting", "documents"];

  return data
    .filter((item) => options.includes(item.label.toLowerCase()))
    .map((item) => ({
      ...item,
      content: item.content?.filter(({ label }) => {
        const mapping = permissionMapping[label.toLowerCase()];

        // Render item if no permission is defined or if the role is not an owner
        if (!mapping || !mapping.ownerRoles.includes(role)) {
          return true;
        }

        // Only filter out if the role owns the permission and it's false
        return permissionsCache[label.toLowerCase()];
      }),
    }))
    .filter((item) => item.content && item.content.length > 0);
};

















// "use client";

// // Types
// import type {
//   CreatePropertyFormProps,
//   PropertyFormStateType,
//   AllBranchesResponse,
//   AllLandlordsResponse,
//   AllInventoryResponse,
// } from "./types";
// import { convertYesNoToBoolean } from "@/utils/checkFormDataForImageOrAvatar";
// import { useState, useEffect, useRef, useCallback, useMemo } from "react";
// import { PlusIcon, DeleteIconX, ExclamationMark } from "@/public/icons/icons";
// import Input from "@/components/Form/Input/input";
// import Select from "@/components/Form/Select/select";
// import TextArea from "@/components/Form/TextArea/textarea";
// import {
//   getAllCities,
//   getAllLocalGovernments,
//   getAllStates,
//   getCities,
//   getLocalGovernments,
// } from "@/utils/states";
// import { v4 as uuidv4 } from "uuid";
// import { DragDropContext, Droppable, DropResult } from "@hello-pangea/dnd";
// import DraggableImage from "./draggable-image";
// import { propertyCategories } from "@/data";
// import { AuthForm } from "@/components/Auth/auth-components";
// import {
//   getAllStaffByBranch,
//   property_form_state_data,
//   transformPropertyFormData,
// } from "./data";
// import { currencySymbols } from "@/utils/number-formatter";
// import FlowProgress from "@/components/FlowProgress/flow-progress";
// import PropertyFormFooter from "./property-form-footer.tsx";
// import { useMultipleImageUpload } from "@/hooks/useMultipleImageUpload";
// import { usePersonalInfoStore } from "@/store/personal-info-store";
// import useFetch from "@/hooks/useFetch";
// import clsx from "clsx";
// import { useAddUnitStore } from "@/store/add-unit-store";
// import Cookies from "js-cookie";
// import { useRole } from "@/hooks/roleContext";
// import { Modal, ModalContent, ModalTrigger } from "@/components/Modal/modal";
// import GoogleMapsModal from "./google-maps";
// import { MultiSelect } from "@/components/multiselect/multi-select";
// import { Cat } from "lucide-react";
// import SelectWithImage from "@/components/Form/Select/select-with-image";
// import RestrictInput from "@/components/Form/Input/InputWIthRestrict";
// import {
//   fetchBranchDependentData,
//   getBranchInventories,
// } from "@/utils/getData";
// import { BranchDependentData } from "@/utils/types";
// import api, { handleAxiosError } from "@/services/api";
// import FullPageLoader from "@/components/Loader/start-rent-loader";
// import { useTourStore } from "@/store/tour-store";
// import { usePathname } from "next/navigation";
// import { useGlobalStore } from "@/store/general-store";
// import { toast } from "sonner";
// import { landlordTableFields } from "@/app/(nav)/manager/management/landlord/data";
// import { useBranchInfoStore } from "@/store/branch-info-store";

// const maxNumberOfImages = 6;

// type SetPropertyStateChanges = Partial<{
//   [K in keyof PropertyFormStateType]: PropertyFormStateType[K];
// }>;

// const CreatePropertyForm: React.FC<CreatePropertyFormProps> = ({
//   editMode,
//   handleSubmit,
//   formType,
//   propertyId,
//   onAddUnit,
//   landlordId,
// }) => {
//   const [requestLoading, setRequestLoading] = useState(false);
//   const companyId = usePersonalInfoStore((state) => state.company_id) || "";
//   const propertyDetails = useAddUnitStore((s) => s.propertyDetails);
//   const propertySettings = useAddUnitStore((s) => s.propertySettings);
//   const setGlobalStore = useGlobalStore((s) => s.setGlobalInfoStore);
//   const selectedLandlordId = useGlobalStore((s) => s.selectedLandlordId);
//   const { branch } = usePersonalInfoStore();
//   const branchIdFromStore = useBranchInfoStore((state) => state.branch_id);
//   const [state, setState] = useState<PropertyFormStateType>(
//     property_form_state_data
//   );
//   const { role, setRole } = useRole();
//   const {
//     goToStep,
//     restartTour,
//     isTourCompleted,
//     persist,
//     setShouldRenderTour,
//     setPersist,
//   } = useTourStore();
//   const pathname = usePathname();
//   const isDirector = role === "director";
//   const isAccountOfficer = role === "account";
//   const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
//   const [selectedStaffs, setSelectedStaffs] = useState<string[]>([]);
//   // const [selectedLandlord, setSelectedLandlord] = useState<string[]>([]);
//   const [selectedLandlord, setSelectedLandlord] = useState<string | undefined>(
//     undefined
//   );
//   const [selectedOfficer, setSelectedOfficer] = useState<string[]>([]);
//   const [inventoryError, setInventoryError] = useState<string | null>(null);
//   const [inventoryLoading, setInventoryLoading] = useState<boolean>(false);
//   const [branchData, setBranchData] = useState<BranchDependentData>({
//     inventory: { data: null, loading: false, error: null },
//     staff: { data: null, loading: false, error: null },
//     accountOfficer: { data: null, loading: false, error: null },
//   });
//   const [inventoryData, setInventoryData] =
//     useState<AllInventoryResponse | null>(null);
//   const scrollTargetRef = useRef<HTMLDivElement>(null);
//   const [lat, setLat] = useState(0);
//   const [lng, setLng] = useState(0);
//   const [coordinate, setCoordinate] = useState(
//     propertySettings?.coordinate || ""
//   );

//   const BRANCH_MANAGER_ID = useBranchInfoStore((state) => state.manager.id);

//   const CautionDepositOptions = [
//     { label: "Keep with Landlord", value: "Landlord" },
//     { label: "Keep it with Manager", value: "Company" },
//     { label: "Escrow it", value: "Admin" },
//     { label: "None", value: "" },
//   ];

//   const {
//     state: selectedState,
//     lga,
//     city,
//     selectedBranch,
//     staff,
//     staffOptions,
//     accountOfficerOptions,
//     resetKey,
//   } = state;

//   const isFacility = formType === "facility";
//   // const selectedBranchId = selectedBranch.value || propertyDetails?.branch_id;
//   // const selectedBranchId = selectedBranch.value;
//   // Use branch_id from store for non-directors, otherwise use selectedBranch.value
//   const selectedBranchId = isDirector
//     ? selectedBranch.value
//     : branchIdFromStore;

//   const setPropertyState = (changes: SetPropertyStateChanges) => {
//     setState((x) => {
//       const newState = { ...x, ...changes };
//       if ("state" in changes) {
//         newState.lga = "";
//         newState.city = "";
//       } else if ("lga" in changes) {
//         newState.city = "";
//       }
//       return newState;
//     });
//   };

//   const {
//     images,
//     imageFiles,
//     fileInputRef,
//     handleFileChange,
//     removeImage,
//     handleImageReorder,
//     resetImages,
//   } = useMultipleImageUpload({
//     maxImages: maxNumberOfImages,
//     initialImages: editMode
//       ? propertyDetails?.images.map((img) => img.path)
//       : [],
//   });

//   const sortableImages = images.map((image, index) => ({
//     id: uuidv4(),
//     index,
//     image,
//   }));

//   const handleDragEnd = (result: DropResult) => {
//     if (!result.destination) return;
//     const { source, destination } = result;
//     if (source.index === destination.index) return;
//     handleImageReorder(source.index, destination.index);
//   };

//   // Function to reset the state
//   const handleReset = () => {
//     setState((x) => ({
//       ...x,
//       resetKey: x.resetKey + 1,
//       state: editMode ? propertyDetails?.state || "" : "",
//       lga: editMode ? propertyDetails?.local_govt || "" : "",
//       city: editMode ? propertyDetails?.city || "" : "",
//       staff: [],
//     }));
//     resetImages();
//     setSelectedCategory(null);
//     // setSelectedLandlord([]);
//     // setSelectedLandlord("");
//     // setGlobalStore("selectedLandlordId", "");
//   };

//   const {
//     data: branchesData,
//     loading: branchesLoading,
//     error: branchesError,
//   } = useFetch<AllBranchesResponse>("/branches/select");

//   const {
//     data: landlordsData,
//     loading: landlordsLoading,
//     error: landlordsError,
//   } = useFetch<AllLandlordsResponse>("/landlord/select");

//   const {
//     data: staffsData,
//     loading: staffsLoading,
//     error: staffsError,
//   } = useFetch<AllLandlordsResponse>(`branch/${selectedBranchId}/staff`);

//   const branchOptions =
//     branchesData?.data.map((branch) => ({
//       value: branch.id,
//       label: branch.branch_name,
//     })) || [];

//   useEffect(() => {
//     const fetchInventory = async () => {
//       if (selectedBranchId) {
//         setInventoryLoading(true);
//         setInventoryError(null);
//         try {
//           const data = await getBranchInventories(String(selectedBranchId));
//           setInventoryData(data);
//         } catch (error) {
//           setInventoryError("Failed to load inventories");
//         } finally {
//           setInventoryLoading(false);
//         }
//       }
//     };
//     fetchInventory();
//   }, [selectedBranchId]);

//   useEffect(() => {
//     const fetchData = async () => {
//       if (!selectedBranchId) {
//         setBranchData({
//           inventory: { data: null, loading: false, error: null },
//           staff: { data: null, loading: false, error: null },
//           accountOfficer: { data: null, loading: false, error: null },
//         });
//         return;
//       }

//       const data = await fetchBranchDependentData(String(selectedBranchId));
//       setBranchData(data);
//     };

//     fetchData();
//   }, [selectedBranchId]);

//   useEffect(() => {
//     if (branchData?.staff?.data) {
//       setPropertyState({
//         staffOptions: branchData?.staff?.data?.data?.map((s: any) => ({
//           value: s.id,
//           label: s.user.name,
//           icon: s.user.profile.picture,
//         })),
//       });
//     }
//   }, [branchData?.staff?.data]);

//   const landlordOptions = useMemo(
//     () =>
//       landlordsData?.data?.map((landlord) => ({
//         value: String(landlord.id),
//         label: landlord.name,
//         icon: landlord.picture,
//       })) || [],
//     [landlordsData]
//   );

//   // console.log("landlordsData", landlordsData);
//   const inventoryOptions =
//     branchData?.inventory?.data?.data?.map((inventory: any) => ({
//       value: inventory.id,
//       label: inventory.title,
//     })) || [];

//   const officerOptions =
//     branchData?.accountOfficer?.data?.data?.map((officer: any) => ({
//       value: officer.id,
//       label: officer.user.name,
//       icon: officer.user.profile.picture,
//     })) || [];

//   const staffOption =
//     branchData?.staff?.data?.data
//       .filter((s: any) => s.staff_role !== "manager")
//       .map((s: any) => ({
//         value: s.id,
//         label: s.user.name,
//         icon: s.user.profile.picture,
//       })) || [];

//   useEffect(() => {
//     if (staffsData) {
//       setPropertyState({
//         staffOptions: staffsData?.data?.map((s: any) => ({
//           value: s.id,
//           label: s.user.name,
//           icon: s.user.profile.picture,
//         })),
//       });
//     }
//   }, [staffsData]);

//   useEffect(() => {
//     let newLandlord: string | undefined = undefined;
//     if (
//       editMode &&
//       propertyDetails?.land_lord_id != null &&
//       landlordOptions.length
//     ) {
//       newLandlord = String(propertyDetails.land_lord_id);
//     } else if (!editMode && landlordId && landlordOptions.length) {
//       const exists = landlordOptions.some(
//         (l) => l.value === String(landlordId)
//       );
//       newLandlord = exists ? String(landlordId) : undefined;
//     }
//     setSelectedLandlord(newLandlord);
//   }, [editMode, propertyDetails, landlordId, landlordOptions]);

//   useEffect(() => {
//     if (editMode && propertyDetails) {
//       setState((x) => ({
//         ...x,
//         state: propertyDetails.state || "",
//         lga: propertyDetails.local_govt || "",
//         city: propertyDetails.city || "",
//         selectedBranch: {
//           value: propertyDetails.branch_id || "",
//           label: propertyDetails.branch_name || "",
//         },
//       }));
//     }
//   }, [propertyDetails, editMode]);

//   const yesNoFields = [
//     "group_chat",
//     "rent_penalty",
//     "fee_penalty",
//     "request_call_back",
//     "book_visitors",
//     "vehicle_record",
//     "active_vat",
//     "is_inventory",
//   ];

//   // console.log("selected", selectedStaffs)
//   const handleFormSubmit = async (data: Record<string, any>) => {
//     setRequestLoading(true);
//     convertYesNoToBoolean(data, yesNoFields);
//     const payload = transformPropertyFormData(
//       data,
//       imageFiles,
//       companyId,
//       selectedStaffs
//     );
//     await handleSubmit(payload);
//     setRequestLoading(false);
//   };

//   const handleGoToTourStep = (stepIndex: number) => {
//     goToStep(stepIndex, pathname);
//   };

//   useEffect(() => {
//     setPersist(false);
//     if (!isTourCompleted("EditPropertyTour")) {
//       setShouldRenderTour(true);
//     } else {
//       setShouldRenderTour(false);
//     }

//     return () => setShouldRenderTour(false);
//   }, [setShouldRenderTour, setPersist, isTourCompleted]);

//   useEffect(() => {
//     if (scrollTargetRef.current) {
//       scrollTargetRef.current.scrollIntoView({ behavior: "smooth" });
//     }
//   }, []);

//   const selectedLandlordAgent = useMemo(() => {
//     if (!selectedLandlord || !landlordsData?.data) return null;
//     const landlord = landlordsData.data.find(
//       (l) => String(l.id) === String(selectedLandlord)
//     );
//     return landlord?.agent || null;
//   }, [selectedLandlord, landlordsData]);

//   const filteredCautionDepositOptions = useMemo(() => {
//     // Only show "Keep with Landlord" if agent is "Mobile"
//     if (selectedLandlordAgent?.toLowerCase() === "mobile") {
//       return CautionDepositOptions;
//     }
//     // Otherwise, filter out "Keep with Landlord"
//     return CautionDepositOptions.filter((opt) => opt.value !== "Landlord");
//   }, [selectedLandlordAgent]);

//   if (requestLoading) {
//     return <FullPageLoader text="Submitting..." />;
//   }

//   const handleSectionTour = () => {
//     if (formType === "rental" && editMode && pathname.startsWith("/manager")) {
//       handleGoToTourStep(12);
//     } else if (
//       formType === "rental" &&
//       !editMode &&
//       pathname.startsWith("/manager")
//     ) {
//       handleGoToTourStep(13);
//     } else if (
//       formType === "rental" &&
//       !editMode &&
//       pathname.startsWith("/accountant")
//     ) {
//       handleGoToTourStep(12);
//     } else if (
//       formType === "rental" &&
//       editMode &&
//       pathname.startsWith("/accountant")
//     ) {
//       handleGoToTourStep(11);
//     } else if (
//       formType === "facility" &&
//       editMode &&
//       pathname.startsWith("/accountant")
//     ) {
//       handleGoToTourStep(8);
//     } else if (
//       formType === "facility" &&
//       !editMode &&
//       pathname.startsWith("/accountant")
//     ) {
//       handleGoToTourStep(9);
//     } else if (formType === "rental" && !editMode) {
//       handleGoToTourStep(14);
//     } else if (formType === "facility" && !editMode) {
//       handleGoToTourStep(10);
//     } else if (formType === "rental" && editMode) {
//       handleGoToTourStep(13);
//     } else if (
//       formType === "facility" &&
//       editMode &&
//       pathname.startsWith("/manager")
//     ) {
//       handleGoToTourStep(9);
//     } else if (formType === "facility" && editMode) {
//       handleGoToTourStep(10);
//     }
//   };

//   return (
//     <FlowProgress
//       key="property-form-progress"
//       steps={1}
//       activeStep={0}
//       inputClassName="property-form-input"
//       showProgressBar={false}
//       className={clsx({
//         "p-6 bg-white dark:bg-darkText-primary rounded-2xl": editMode,
//       })}
//     >
//       <AuthForm
//         onFormSubmit={handleFormSubmit}
//         // id={editMode ? "edit-property-form" : "create-property-form"}
//         skipValidation
//       >
//         <div className="max-w-[970px] scroll-mt-[160px]" ref={scrollTargetRef}>
//           <input name="property_type" type="hidden" value={formType} />
//           <div className="mb-5 lg:mb-8 property-picture-upload-wrapper">
//             <p className="mb-5 text-text-secondary dark:text-darkText-1 text-base font-normal">
//               Set{" "}
//               {formType === "rental"
//                 ? "property"
//                 : selectedCategory?.toLocaleLowerCase() === "estate"
//                 ? "Estate"
//                 : selectedCategory?.toLocaleLowerCase() === "facility"
//                 ? "Facility"
//                 : "Estate/Facility"}{" "}
//               pictures for easy recognition (maximum of {maxNumberOfImages}{" "}
//               images). Please drag your preferred image and place it in the
//               first position to make it the primary display.
//             </p>
//             <DragDropContext onDragEnd={handleDragEnd}>
//               <Droppable droppableId="property-images" direction="horizontal">
//                 {(provided, snapshot) => (
//                   <div
//                     ref={provided.innerRef}
//                     {...provided.droppableProps}
//                     className="flex gap-4 overflow-x-auto custom-round-scrollbar overflow-y-hidden pb-2"
//                   >
//                     {sortableImages.map((s) => (
//                       <DraggableImage
//                         key={s.id}
//                         id={s.id}
//                         image={s.image}
//                         index={s.index}
//                         removeImage={removeImage}
//                       />
//                     ))}
//                     {provided.placeholder}
//                     {images.length < 6 && (
//                       <label
//                         htmlFor="property_pictures"
//                         className="flex-shrink-0 w-[285px] h-[155px] rounded-lg border-2 border-dashed border-[#626262] bg-white dark:bg-darkText-primary flex flex-col items-center justify-center cursor-pointer text-[#626262] dark:text-darkText-2"
//                       >
//                         <PlusIcon />
//                         <span className="text-black dark:text-white text-base font-normal mt-2">
//                           Add Pictures
//                         </span>
//                         <input
//                           id="property_pictures"
//                           type="file"
//                           accept="image/*"
//                           multiple
//                           onChange={handleFileChange}
//                           className="hidden"
//                           ref={fileInputRef}
//                         />
//                       </label>
//                     )}
//                   </div>
//                 )}
//               </Droppable>
//             </DragDropContext>
//           </div>
//           {/* Video Link */}
//           {formType === "rental" && (
//             <div className="youtube-video-link-wrapper md:grid md:gap-5 md:grid-cols-2 lg:grid-cols-3">
//               <Input
//                 id="video_link"
//                 label="Video Link"
//                 type="url"
//                 className="mb-5"
//                 placeholder="https://www.youtube.com/video "
//                 inputClassName="bg-white rounded-[8px] md:col-span-1"
//                 defaultValue={
//                   editMode ? propertyDetails?.video_link : undefined
//                 }
//               />
//             </div>
//           )}
//           {/* Property Details */}
//           <div className="flex gap-2 items-center">
//             <p className="text-primary-navy dark:text-white font-bold text-lg lg:text-xl">
//               {formType === "rental"
//                 ? "Property Details"
//                 : selectedCategory?.toLocaleLowerCase() === "estate"
//                 ? "Estate Details"
//                 : selectedCategory?.toLocaleLowerCase() === "facility"
//                 ? "Facility Details"
//                 : "Estate/Facility Details"}
//             </p>
//             <button
//               onClick={() => {
//                 if (formType === "rental" && !editMode) {
//                   handleGoToTourStep(4);
//                 } else if (formType === "facility" && !editMode) {
//                   handleGoToTourStep(3);
//                 } else if (formType === "rental" && editMode) {
//                   handleGoToTourStep(3);
//                 } else if (formType === "facility" && editMode) {
//                   handleGoToTourStep(2);
//                 }
//               }}
//               type="button"
//               className="text-orange-normal"
//             >
//               <ExclamationMark />
//             </button>
//           </div>
//           <hr className="my-4" />
//           <div className="mb-5 grid gap-4 md:gap-5 md:grid-cols-2 lg:grid-cols-3 dark:bg-darkText-primary dark:p-4 dark:rounded-lg">
//             <Select
//               options={
//                 formType === "rental"
//                   ? propertyCategories["rental property"]
//                   : propertyCategories["gated estate/facility"]
//               }
//               id="category"
//               label="Category"
//               isSearchable={false}
//               className="property-category-wrapper"
//               inputContainerClassName="bg-white"
//               resetKey={resetKey}
//               required
//               hiddenInputClassName="property-form-input"
//               onChange={(category) => setSelectedCategory(category)}
//               defaultValue={editMode ? propertyDetails?.category : undefined}
//             />
//             <Input
//               id="title"
//               label={
//                 formType === "rental"
//                   ? "Property Name"
//                   : selectedCategory?.toLocaleLowerCase() === "estate"
//                   ? "Estate Name"
//                   : selectedCategory?.toLocaleLowerCase() === "facility"
//                   ? "Facility Name"
//                   : "Estate/Facility Name"
//               }
//               inputClassName="bg-white dark:bg-darkText-primary rounded-[8px] property-form-input"
//               required
//               className="property-name-wrapper"
//               defaultValue={
//                 editMode ? propertyDetails?.property_title : undefined
//               }
//             />
//             <Select
//               id="state"
//               options={getAllStates()}
//               label="State"
//               value={selectedState}
//               className="property-state-wrapper"
//               inputContainerClassName="bg-white"
//               onChange={(state) => setPropertyState({ state })}
//               required
//               hiddenInputClassName="property-form-input"
//             />

//             <Select
//               options={getLocalGovernments(selectedState)}
//               id="local_government"
//               label="local government"
//               value={lga}
//               inputContainerClassName="bg-white"
//               onChange={(lga) => setPropertyState({ lga })}
//               required
//               hiddenInputClassName="property-form-input"
//             />
//             <Select
//               options={getCities(selectedState, lga)}
//               id="city_area"
//               label="City / Area"
//               allowCustom={true}
//               value={city}
//               onChange={(city) => setPropertyState({ city })}
//               inputContainerClassName="bg-white"
//               required
//               hiddenInputClassName="property-form-input address-wrapper"
//             />
//             <RestrictInput
//               id="full_address"
//               label="Street Name/Number"
//               inputClassName="bg-white rounded-[8px] property-form-input"
//               required
//               className="property-street-wrapper"
//               defaultValue={
//                 editMode ? propertyDetails?.full_address : undefined
//               }
//               restrictedWordsOptions={{
//                 words: [
//                   ...getAllStates(),
//                   ...getAllLocalGovernments(),
//                   ...getAllCities(),
//                 ],
//               }}
//             />

//             {formType === "rental" && (
//               <>
//                 <div className="coordinate-wrapper flex flex-col gap-2">
//                   <label> Coordinates </label>
//                   <div className="flex items-center px-2 h-12 text-xs md:text-sm font-normal rounded-[4px] w-full custom-primary-outline border border-solid border-[#C1C2C366] dark:bg-darkText-primary hover:border-[#00000099] dark:hover:border-darkText-2">
//                     <Modal>
//                       <ModalTrigger asChild>
//                         <button className="capitalize bg-brand-9 text-xs rounded-md px-2 text-white h-3/4">
//                           Set Location
//                         </button>
//                       </ModalTrigger>
//                       <ModalContent>
//                         <GoogleMapsModal
//                           setLat={setLat}
//                           setLng={setLng}
//                           setCoordinate={setCoordinate}
//                           coordinate={coordinate as string}
//                         />
//                       </ModalContent>
//                     </Modal>
//                     <input
//                       name="coordinate"
//                       id="coordinate"
//                       onChange={(e) => setCoordinate(e.target.value)}
//                       value={coordinate}
//                       type="text"
//                       className="w-full h-full dark:bg-transparent rounded-[4px] outline-none px-2"
//                     />
//                     {coordinate && (
//                       <button
//                         type="button"
//                         className="bg-transparent outline-none"
//                         onClick={(e) => {
//                           const previousSibling = e.currentTarget
//                             .previousElementSibling as HTMLInputElement;
//                           if (previousSibling) {
//                             setCoordinate("");
//                             previousSibling.value = "";
//                             e.stopPropagation();
//                           } else {
//                             console.warn("Previous sibling does not exist.");
//                           }
//                         }}
//                       >
//                         <DeleteIconX />
//                       </button>
//                     )}
//                   </div>
//                 </div>
//               </>
//             )}

//             {!isFacility && (
//               <SelectWithImage
//                 options={landlordOptions}
//                 id="land_lord_id"
//                 label="Landlord"
//                 inputContainerClassName="bg-white"
//                 resetKey={resetKey}
//                 className="property-landlord-wrapper"
//                 value={landlordOptions.find(
//                   (l) => l.value === selectedLandlord
//                 )}
//                 onChange={(value) => setSelectedLandlord(value)}
//                 hiddenInputClassName="property-form-input"
//                 placeholder={
//                   landlordsLoading
//                     ? "Loading landlords..."
//                     : landlordsError
//                     ? "Error loading landlords"
//                     : "Select landlord"
//                 }
//               />
//             )}

//             {isDirector && (
//               <Select
//                 id="branch_id"
//                 required
//                 label="Branch"
//                 className="property-branch-wrapper"
//                 resetKey={resetKey}
//                 options={branchOptions}
//                 inputContainerClassName="bg-white"
//                 onChange={(selectedBranchId) =>
//                   setPropertyState({
//                     selectedBranch: {
//                       value: selectedBranchId,
//                       label:
//                         branchOptions.find(
//                           (branch) =>
//                             String(branch.value) === String(selectedBranchId)
//                         )?.label || "",
//                     },
//                   })
//                 }
//                 value={selectedBranch}
//                 hiddenInputClassName="property-form-input"
//                 placeholder={
//                   branchesLoading
//                     ? "Loading branches..."
//                     : branchesError
//                     ? "Error loading branches"
//                     : "Select branch"
//                 }
//                 // error={branchesError}
//               />
//             )}

//             {role !== "account" && (
//               <SelectWithImage
//                 options={officerOptions}
//                 defaultValue={
//                   editMode && (propertyDetails?.officer_id ?? [])[0]
//                     ? officerOptions.find(
//                         (staff: any) =>
//                           String(staff.value) ===
//                           String((propertyDetails?.officer_id ?? [])[0])
//                       ) || { value: "", label: "", icon: "" }
//                     : undefined
//                 }
//                 id="account_officer_id"
//                 label="Account Manager"
//                 className="property-officer-wrapper"
//                 inputContainerClassName="bg-white"
//                 resetKey={resetKey}
//                 hiddenInputClassName="property-form-input"
//                 placeholder={
//                   branchData.accountOfficer.loading
//                     ? "Loading account manager..."
//                     : branchData.accountOfficer.error
//                     ? "Error loading account manager"
//                     : "Select account manager"
//                 }
//                 // error={branchData.accountOfficer.error}
//                 disabled={branchData.accountOfficer.loading}
//               />
//             )}
//             <div className="property-staff-wrapper bg-transparent flex flex-col gap-2 self-end">
//               <label className="text-text-label dark:text-darkText-2">
//                 Other Staff
//               </label>
//               <MultiSelect
//                 options={staffOption}
//                 onValueChange={setSelectedStaffs}
//                 defaultValue={
//                   editMode && propertyDetails?.staff_id
//                     ? propertyDetails.staff_id
//                     : []
//                 }
//                 placeholder={
//                   branchData.staff.loading
//                     ? "Loading Other staff..."
//                     : branchData.staff.error
//                     ? "Error loading other staff"
//                     : "Select Other staff"
//                 }
//                 disabled={branchData.staff.loading}
//                 variant="default"
//                 maxCount={1}
//                 className="property-staff-wrapper bg-white dark:bg-darkText-primary dark:border dark:border-solid dark:border-[#C1C2C366] hover:bg-white dark:hover:bg-darkText-primary text-black dark:text-white py-3"
//               />
//             </div>
//             <TextArea
//               id="description"
//               label={
//                 formType === "rental"
//                   ? "Property Description"
//                   : selectedCategory?.toLocaleLowerCase() === "estate"
//                   ? "Estate Description"
//                   : selectedCategory?.toLocaleLowerCase() === "facility"
//                   ? "Facility Description"
//                   : "Estate/Facility Description"
//               }
//               className="property-description-wrapper md:col-span-2 lg:col-span-3 dark:text-white !dark:bg-transparent"
//               placeholder="Write here"
//               resetKey={resetKey}
//               required={!isFacility}
//               hiddenInputClassName="property-form-input"
//               inputSpaceClassName="bg-white dark:bg-transparent"
//               defaultValue={editMode ? propertyDetails?.description : undefined}
//             />
//           </div>
//           {/* Property Settings */}
//           <div className="flex gap-2 items-center">
//             <p className="text-primary-navy dark:text-white font-bold text-lg lg:text-xl">
//               <span className="text-status-error-primary">*</span>
//               {formType === "rental"
//                 ? "Property Settings"
//                 : selectedCategory?.toLocaleLowerCase() === "estate"
//                 ? "Estate Settings"
//                 : selectedCategory?.toLocaleLowerCase() === "facility"
//                 ? "Facility Settings"
//                 : "Estate/Facility Settings"}
//             </p>
//             <button
//               onClick={handleSectionTour}
//               type="button"
//               className="text-orange-normal"
//             >
//               <ExclamationMark />
//             </button>
//           </div>

//           <hr className="my-4" />
//           <div className="grid gap-4 md:gap-5 md:grid-cols-2 lg:grid-cols-3 dark:bg-darkText-primary dark:p-4 dark:rounded-lg">
//             <Select
//               id={formType === "rental" ? "agency_fee" : "management_fee"}
//               label={formType === "rental" ? "Agency Fee" : "Management Fee"}
//               options={[
//                 "1%",
//                 "2%",
//                 "2.5%",
//                 "3%",
//                 "3.5%",
//                 "5%",
//                 "6%",
//                 "7%",
//                 "7.5%",
//                 "8%",
//                 "9%",
//                 "10%",
//               ]}
//               isSearchable={false}
//               inputContainerClassName="bg-white"
//               resetKey={resetKey}
//               requiredNoStar
//               className="property-agency-fee-wrapper"
//               hiddenInputClassName="property-form-input"
//               defaultValue={
//                 editMode && formType === "rental"
//                   ? `${propertySettings?.agency_fee}%`
//                   : editMode && formType === "facility"
//                   ? `${propertySettings?.management_fee}%`
//                   : "5%"
//               }
//             />

//             {formType === "facility" && (
//               <>
//                 <Select
//                   id="who_to_charge_new_tenant"
//                   options={[
//                     {
//                       label: "Yes",
//                       value: "tenants",
//                     },
//                     {
//                       label: "No",
//                       value: "none",
//                     },
//                   ]}
//                   label="Enable Mgmt Fee – (New Occupant)"
//                   isSearchable={false}
//                   className="property-new-agency-fee-wrapper"
//                   inputContainerClassName="bg-white"
//                   resetKey={resetKey}
//                   requiredNoStar
//                   hiddenInputClassName="property-form-input"
//                   defaultValue={
//                     editMode
//                       ? propertySettings?.who_to_charge_new_tenant
//                       : formType === "facility"
//                       ? "no"
//                       : "yes"
//                   }
//                 />

//                 <Select
//                   id="who_to_charge_renew_tenant"
//                   className="property-renew-agency-fee-wrapper"
//                   options={[
//                     {
//                       label: "Yes",
//                       value: "tenants",
//                     },
//                     {
//                       label: "No",
//                       value: "none",
//                     },
//                   ]}
//                   label="Enable Mgmt Fee – (Renewal Occupant)"
//                   isSearchable={false}
//                   inputContainerClassName="bg-white"
//                   resetKey={resetKey}
//                   requiredNoStar
//                   hiddenInputClassName="property-form-input"
//                   defaultValue={
//                     editMode
//                       ? propertySettings?.who_to_charge_renew_tenant
//                       : formType === "facility"
//                       ? "no"
//                       : "yes"
//                   }
//                 />
//               </>
//             )}

//             {formType === "rental" && (
//               <>
//                 <Select
//                   id="who_to_charge_new_tenant"
//                   options={["landlord", "tenants", "both", "none"]}
//                   label="Who to pay Agency Fee (New Rent)"
//                   isSearchable={false}
//                   className="property-new-agency-fee-wrapper"
//                   inputContainerClassName="bg-white"
//                   resetKey={resetKey}
//                   requiredNoStar
//                   hiddenInputClassName="property-form-input"
//                   defaultValue={
//                     editMode
//                       ? propertySettings?.who_to_charge_new_tenant
//                       : "tenants"
//                   }
//                 />
//                 <Select
//                   id="who_to_charge_renew_tenant"
//                   className="property-renew-agency-fee-wrapper"
//                   options={["landlord", "tenants", "both", "none"]}
//                   label="Management Fee (Renewal Rent)"
//                   isSearchable={false}
//                   inputContainerClassName="bg-white"
//                   resetKey={resetKey}
//                   requiredNoStar
//                   hiddenInputClassName="property-form-input"
//                   defaultValue={
//                     editMode
//                       ? propertySettings?.who_to_charge_renew_tenant
//                       : "landlord"
//                   }
//                 />
//                 <Select
//                   options={filteredCautionDepositOptions}
//                   isSearchable={false}
//                   id="caution_deposit"
//                   className="property-caution-deposit-wrapper"
//                   label="Caution Deposit"
//                   inputContainerClassName="bg-white"
//                   resetKey={resetKey}
//                   requiredNoStar
//                   hiddenInputClassName="property-form-input"
//                   defaultValue={
//                     editMode ? propertySettings?.caution_deposit : "Escrow it"
//                   }
//                 />
//               </>
//             )}

//             {/* NOTE: I ADDED CURRENCY TO FACILITY PROPERTY CREATE FORM  */}
//             <Select
//               options={Object.entries(currencySymbols).map(([key, symbol]) => ({
//                 value: key.toLowerCase(),
//                 label: `${symbol} ${
//                   key.charAt(0).toUpperCase() + key.slice(1).toLowerCase()
//                 }`,
//               }))}
//               id="currency"
//               label="Currency"
//               className="property-currency-wrapper"
//               isSearchable={false}
//               inputContainerClassName="bg-white"
//               resetKey={resetKey}
//               requiredNoStar
//               hiddenInputClassName="property-form-input"
//               defaultValue={
//                 editMode && propertySettings?.currency
//                   ? {
//                       value: propertySettings.currency,
//                       label: `${currencySymbols[propertySettings.currency]} ${
//                         propertySettings.currency.charAt(0).toUpperCase() +
//                         propertySettings.currency.slice(1).toLowerCase()
//                       }`,
//                     }
//                   : {
//                       value: "naira",
//                       label: `${currencySymbols.naira} Naira`,
//                     }
//               }
//             />

//             <Select
//               id="group_chat"
//               label="Group Chat"
//               options={["yes", "no"]}
//               isSearchable={false}
//               inputContainerClassName="bg-white"
//               resetKey={resetKey}
//               requiredNoStar
//               className="property-group-chat-wrapper"
//               hiddenInputClassName="property-form-input"
//               defaultValue={
//                 editMode
//                   ? propertySettings?.group_chat
//                   : formType === "rental"
//                   ? "yes"
//                   : "no"
//               }
//             />
//             <Select
//               options={["yes", "no"]}
//               id={formType === "rental" ? "rent_penalty" : "fee_penalty"}
//               label={formType === "rental" ? "Rent Penalty" : "Fee Penalty"}
//               isSearchable={false}
//               inputContainerClassName="bg-white"
//               resetKey={resetKey}
//               requiredNoStar
//               className="property-penalty-wrapper"
//               hiddenInputClassName="property-form-input"
//               defaultValue={
//                 editMode && formType === "rental"
//                   ? propertySettings?.rent_penalty
//                   : editMode && formType === "facility"
//                   ? propertySettings?.fee_penalty
//                   : "yes"
//               }
//             />
//             <Select
//               options={["yes", "no"]}
//               id="request_call_back"
//               label="Request Call Back"
//               isSearchable={false}
//               inputContainerClassName="bg-white"
//               className="property-request-call-back-wrapper"
//               resetKey={resetKey}
//               requiredNoStar
//               hiddenInputClassName="property-form-input"
//               defaultValue={
//                 editMode ? propertySettings?.request_callback : "yes"
//               }
//             />
//             <Select
//               options={["yes", "no"]}
//               id="book_visitors"
//               label="Book Visitors"
//               isSearchable={false}
//               className="property-book-visitors-wrapper"
//               inputContainerClassName="bg-white"
//               resetKey={resetKey}
//               requiredNoStar
//               hiddenInputClassName="property-form-input"
//               defaultValue={
//                 editMode
//                   ? propertySettings?.book_visitors
//                   : formType === "rental"
//                   ? "no"
//                   : "yes"
//               }
//             />
//             <Select
//               options={["yes", "no"]}
//               id="vehicle_record"
//               className="property-vehicle-records-wrapper"
//               label="Vehicle Records"
//               isSearchable={false}
//               inputContainerClassName="bg-white"
//               resetKey={resetKey}
//               requiredNoStar
//               hiddenInputClassName="property-form-input"
//               defaultValue={editMode ? propertySettings?.vehicle_record : "no"}
//             />
//             <Select
//               options={["yes", "no"]}
//               id="active_vat"
//               className="property-active-vat-wrapper"
//               label="Activate 7.5% VAT"
//               isSearchable={false}
//               inputContainerClassName="bg-white"
//               resetKey={resetKey}
//               requiredNoStar
//               hiddenInputClassName="property-form-input"
//               defaultValue={editMode ? propertySettings?.VAT : "yes"}
//             />

//             {formType === "rental" && (
//               <>
//                 <Select
//                   options={["yes", "no"]}
//                   id="is_inventory"
//                   defaultValue={
//                     editMode ? propertySettings?.is_inventory : "no"
//                   }
//                   label="Inventory"
//                   inputContainerClassName="bg-white"
//                   resetKey={resetKey}
//                   className="property-inventory-wrapper"
//                   hiddenInputClassName="property-form-input"
//                 />
//               </>
//             )}
//           </div>
//         </div>

//         <div className="">
//           <PropertyFormFooter
//             editMode={editMode}
//             handleReset={handleReset}
//             requestLoading={requestLoading}
//             propertyId={propertyId}
//             onAddUnit={onAddUnit}
//           />
//         </div>
//       </AuthForm>
//     </FlowProgress>
//   );
// };

// export default CreatePropertyForm;














import { Modal, ModalContent } from "@/components/Modal/modal";
// import { useContext, useEffect, useState } from "react";
// import { FlowProgressContext } from "@/components/FlowProgress/flow-progress";
// import FooterModal from "./footer-modal";
// import Button from "@/components/Form/Button/button";
// import FixedFooter from "@/components/FixedFooter/fixed-footer";
// import { useUnitForm } from "./unit-form-context";
// import { toast } from "sonner";
// import { useRouter, useSearchParams } from "next/navigation";
// import { useAddUnitStore } from "@/store/add-unit-store";
// import { useRole } from "@/hooks/roleContext";

// interface AddUnitFooterProps {
//   noForm?: boolean;
// }

// const AddUnitFooter = ({ noForm }: AddUnitFooterProps) => {
//   const searchParams = useSearchParams();
//   const { canSubmit, handleInputChange, missingFields, validateForm } =
//     useContext(FlowProgressContext);
//   const { submitLoading, setSaveClick, shouldRedirect, setShouldRedirect } =
//     useUnitForm();
//   const [footerModalOpen, setFooterModalOpen] = useState(false);
//   const router = useRouter();
//   const { role } = useRole();
//   const addedUnits = useAddUnitStore((s) => s.addedUnits);
//   const newForm = useAddUnitStore((s) => s.newForm ?? false);
//   const [checkSubmit, setCheckSubmit] = useState(false);
//   const [saveAfterValidation, setSaveAfterValidation] = useState(false);

//   // Track form presence in DOM
//   const [formInDom, setFormInDom] = useState<boolean>(true);

//   useEffect(() => {
//     const interval = setInterval(() => {
//       const formById = document.getElementById("add-unit-form");
//       const anyForm = document.querySelector("form");
//       setFormInDom(!!formById || !!anyForm);
//     }, 300);
//     return () => clearInterval(interval);
//   }, []);

//   const hasAddedUnits = addedUnits.length > 0;

//   const getPropertiesRoute = () => {
//     switch (role) {
//       case "director":
//         return "/management/properties";
//       case "manager":
//         return "/manager/management/properties";
//       case "account":
//         return "/accountant/management/properties";
//       default:
//         return "/unauthorized";
//     }
//   };

//   const navigateBackOrToProperties = () => {
//     const page = searchParams.get("page");
//     if (page === "rent-unit") {
//       router.back();
//     } else {
//       router.push(getPropertiesRoute());
//     }
//   };

//   useEffect(() => {
//     if (shouldRedirect && !submitLoading) {
//       setShouldRedirect(false);
//       navigateBackOrToProperties();
//     }
//   }, [shouldRedirect, submitLoading]);

//   useEffect(() => {
//     if (saveAfterValidation) {
//       if (!canSubmit && !noForm) {
//         toast.error(
//           `The following fields are required: ${missingFields.join(", ")}`
//         );
//       } else {
//         setSaveClick(true);
//         const form = document.getElementById(
//           "add-unit-form"
//         ) as HTMLFormElement | null;
//         form?.requestSubmit();
//       }
//       setSaveAfterValidation(false);
//     }
//   }, [saveAfterValidation, canSubmit, missingFields, noForm, setSaveClick]);

//   const handleAddMoreClick = () => {
//     if (!noForm) {
//       handleInputChange();
//       setCheckSubmit(true);
//     } else {
//       setFooterModalOpen(true);
//     }
//   };

//   useEffect(() => {
//     if (checkSubmit) {
//       if (!canSubmit && !noForm) {
//         toast.error(
//           `The following fields are required: ${missingFields.join(", ")}`
//         );
//       } else {
//         setFooterModalOpen(true);
//       }
//       setCheckSubmit(false);
//     }
//   }, [canSubmit, missingFields, checkSubmit, noForm]);

//   const handleSaveClick = (e: React.MouseEvent<HTMLButtonElement>) => {
//     e.preventDefault();
//     // Force synchronous validation to ensure latest state
//     const isValid = validateForm();
//     const formInDom = document.getElementById(
//       "add-unit-form"
//     ) as HTMLFormElement | null;

//     if (formInDom && !isValid) {
//       toast.error(
//         `The following fields are required: ${missingFields.join(", ")}`
//       );
//       return;
//     }

//     if (addedUnits.length > 0) {
//       const hasNotYetUploaded = addedUnits.some((unit) => unit.notYetUploaded);
//       if (hasNotYetUploaded) {
//         toast.warning(
//           "There are units that have not been updated yet. Please update them to continue."
//         );
//         return;
//       }
//     }

//     if (formInDom && isValid) {
//       setSaveClick(true);
//       setSaveAfterValidation(true); // Trigger saveAfterValidation to maintain your logic
//       return;
//     }

//     if (!formInDom) {
//       if (addedUnits.length === 0) {
//         toast.success("Property has been added to your drafts.");
//         navigateBackOrToProperties();
//         return;
//       }
//       navigateBackOrToProperties();
//       return;
//     }
//   };

//   return (
//     <FixedFooter className="unit-footer-actions flex items-center justify-end gap-10">
//       <Modal state={{ isOpen: footerModalOpen, setIsOpen: setFooterModalOpen }}>
//         <ModalContent>
//           <FooterModal noForm={noForm} />
//         </ModalContent>
//       </Modal>
//       <div className="unit-action-buttons property-save-button-wrapper flex items-center gap-10">
//         {!formInDom && hasAddedUnits && (
//           <Button
//             size="base_medium"
//             className="add-more-units-button py-2 px-6"
//             disabled={submitLoading}
//             onClick={handleAddMoreClick}
//           >
//             {submitLoading ? "Adding..." : "Add More Unit"}
//           </Button>
//         )}
//         <Button
//           form="add-unit-form"
//           type="button"
//           size="base_medium"
//           className="save-button py-2 px-6"
//           disabled={submitLoading}
//           onClick={handleSaveClick}
//         >
//           {submitLoading ? "Saving..." : "Save"}
//         </Button>
//       </div>
//     </FixedFooter>
//   );
// };

// export default AddUnitFooter;
